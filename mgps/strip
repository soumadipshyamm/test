{
  "error": {
    "code": "parameter_unknown",
    "doc_url": "https://stripe.com/docs/error-codes/parameter-unknown",
    "message": "Received unknown parameter: paymentIntentMethodTypes. Did you mean payment_method_types?",
    "param": "paymentIntentMethodTypes",
    "request_log_url": "https://dashboard.stripe.com/test/logs/req_1F44lxBX8Kp5kz?t=1740048334",
    "type": "invalid_request_error"
  }
}


export const processPayment = async (memberId: string, amount: number, currency: string, type: string) => {

	const paymentIntent = await stripe.paymentIntents.create({
		amount: amount * 100,
		currency: currency,
		metadata: { memberId, type },
		description: 'Payment for dog',
		payment_method_types: ['card'],
	});
	return paymentIntent;

}

parameter_unknown - paymentIntentMethodTypes
Received unknown parameter: paymentIntentMethodTypes. Did you mean payment_method_types?
correction and update this code
















Here's a **full advanced structure** for a **Node.js + MongoDB** application that handles:  

✅ **Wallet Recharge** (Add funds to the user wallet)  
✅ **Subscription Purchase** (Deduct funds and activate subscription)  
✅ **Transaction Table** (Track all wallet & subscription transactions)  
✅ **Stripe Integration** (For real payments)  
✅ **Common Payment Function** (Reusable for recharge & subscriptions)  

---

## **📂 Project Folder Structure**
```
/your_project
│-- /config
│   ├── db.js              # MongoDB Connection
│   ├── stripe.js          # Stripe Configuration
│-- /controllers
│   ├── paymentController.js # Payment Logic
│   ├── walletController.js  # Wallet Recharge Logic
│   ├── subscriptionController.js # Subscription Purchase Logic
│-- /models
│   ├── Transaction.js     # Transaction Schema
│   ├── User.js            # User Schema
│-- /routes
│   ├── paymentRoutes.js   # Routes for payments
│-- server.js              # Main Server File
│-- .env                   # Environment Variables
│-- package.json           # Dependencies
```

---

# **📌 1. Install Dependencies**
```sh
npm install express mongoose dotenv stripe body-parser cors
```

---

# **📌 2. Set Up Configuration Files**
### **🔹 MongoDB Connection (`config/db.js`)**
```javascript
const mongoose = require("mongoose");
require("dotenv").config();

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("✅ MongoDB Connected");
  } catch (error) {
    console.error("❌ MongoDB Connection Error:", error);
    process.exit(1);
  }
};

module.exports = connectDB;
```

---

### **🔹 Stripe Configuration (`config/stripe.js`)**
```javascript
const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);

module.exports = stripe;
```

---

# **📌 3. Create MongoDB Models**
### **🔹 User Model (`models/User.js`)**
```javascript
const mongoose = require("mongoose");

const UserSchema = new mongoose.Schema({
  name: String,
  email: String,
  walletBalance: { type: Number, default: 0 },
  subscription: {
    type: String,
    enum: ["none", "basic", "premium"],
    default: "none",
  },
});

module.exports = mongoose.model("User", UserSchema);
```

---

### **🔹 Transaction Model (`models/Transaction.js`)**
```javascript
const mongoose = require("mongoose");

const TransactionSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  type: { type: String, enum: ["wallet_recharge", "subscription_purchase"] },
  amount: Number,
  status: { type: String, enum: ["pending", "success", "failed"], default: "pending" },
  transactionId: String,
});

module.exports = mongoose.model("Transaction", TransactionSchema);
```

---

# **📌 4. Create Controllers**
### **🔹 Common Payment Function (`controllers/paymentController.js`)**
```javascript
const stripe = require("../config/stripe");
const User = require("../models/User");
const Transaction = require("../models/Transaction");

exports.processPayment = async (userId, amount, type) => {
  try {
    const user = await User.findById(userId);
    if (!user) throw new Error("User not found");

    // Create a Stripe Payment Intent
    const paymentIntent = await stripe.paymentIntents.create({
      amount: amount * 100, // Convert to cents
      currency: "usd",
      metadata: { userId, type },
    });

    // Save transaction in DB
    const transaction = new Transaction({
      userId,
      type,
      amount,
      transactionId: paymentIntent.id,
      status: "pending",
    });

    await transaction.save();

    return { success: true, clientSecret: paymentIntent.client_secret, transactionId: paymentIntent.id };
  } catch (error) {
    return { success: false, error: error.message };
  }
};
```

---

### **🔹 Wallet Recharge (`controllers/walletController.js`)**
```javascript
const User = require("../models/User");
const Transaction = require("../models/Transaction");
const { processPayment } = require("./paymentController");

exports.rechargeWallet = async (req, res) => {
  try {
    const { userId, amount } = req.body;
    if (amount <= 0) return res.status(400).json({ error: "Invalid amount" });

    const paymentResponse = await processPayment(userId, amount, "wallet_recharge");

    if (!paymentResponse.success) {
      return res.status(500).json({ error: paymentResponse.error });
    }

    res.status(200).json(paymentResponse);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
```

---

### **🔹 Subscription Purchase (`controllers/subscriptionController.js`)**
```javascript
const User = require("../models/User");
const Transaction = require("../models/Transaction");

exports.buySubscription = async (req, res) => {
  try {
    const { userId, plan } = req.body;
    const planPrices = { basic: 10, premium: 20 };

    if (!planPrices[plan]) return res.status(400).json({ error: "Invalid plan" });

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ error: "User not found" });

    if (user.walletBalance < planPrices[plan]) {
      return res.status(400).json({ error: "Insufficient balance. Please recharge your wallet." });
    }

    // Deduct wallet balance
    user.walletBalance -= planPrices[plan];
    user.subscription = plan;
    await user.save();

    // Save transaction
    const transaction = new Transaction({
      userId,
      type: "subscription_purchase",
      amount: planPrices[plan],
      status: "success",
    });

    await transaction.save();

    res.status(200).json({ message: `Subscription to ${plan} activated successfully` });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
```

---

# **📌 5. Set Up Routes (`routes/paymentRoutes.js`)**
```javascript
const express = require("express");
const { rechargeWallet } = require("../controllers/walletController");
const { buySubscription } = require("../controllers/subscriptionController");

const router = express.Router();

router.post("/recharge-wallet", rechargeWallet);
router.post("/buy-subscription", buySubscription);

module.exports = router;
```

---

# **📌 6. Set Up Server (`server.js`)**
```javascript
require("dotenv").config();
const express = require("express");
const connectDB = require("./config/db");
const cors = require("cors");
const paymentRoutes = require("./routes/paymentRoutes");

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Database Connection
connectDB();

// Routes
app.use("/api/payments", paymentRoutes);

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
```

---

# **📌 7. Testing the API**
### ✅ **Recharge Wallet**
```http
POST http://localhost:5000/api/payments/recharge-wallet
Content-Type: application/json

{
  "userId": "65d4a1a5f1d3d0487b0e9c5b",
  "amount": 50
}
```

### ✅ **Buy Subscription**
```http
POST http://localhost:5000/api/payments/buy-subscription
Content-Type: application/json

{
  "userId": "65d4a1a5f1d3d0487b0e9c5b",
  "plan": "premium"
}
```

---

## **✅ Features Included**
✔ **Wallet System**  
✔ **Subscription System**  
✔ **Transaction Tracking**  
✔ **Stripe Integration**  
✔ **Modular Code Structure**  

Would you like to add auto-renewal for subscriptions? 🚀










*************************************************************************************************

You can move this function into a **utilities file** (e.g., `utils/paymentUtils.js`) and make it reusable across your project.  

---

### **📌 1. Create `utils/paymentUtils.js`**
Create a new file in your project:  
📁 **`/utils/paymentUtils.js`**

```javascript
const stripe = require("../config/stripe");
const User = require("../models/User");
const Transaction = require("../models/Transaction");

/**
 * Common function to process payments via Stripe.
 * 
 * @param {String} userId - The ID of the user making the payment.
 * @param {Number} amount - The amount to be charged (in dollars).
 * @param {String} type - Type of payment (wallet_recharge, subscription_purchase).
 * @returns {Object} - Returns payment status and transaction details.
 */
const processPayment = async (userId, amount, type) => {
  try {
    const user = await User.findById(userId);
    if (!user) throw new Error("User not found");

    // Create a Stripe Payment Intent
    const paymentIntent = await stripe.paymentIntents.create({
      amount: amount * 100, // Convert to cents
      currency: "usd",
      metadata: { userId, type },
    });

    // Save transaction in MongoDB
    const transaction = new Transaction({
      userId,
      type,
      amount,
      transactionId: paymentIntent.id,
      status: "pending",
    });

    await transaction.save();

    return { success: true, clientSecret: paymentIntent.client_secret, transactionId: paymentIntent.id };
  } catch (error) {
    return { success: false, error: error.message };
  }
};

module.exports = { processPayment };
```

---

### **📌 2. Use the Common Function in Controllers**
Now, you can use `processPayment` in your **wallet recharge** and **subscription purchase** controllers.

---

### **🔹 `controllers/walletController.js`**
```javascript
const { processPayment } = require("../utils/paymentUtils");

exports.rechargeWallet = async (req, res) => {
  try {
    const { userId, amount } = req.body;
    if (amount <= 0) return res.status(400).json({ error: "Invalid amount" });

    const paymentResponse = await processPayment(userId, amount, "wallet_recharge");

    if (!paymentResponse.success) {
      return res.status(500).json({ error: paymentResponse.error });
    }

    res.status(200).json(paymentResponse);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
```

---

### **🔹 `controllers/subscriptionController.js`**
```javascript
const User = require("../models/User");
const Transaction = require("../models/Transaction");

exports.buySubscription = async (req, res) => {
  try {
    const { userId, plan } = req.body;
    const planPrices = { basic: 10, premium: 20 };

    if (!planPrices[plan]) return res.status(400).json({ error: "Invalid plan" });

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ error: "User not found" });

    if (user.walletBalance < planPrices[plan]) {
      return res.status(400).json({ error: "Insufficient balance. Please recharge your wallet." });
    }

    // Deduct wallet balance
    user.walletBalance -= planPrices[plan];
    user.subscription = plan;
    await user.save();

    // Save transaction
    const transaction = new Transaction({
      userId,
      type: "subscription_purchase",
      amount: planPrices[plan],
      status: "success",
    });

    await transaction.save();

    res.status(200).json({ message: `Subscription to ${plan} activated successfully` });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
```

---

### **✅ Final Summary**
✔ **Moved payment logic to `utils/paymentUtils.js`**  
✔ **Reused common `processPayment` function in controllers**  
✔ **Maintained clean and modular code structure**  

Now, your payment logic is **centralized** and can be used in multiple places easily! 🚀
*************************************************************************************************

Here's a **more optimized and structured** version of the **common payment function**, improving **reusability, error handling, and modularity**.  

---

## **📌 1. Optimize `utils/paymentUtils.js`**
- Added **logging** for better debugging  
- Wrapped functions inside a **class-based utility** for better structure  
- Improved **error handling**  
- Centralized **Stripe metadata and MongoDB interactions**  

---

### **🔹 `utils/paymentUtils.js`**
```javascript
const stripe = require("../config/stripe");
const User = require("../models/User");
const Transaction = require("../models/Transaction");

class PaymentService {
  /**
   * Process a payment via Stripe.
   * @param {String} userId - The ID of the user making the payment.
   * @param {Number} amount - The amount to be charged (in dollars).
   * @param {String} type - Type of payment (wallet_recharge, subscription_purchase).
   * @returns {Object} - Returns payment status and transaction details.
   */
  static async processPayment(userId, amount, type) {
    try {
      const user = await User.findById(userId);
      if (!user) throw new Error("User not found");

      // Validate amount
      if (amount <= 0) throw new Error("Invalid amount");

      // Create a Stripe Payment Intent
      const paymentIntent = await stripe.paymentIntents.create({
        amount: amount * 100, // Convert to cents
        currency: "usd",
        metadata: { userId, type },
      });

      // Save transaction in MongoDB
      const transaction = await Transaction.create({
        userId,
        type,
        amount,
        transactionId: paymentIntent.id,
        status: "pending",
      });

      console.log(`[PaymentService] Payment initialized: ${paymentIntent.id}`);

      return {
        success: true,
        clientSecret: paymentIntent.client_secret,
        transactionId: paymentIntent.id,
      };
    } catch (error) {
      console.error(`[PaymentService] Error processing payment: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  /**
   * Finalize a transaction after Stripe confirms payment success.
   * @param {String} transactionId - The Stripe transaction ID.
   * @returns {Object} - Returns the final status of the transaction.
   */
  static async finalizeTransaction(transactionId) {
    try {
      const transaction = await Transaction.findOne({ transactionId });
      if (!transaction) throw new Error("Transaction not found");

      // Verify payment status from Stripe
      const paymentIntent = await stripe.paymentIntents.retrieve(transactionId);
      if (paymentIntent.status !== "succeeded") {
        return { success: false, message: "Payment not completed" };
      }

      // Update transaction status
      transaction.status = "success";
      await transaction.save();

      // Update user wallet if it's a wallet recharge
      if (transaction.type === "wallet_recharge") {
        await User.findByIdAndUpdate(transaction.userId, {
          $inc: { walletBalance: transaction.amount },
        });
      }

      console.log(`[PaymentService] Payment finalized: ${transactionId}`);
      return { success: true, message: "Payment successful" };
    } catch (error) {
      console.error(`[PaymentService] Error finalizing payment: ${error.message}`);
      return { success: false, error: error.message };
    }
  }
}

module.exports = PaymentService;
```

---

## **📌 2. Update Controllers to Use Optimized Payment Utility**
Now, **controllers will be much cleaner** since all logic is handled in `PaymentService`.

---

### **🔹 Update `controllers/walletController.js`**
```javascript
const PaymentService = require("../utils/paymentUtils");

exports.rechargeWallet = async (req, res) => {
  try {
    const { userId, amount } = req.body;

    const paymentResponse = await PaymentService.processPayment(userId, amount, "wallet_recharge");

    if (!paymentResponse.success) {
      return res.status(500).json({ error: paymentResponse.error });
    }

    res.status(200).json(paymentResponse);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Confirm Payment After Success
exports.confirmWalletRecharge = async (req, res) => {
  try {
    const { transactionId } = req.body;

    const response = await PaymentService.finalizeTransaction(transactionId);
    if (!response.success) return res.status(400).json({ error: response.message });

    res.status(200).json(response);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
```

---

### **🔹 Update `controllers/subscriptionController.js`**
```javascript
const User = require("../models/User");
const Transaction = require("../models/Transaction");

exports.buySubscription = async (req, res) => {
  try {
    const { userId, plan } = req.body;
    const planPrices = { basic: 10, premium: 20 };

    if (!planPrices[plan]) return res.status(400).json({ error: "Invalid plan" });

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ error: "User not found" });

    if (user.walletBalance < planPrices[plan]) {
      return res.status(400).json({ error: "Insufficient balance. Please recharge your wallet." });
    }

    // Deduct wallet balance and activate subscription
    user.walletBalance -= planPrices[plan];
    user.subscription = plan;
    await user.save();

    // Save transaction
    await Transaction.create({
      userId,
      type: "subscription_purchase",
      amount: planPrices[plan],
      status: "success",
    });

    res.status(200).json({ message: `Subscription to ${plan} activated successfully` });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
```

---

## **📌 3. Update Routes (`routes/paymentRoutes.js`)**
```javascript
const express = require("express");
const { rechargeWallet, confirmWalletRecharge } = require("../controllers/walletController");
const { buySubscription } = require("../controllers/subscriptionController");

const router = express.Router();

router.post("/recharge-wallet", rechargeWallet);
router.post("/confirm-recharge", confirmWalletRecharge);
router.post("/buy-subscription", buySubscription);

module.exports = router;
```

---

## **📌 4. Update Server (`server.js`)**
```javascript
require("dotenv").config();
const express = require("express");
const connectDB = require("./config/db");
const cors = require("cors");
const paymentRoutes = require("./routes/paymentRoutes");

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Database Connection
connectDB();

// Routes
app.use("/api/payments", paymentRoutes);

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
```

---

## **✅ Final Optimizations**
✔ **Created `PaymentService` utility class** ✅  
✔ **Added `finalizeTransaction` to update payment status** ✅  
✔ **Improved error handling** ✅  
✔ **Refactored controllers for cleaner logic** ✅  
✔ **Added `confirm-recharge` API for wallet updates** ✅  

---

## **📌 5. API Requests**
### **Recharge Wallet**
```http
POST http://localhost:5000/api/payments/recharge-wallet
Content-Type: application/json

{
  "userId": "65d4a1a5f1d3d0487b0e9c5b",
  "amount": 50
}
```
### **Confirm Recharge**
```http
POST http://localhost:5000/api/payments/confirm-recharge
Content-Type: application/json

{
  "transactionId": "pi_3KkZTf2eZvKYlo2CeX9O"
}
```
### **Buy Subscription**
```http
POST http://localhost:5000/api/payments/buy-subscription
Content-Type: application/json

{
  "userId": "65d4a1a5f1d3d0487b0e9c5b",
  "plan": "premium"
}
```

---

### **🚀 Now, everything is fully optimized & structured!**
Would you like to add **webhooks** for auto-updating payment status? 🎯
*************************************************************************************************
*************************************************************************************************
To add transaction logging to a **log file** as part of the common function, I'll extend the existing `PaymentService` to write transaction details to a log file located in a specific directory (e.g., `/logs/transactions.log`). This ensures that every payment attempt or completion is logged for future reference.

---

## **📌 1. Implement Logging in `utils/paymentUtils.js`**
We'll create a **log file** using the **`fs` (File System)** module, and every time a transaction is processed or finalized, details will be logged. Here's how to extend your current setup.

---

### **🔹 Update `utils/paymentUtils.js` to log transactions**
```javascript
const fs = require("fs");
const path = require("path");
const stripe = require("../config/stripe");
const User = require("../models/User");
const Transaction = require("../models/Transaction");

class PaymentService {
  /**
   * Process a payment via Stripe.
   * @param {String} userId - The ID of the user making the payment.
   * @param {Number} amount - The amount to be charged (in dollars).
   * @param {String} type - Type of payment (wallet_recharge, subscription_purchase).
   * @returns {Object} - Returns payment status and transaction details.
   */
  static async processPayment(userId, amount, type) {
    try {
      const user = await User.findById(userId);
      if (!user) throw new Error("User not found");

      // Validate amount
      if (amount <= 0) throw new Error("Invalid amount");

      // Create a Stripe Payment Intent
      const paymentIntent = await stripe.paymentIntents.create({
        amount: amount * 100, // Convert to cents
        currency: "usd",
        metadata: { userId, type },
      });

      // Save transaction in MongoDB
      const transaction = await Transaction.create({
        userId,
        type,
        amount,
        transactionId: paymentIntent.id,
        status: "pending",
      });

      // Log transaction to file
      this.logTransaction({
        userId,
        type,
        amount,
        transactionId: paymentIntent.id,
        status: "pending",
        message: "Payment initialized"
      });

      return {
        success: true,
        clientSecret: paymentIntent.client_secret,
        transactionId: paymentIntent.id,
      };
    } catch (error) {
      this.logTransaction({ userId, amount, type, message: `Error: ${error.message}`, status: "failed" });
      return { success: false, error: error.message };
    }
  }

  /**
   * Finalize a transaction after Stripe confirms payment success.
   * @param {String} transactionId - The Stripe transaction ID.
   * @returns {Object} - Returns the final status of the transaction.
   */
  static async finalizeTransaction(transactionId) {
    try {
      const transaction = await Transaction.findOne({ transactionId });
      if (!transaction) throw new Error("Transaction not found");

      // Verify payment status from Stripe
      const paymentIntent = await stripe.paymentIntents.retrieve(transactionId);
      if (paymentIntent.status !== "succeeded") {
        return { success: false, message: "Payment not completed" };
      }

      // Update transaction status
      transaction.status = "success";
      await transaction.save();

      // Update user wallet if it's a wallet recharge
      if (transaction.type === "wallet_recharge") {
        await User.findByIdAndUpdate(transaction.userId, {
          $inc: { walletBalance: transaction.amount },
        });
      }

      // Log transaction finalization
      this.logTransaction({
        userId: transaction.userId,
        transactionId,
        type: transaction.type,
        amount: transaction.amount,
        status: "success",
        message: "Payment finalized successfully"
      });

      return { success: true, message: "Payment successful" };
    } catch (error) {
      this.logTransaction({ transactionId, message: `Error finalizing payment: ${error.message}`, status: "failed" });
      return { success: false, error: error.message };
    }
  }

  /**
   * Logs the transaction to a log file located in /logs/transactions.log
   * @param {Object} logData - The data to be logged
   */
  static logTransaction(logData) {
    const logDir = path.join(__dirname, "../logs");
    const logFilePath = path.join(logDir, "transactions.log");

    // Ensure the logs directory exists
    if (!fs.existsSync(logDir)) {
      fs.mkdirSync(logDir);
    }

    // Format log message
    const logMessage = `${new Date().toISOString()} | User: ${logData.userId || "N/A"} | Type: ${logData.type || "N/A"} | Amount: $${logData.amount || 0} | Transaction ID: ${logData.transactionId || "N/A"} | Status: ${logData.status} | Message: ${logData.message}\n`;

    // Write log message to file
    fs.appendFile(logFilePath, logMessage, (err) => {
      if (err) {
        console.error(`[PaymentService] Error logging transaction: ${err.message}`);
      } else {
        console.log(`[PaymentService] Transaction logged successfully.`);
      }
    });
  }
}

module.exports = PaymentService;
```

---

## **📌 2. How the `logTransaction` Works**
The `logTransaction` method will write a detailed log to a **`transactions.log`** file located in a `/logs` folder. The log file will be created if it doesn't already exist.

### **Example of Log Entries in `transactions.log`:**
```
2025-02-20T14:30:22.123Z | User: 65d4a1a5f1d3d0487b0e9c5b | Type: wallet_recharge | Amount: $50 | Transaction ID: pi_3KkZTf2eZvKYlo2CeX9O | Status: pending | Message: Payment initialized
2025-02-20T14:31:40.321Z | User: 65d4a1a5f1d3d0487b0e9c5b | Type: wallet_recharge | Amount: $50 | Transaction ID: pi_3KkZTf2eZvKYlo2CeX9O | Status: success | Message: Payment finalized successfully
```

---

## **📌 3. Update Controllers to Use the Optimized Logging**
Since the logging is handled within `PaymentService`, you don’t need to change anything in the controllers.

---

### **Controller Example (No Changes Needed)**
```javascript
const PaymentService = require("../utils/paymentUtils");

exports.rechargeWallet = async (req, res) => {
  try {
    const { userId, amount } = req.body;

    const paymentResponse = await PaymentService.processPayment(userId, amount, "wallet_recharge");

    if (!paymentResponse.success) {
      return res.status(500).json({ error: paymentResponse.error });
    }

    res.status(200).json(paymentResponse);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
```

---

## **📌 4. Logging File Location**
The **log file** is created in the `/logs` directory relative to your project:

```
📁 project-root
    └── 📁 logs
        └── 📄 transactions.log
```

Make sure that your application has **write access** to this directory.

---

## **✅ Summary of Changes**
- Created a **transaction log file** located in `/logs/transactions.log`
- Each payment or transaction update is logged with a timestamp, user ID, transaction type, amount, status, and a message
- This log can be used for debugging or auditing purposes

---

Would you like to add a feature to **view/download logs via API** or **filter specific logs**?
*************************************************************************************************
*************************************************************************************************
*************************************************************************************************
*************************************************************************************************
*************************************************************************************************
