Here’s how you can create **User** routes with **CRUD (Create, Read, Update, Delete)** functionality in **TypeScript**. I'll guide you through creating the routes, controllers, and services for handling user-related actions.

### **1. User Model (Interface)**

Define an interface for the user data.

#### **`models/userModel.ts`**
```typescript
export interface User {
    id: number;
    name: string;
    email: string;
    age: number;
}
```

### **2. User Routes**

Define the routes to handle the **CRUD** operations.

#### **`routes/userRoutes.ts`**
```typescript
import express from "express";
import { createUser, getUser, updateUser, deleteUser } from "../controllers/userController";

const router = express.Router();

// Create a new user
router.post("/user", createUser);

// Get user by ID
router.get("/user/:id", getUser);

// Update user by ID
router.put("/user/:id", updateUser);

// Delete user by ID
router.delete("/user/:id", deleteUser);

export default router;
```

### **3. User Controller**

Create the controller that handles requests and interacts with the service layer.

#### **`controllers/userController.ts`**
```typescript
import { Request, Response } from "express";
import { createNewUser, findUserById, updateUserById, deleteUserById } from "../services/userService";
import { User } from "../models/userModel";

// Create a new user
export const createUser = async (req: Request, res: Response): Promise<Response> => {
    try {
        const { name, email, age } = req.body;
        const user: User = { id: Date.now(), name, email, age }; // Generate ID for simplicity
        const newUser = await createNewUser(user);
        return res.status(201).json(newUser);
    } catch (error) {
        return res.status(500).json({ message: "Error creating user" });
    }
};

// Get user by ID
export const getUser = async (req: Request, res: Response): Promise<Response> => {
    try {
        const userId = parseInt(req.params.id);
        const user = await findUserById(userId);
        if (user) {
            return res.status(200).json(user);
        } else {
            return res.status(404).json({ message: "User not found" });
        }
    } catch (error) {
        return res.status(500).json({ message: "Error retrieving user" });
    }
};

// Update user by ID
export const updateUser = async (req: Request, res: Response): Promise<Response> => {
    try {
        const userId = parseInt(req.params.id);
        const updatedData: Partial<User> = req.body; // Partial to allow partial updates
        const updatedUser = await updateUserById(userId, updatedData);
        if (updatedUser) {
            return res.status(200).json(updatedUser);
        } else {
            return res.status(404).json({ message: "User not found" });
        }
    } catch (error) {
        return res.status(500).json({ message: "Error updating user" });
    }
};

// Delete user by ID
export const deleteUser = async (req: Request, res: Response): Promise<Response> => {
    try {
        const userId = parseInt(req.params.id);
        const isDeleted = await deleteUserById(userId);
        if (isDeleted) {
            return res.status(200).json({ message: "User deleted successfully" });
        } else {
            return res.status(404).json({ message: "User not found" });
        }
    } catch (error) {
        return res.status(500).json({ message: "Error deleting user" });
    }
};
```

### **4. User Service**

Service layer to handle logic like interacting with the database or in-memory store.

#### **`services/userService.ts`**
```typescript
import { User } from "../models/userModel";

let users: User[] = []; // Simple in-memory user list

// Create a new user
export const createNewUser = async (user: User): Promise<User> => {
    users.push(user);
    return user;
};

// Find user by ID
export const findUserById = async (id: number): Promise<User | undefined> => {
    return users.find(user => user.id === id);
};

// Update user by ID
export const updateUserById = async (id: number, updatedData: Partial<User>): Promise<User | undefined> => {
    const userIndex = users.findIndex(user => user.id === id);
    if (userIndex !== -1) {
        users[userIndex] = { ...users[userIndex], ...updatedData };
        return users[userIndex];
    }
    return undefined;
};

// Delete user by ID
export const deleteUserById = async (id: number): Promise<boolean> => {
    const userIndex = users.findIndex(user => user.id === id);
    if (userIndex !== -1) {
        users.splice(userIndex, 1);
        return true;
    }
    return false;
};
```

### **5. App Setup**

Set up the **Express** app to use the routes.

#### **`index.ts`**
```typescript
import express from "express";
import userRoutes from "./routes/userRoutes";

const app = express();

app.use(express.json()); // Middleware to parse JSON

// Use user routes
app.use("/api", userRoutes);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
```

---

### **6. Test Using Postman or Curl**

- **Create a User (POST)**:  
  `POST http://localhost:3000/api/user`  
  Body (JSON):
  ```json
  {
    "name": "John Doe",
    "email": "john@example.com",
    "age": 25
  }
  ```

- **Get User by ID (GET)**:  
  `GET http://localhost:3000/api/user/1`

- **Update User (PUT)**:  
  `PUT http://localhost:3000/api/user/1`  
  Body (JSON):
  ```json
  {
    "name": "Jane Doe",
    "email": "jane@example.com"
  }
  ```

- **Delete User (DELETE)**:  
  `DELETE http://localhost:3000/api/user/1`

---

### ✅ **This Setup is Ready for:**
- **Creating**, **Reading**, **Updating**, and **Deleting** users using TypeScript and Express.
- This can easily be expanded to work with a real database (e.g., MySQL, MongoDB) by replacing the in-memory logic with database operations.

Would you like to see this connected with a database or anything else?
