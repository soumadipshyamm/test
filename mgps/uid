


export const divideWinPrice = async (req: Request, res: Response): Promise<any> => {
	try {
		const dogId = req.params.dogId;

		// Fetch all purchase records
		const purchases = await purchaseModel.find();

		// Filter and map to include only matching orders for the given dogId
		const membersWithDog = purchases
			.map(purchase => {
				// Filter orders inside each purchase to only those matching the dogId
				const matchingOrders = purchase.orders.filter(order => order.dog_ObjectId === dogId);

				if (matchingOrders.length > 0) {
					return {
						_id: purchase._id,
						member_ObjectId: purchase.member_ObjectId,
						orders: matchingOrders,
						total_price: purchase.total_price,
						tax: purchase.tax,
						platformCharges: purchase.platformCharges,
						paybleAmount: purchase.paybleAmount
					};
				}
				return null;
			})
			.filter(Boolean); // remove nulls

		// Return the result
		return res.status(200).json({
			count: membersWithDog.length,
			members: membersWithDog
		});
	} catch (error) {
		console.error(error);
		return res.status(500).json({ message: 'Server Error', error });
	}
};



















export const divideWinPrice = async (req: Request, res: Response): Promise<any> => {
	try {
		const dogId = req.params.dogId; // e.g., "67dd5eb505dc63b6cecc89f7"

		// Fetch all purchase records
		const purchases = await purchaseModel.find();

		// Filter members who have the specified dogId in any of their orders
		const membersWithDog = purchases.filter(purchase =>
			purchase.orders.some(order => order.dog_ObjectId === dogId)
		);

		// Get unique member_ObjectIds
		const uniqueMemberIds = [...new Set(membersWithDog.map(p => p.member_ObjectId))];

		// Respond with the count and optional list
		return res.status(200).json({
			count: uniqueMemberIds.length,
			member_ObjectIds: uniqueMemberIds
		});
	} catch (error) {
		console.error(error);
		return res.status(500).json({ message: 'Server Error', error });
	}
};










export const divideWinPrice = async (req: Request, res: Response): Promise<any> => {
	const dogId = req.params.dogId; // Assuming dogId is passed as a route parameter

	const members = await purchaseModel.find(); // Fetch all members from the database
	return res.status(200).json(members); // Return the found member

};




[
    {
        "_id": "67ed13ae32ac64ecc66a72eb",
        "member_ObjectId": "67bef37dc34ccc925695635d",
        "orders": [
            {
                "dog_ObjectId": "67dd5eb505dc63b6cecc89f7",
                "unit_qty": 4,
                "unit_price": 12,
                "total_unit_price": 72,
                "_id": "67ed13ae32ac64ecc66a72ec",
                "id": "67ed13ae32ac64ecc66a72ec"
            },
            {
                "dog_ObjectId": "67dd705d16992f8dada2376f",
                "unit_qty": 10,
                "unit_price": 12,
                "total_unit_price": 180,
                "_id": "67ed13cc32ac64ecc66a7307",
                "id": "67ed13cc32ac64ecc66a7307"
            }
        ],
        "total_price": 66.33,
        "tax": 15,
        "platformCharges": 30
    },
    {
        "_id": "67f39bbdb9c1147e47810d9b",
        "member_ObjectId": "67f39b606aa16f27c1241fa1",
        "orders": [
            {
                "dog_ObjectId": "67dd5eb505dc63b6cecc89f3",
                "unit_qty": 2,
                "unit_price": 12,
                "total_unit_price": 36,
                "_id": "67f39bbdb9c1147e47810d9c",
                "id": "67f39bbdb9c1147e47810d9c"
            }
        ],
        "total_price": 22.11,
        "tax": 5,
        "platformCharges": 10,
        "paybleAmount": 37.11
    }
]




export const divideWinPrice = async (req: Request, res: Response): Promise<any> => {
    try {
        const dogId = req.params.dogId;

        // Fetch all members
        const members = await purchaseModel.find();

        // Filter members whose orders contain the given dogId
        const filteredMembers = members.filter(member =>
            member.orders.some(order => order.dog_ObjectId.toString() === dogId)
        );

        // Return the count and the matching members (if you want to see details)
        return res.status(200).json({
            totalMembers: filteredMembers.length,
            members: filteredMembers
        });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ error: 'Internal Server Error' });
    }
};


