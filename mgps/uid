
export const divideWinPrice = async (req: Request, res: Response): Promise<any> => {
	try {
		const dogId = req.params.id;
		const winPrice = 1000;

		const firstPart = winPrice * 0.60; // 60%
		const secondPart = (winPrice * 0.40) / 100; // 40% divided by 100
		const winPoints = secondPart;

		console.log("First 60%:", firstPart);
		console.log("Per Unit Win Point:", winPoints);

		// Fetch all purchase records
		const purchases = await purchaseModel.find();

		// Process purchases
		const membersWithDog = await Promise.all(
			purchases.map(async (purchase) => {
				// Filter matching orders for the given dogId
				const matchingOrders = purchase.orders.filter(order => order.dog_ObjectId.toString() === dogId);

				if (matchingOrders.length === 0) return null;

				// Calculate total units for the matched orders
				const totalUnitQty = matchingOrders.reduce((sum, order) => sum + order.unit_qty, 0);
				const earnedPoints = totalUnitQty * winPoints;

				// Fetch member wallet
				const memberWallet = await walletModel.findOne({ member_id: purchase.member_ObjectId });

				if (memberWallet) {
					// Update wallet balance by adding earned points
					memberWallet.amount += earnedPoints;
					await memberWallet.save();

					console.log(`Updated wallet for Member ID: ${purchase.member_ObjectId} | Earned Points: ${earnedPoints} | New Balance: ${memberWallet.amount}`);
				} else {
					console.log(`Wallet not found for Member ID: ${purchase.member_ObjectId}`);
				}

				// Return structured member data
				return {
					_id: purchase._id,
					member_ObjectId: purchase.member_ObjectId,
					orders: matchingOrders,
					total_price: purchase.total_price,
					tax: purchase.tax,
					platformCharges: purchase.platformCharges,
					paybleAmount: purchase.paybleAmount,
					totalUnits: totalUnitQty,
					earnedPoints: earnedPoints,
					memberWallet: memberWallet ? memberWallet.amount : 'Wallet Not Found'
				};
			})
		);

		// Filter out null results
		const filteredMembers = membersWithDog.filter(Boolean);

		// Send response
		return res.status(200).json({
			count: filteredMembers.length,
			members: filteredMembers
		});

	} catch (error) {
		console.error(error);
		return res.status(500).json({ message: 'Server Error', error: error.message });
	}
};









export const divideWinPrice = async (req: Request, res: Response): Promise<any> => {
	try {
		const dogId = req.params.id;
		const winPrice = 1000;

		const firstPart = winPrice * 0.60; // 60%
		const secondPart = (winPrice * 0.40) / 100; // 40% divided by 100
		const winPoints = secondPart;

		console.log("First 60%:", firstPart);
		console.log("Per Unit Win Point:", winPoints);

		// Fetch all purchase records
	 const purchases = await purchaseModel.find();

		// Process purchases
		const membersWithDog = await Promise.all(
			purchases.map(async (purchase) => {
				// Filter matching orders for the given dogId
				const matchingOrders = purchase.orders.filter(order => order.dog_ObjectId.toString() === dogId);

				if (matchingOrders.length === 0) return null;

				// Calculate total units for the matched orders
				const totalUnitQty = matchingOrders.reduce((sum, order) => sum + order.unit_qty, 0);

				// Fetch member wallet
				const findMemberWallet = await walletModel.findOne({ member_id: purchase.member_ObjectId });

				console.log("Member ID:", purchase.member_ObjectId);
				console.log("Member Wallet:", findMemberWallet);
				console.log("Total Units:", totalUnitQty, "Earned Points:", totalUnitQty * winPoints);

				// Optionally, you can update wallet balance here (if required)

				// Return structured member data
				return {
					_id: purchase._id,
					member_ObjectId: purchase.member_ObjectId,
					orders: matchingOrders,
					total_price: purchase.total_price,
					tax: purchase.tax,
					platformCharges: purchase.platformCharges,
					paybleAmount: purchase.paybleAmount,
					totalUnits: totalUnitQty,
					earnedPoints: totalUnitQty * winPoints,
					memberWallet: findMemberWallet // optional, for response
				};
			})
		);

		// Filter out null results
		const filteredMembers = membersWithDog.filter(Boolean);

		// Send response
		return res.status(200).json({
			count: filteredMembers.length,
			members: filteredMembers
		});

	} catch (error) {
		console.error(error);
		return res.status(500).json({ message: 'Server Error', error: error.message });
	}
};











export const divideWinPrice = async (req: Request, res: Response): Promise<any> => {
	try {
		const dogId = req.params.id;
		const winPrice = 1000;
		const firstPart = winPrice * 0.60;
		const secondPart = (winPrice * 0.40) / 100;
		const winPoints = secondPart;

		console.log("First 60%:", firstPart);
		console.log("Remaining 40%:", secondPart);


		// Fetch all purchase records
		const purchases = await purchaseModel.find();

		// Filter and map to include only matching orders for the given dogId
		const membersWithDog = purchases
			.map(purchase => {
				// Filter orders inside each purchase to only those matching the dogId
				const matchingOrders = purchase.orders.filter(order => order.dog_ObjectId.toString() === dogId);
				const unitQuantities = matchingOrders
					.filter(order => order.unit_qty > 0)
					.map(order => order.unit_qty);

				const totalUnitQty = unitQuantities.reduce((sum, qty) => sum + qty, 0);

				// update wallet blance 
				console.log("******************purchase.member_ObjectId ", purchase.member_ObjectId);
				const findMemberWallet = walletModel.findOne({ member_id: purchase.member_ObjectId });

				console.log("******************findMemberWallet", findMemberWallet);
				console.log("******************************************filterfilterfilter", unitQuantities);
				console.log("Total Unit Quantity:", totalUnitQty * winPoints, totalUnitQty);

				if (matchingOrders.length > 0) {
					return {
						_id: purchase._id,
						member_ObjectId: purchase.member_ObjectId,
						orders: matchingOrders,
						total_price: purchase.total_price,
						tax: purchase.tax,
						platformCharges: purchase.platformCharges,
						paybleAmount: purchase.paybleAmount
					};
				}
				return null;
			})
			.filter(Boolean); // remove nulls

		// Return the result
		return res.status(200).json({
			count: membersWithDog.length,
			members: { membersWithDog }
		});
	} catch (error) {
		console.error(error);
		return res.status(500).json({ message: 'Server Error', error });
	}
}

















export const divideWinPrice = async (req: Request, res: Response): Promise<any> => {
	try {
		const dogId = req.params.dogId;

		// Fetch all purchase records
		const purchases = await purchaseModel.find();

		// Filter and map to include only matching orders for the given dogId
		const membersWithDog = purchases
			.map(purchase => {
				// Filter orders inside each purchase to only those matching the dogId
				const matchingOrders = purchase.orders.filter(order => order.dog_ObjectId === dogId);

				if (matchingOrders.length > 0) {
					return {
						_id: purchase._id,
						member_ObjectId: purchase.member_ObjectId,
						orders: matchingOrders,
						total_price: purchase.total_price,
						tax: purchase.tax,
						platformCharges: purchase.platformCharges,
						paybleAmount: purchase.paybleAmount
					};
				}
				return null;
			})
			.filter(Boolean); // remove nulls

		// Return the result
		return res.status(200).json({
			count: membersWithDog.length,
			members: membersWithDog
		});
	} catch (error) {
		console.error(error);
		return res.status(500).json({ message: 'Server Error', error });
	}
};



















export const divideWinPrice = async (req: Request, res: Response): Promise<any> => {
	try {
		const dogId = req.params.dogId; // e.g., "67dd5eb505dc63b6cecc89f7"

		// Fetch all purchase records
		const purchases = await purchaseModel.find();

		// Filter members who have the specified dogId in any of their orders
		const membersWithDog = purchases.filter(purchase =>
			purchase.orders.some(order => order.dog_ObjectId === dogId)
		);

		// Get unique member_ObjectIds
		const uniqueMemberIds = [...new Set(membersWithDog.map(p => p.member_ObjectId))];

		// Respond with the count and optional list
		return res.status(200).json({
			count: uniqueMemberIds.length,
			member_ObjectIds: uniqueMemberIds
		});
	} catch (error) {
		console.error(error);
		return res.status(500).json({ message: 'Server Error', error });
	}
};










export const divideWinPrice = async (req: Request, res: Response): Promise<any> => {
	const dogId = req.params.dogId; // Assuming dogId is passed as a route parameter

	const members = await purchaseModel.find(); // Fetch all members from the database
	return res.status(200).json(members); // Return the found member

};




[
    {
        "_id": "67ed13ae32ac64ecc66a72eb",
        "member_ObjectId": "67bef37dc34ccc925695635d",
        "orders": [
            {
                "dog_ObjectId": "67dd5eb505dc63b6cecc89f7",
                "unit_qty": 4,
                "unit_price": 12,
                "total_unit_price": 72,
                "_id": "67ed13ae32ac64ecc66a72ec",
                "id": "67ed13ae32ac64ecc66a72ec"
            },
            {
                "dog_ObjectId": "67dd705d16992f8dada2376f",
                "unit_qty": 10,
                "unit_price": 12,
                "total_unit_price": 180,
                "_id": "67ed13cc32ac64ecc66a7307",
                "id": "67ed13cc32ac64ecc66a7307"
            }
        ],
        "total_price": 66.33,
        "tax": 15,
        "platformCharges": 30
    },
    {
        "_id": "67f39bbdb9c1147e47810d9b",
        "member_ObjectId": "67f39b606aa16f27c1241fa1",
        "orders": [
            {
                "dog_ObjectId": "67dd5eb505dc63b6cecc89f3",
                "unit_qty": 2,
                "unit_price": 12,
                "total_unit_price": 36,
                "_id": "67f39bbdb9c1147e47810d9c",
                "id": "67f39bbdb9c1147e47810d9c"
            }
        ],
        "total_price": 22.11,
        "tax": 5,
        "platformCharges": 10,
        "paybleAmount": 37.11
    }
]




export const divideWinPrice = async (req: Request, res: Response): Promise<any> => {
    try {
        const dogId = req.params.dogId;

        // Fetch all members
        const members = await purchaseModel.find();

        // Filter members whose orders contain the given dogId
        const filteredMembers = members.filter(member =>
            member.orders.some(order => order.dog_ObjectId.toString() === dogId)
        );

        // Return the count and the matching members (if you want to see details)
        return res.status(200).json({
            totalMembers: filteredMembers.length,
            members: filteredMembers
        });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ error: 'Internal Server Error' });
    }
};


