Here’s a short and professional summary of the report:

---

## **Konzite – Project Update Summary (27–28 May, 2025)**

1. **Dashboard:** DPRs can now be viewed/edited in a new tab.
2. **Work Process:** Progress tracking enhanced with date-wise data loading.
3. **Notifications:** Show DPR number and user for clarity.
4. **Pending Approvals:** New tab shows detailed DPR, user, and project info.
5. **Reports:** Auto-approval blocked if user not allocated to project.
6. **Masters:** Activities added to master data.
7. **Copy Feature:** Activities can be copied to projects and sub-projects.
8. **UI Update:** Increased PR header modal size for better view.
9. **Template Update:** PR default template updated with new structure.

---

Let me know if you need it formatted for email or a presentation slide.





To **filter rewards by `member_ObjectId`** and return only the rewards where that member is involved — along with their reward details — here's how you can update your controller function:

### Updated Controller: `divideWinPriceList`

```ts
export const divideWinPriceList = async (req: Request, res: Response): Promise<any> => {
  const memberId = req.params.id;

  try {
    const raceInstances = await rewardsModel.find().lean();

    if (raceInstances.length === 0) {
      return res.status(StatusCodes.OK).json({
        message: MESSAGE.custom("No race instances found")
      });
    }

    // Filter raceInstances to only include those with a matching member
    const filteredRewards = raceInstances
      .map(instance => {
        const matchedMembers = instance.member.filter(m =>
          m.member_ObjectId.toString() === memberId
        );

        if (matchedMembers.length > 0) {
          return {
            ...instance,
            member: matchedMembers // only include matched member(s)
          };
        }
        return null;
      })
      .filter(Boolean); // remove nulls

    return res.status(StatusCodes.OK).json({
      message: MESSAGE.get.succ,
      result: filteredRewards
    });
  } catch (error) {
    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: MESSAGE.custom("Error while fetching rewards"),
      error: error.message
    });
  }
};
```

### What this does:

* Retrieves all reward entries.
* Filters them by checking if `member_ObjectId === req.params.id`.
* Keeps only the relevant `member` object(s) in the response.
* Returns a reward entry *only if* the specified member is part of it.

### Sample Response:

For member ID: `67bef37dc34ccc925695635d`
You’ll get something like:

```json
{
  "message": "Data fetched successfully",
  "result": [
    {
      "_id": "682366005e386052cfab3875",
      "race_ObjectId": "68233bb3b0308550df4faa97",
      "dog_ObjectId": "67dd5eb505dc63b6cecc89f3",
      "reward_types": "POINTS",
      "points": null,
      "description": "",
      "member": [
        {
          "member_ObjectId": "67bef37dc34ccc925695635d",
          "unit_qty": 4,
          "unit_price": 40,
          "unit_point": 10,
          "memberPreWallet": 4640,
          "memberWallet": 4680,
          "_id": "682366005e386052cfab3877"
        }
      ]
    },
    ...
  ]
}
```

Let me know if you also want to **populate `dog_ObjectId` or `race_ObjectId`** in the same query.




export const divideWinPriceList = async (req: Request, res: Response): Promise<any> => {
	const memberId = req.params.id;
	const raceInstances = await rewardsModel.find().lean();
	// Accessing the member property of the first instance
	if (raceInstances.length > 0) {
		const checkMember = raceInstances.map(raceInstance => raceInstance.member.filter(member => member.member_Object_id.equals((memberId))));
		return res.status(StatusCodes.OK).json({
			message: MESSAGE.get.succ,
			result: checkMember,
		});
	} else {
		return res.status(StatusCodes.OK).json({
			message: MESSAGE.custom("No race instances found")
		});
	}
}


{
        "message": "Data fetched successfully",
        "result": [
            {
                "_id": "682366005e386052cfab3875",
                "race_ObjectId": "68233bb3b0308550df4faa97",
                "dog_ObjectId": "67dd5eb505dc63b6cecc89f3",
                "reward_types": "POINTS",
                "points": null,
                "description": "",
                "member": [
                    {
                        "member_ObjectId": "67bef37dc34ccc925695635d",
                        "unit_qty": 4,
                        "unit_price": 40,
                        "unit_point": 10,
                        "memberPreWallet": 4640,
                        "memberWallet": 4680,
                        "_id": "682366005e386052cfab3877"
                    }
                ],
                "createdAt": "2025-05-13T15:32:16.970Z",
                "updatedAt": "2025-05-13T15:32:16.970Z",
                "__v": 0
            },
            {
                "_id": "682366968c9fd5c654d18aff",
                "race_ObjectId": "68233bb3b0308550df4faa97",
                "dog_ObjectId": "67dd5eb505dc63b6cecc89f3",
                "reward_types": "POINTS",
                "points": null,
                "description": "",
                "member": [
                    {
                        "member_ObjectId": "67bef37dc34ccc925695635d",
                        "unit_qty": 4,
                        "unit_price": 40,
                        "unit_point": 10,
                        "memberPreWallet": 4680,
                        "memberWallet": 4720,
                        "_id": "682366968c9fd5c654d18b00"
                    }
                ],
                "createdAt": "2025-05-13T15:34:46.780Z",
                "updatedAt": "2025-05-13T15:34:46.780Z",
                "__v": 0
            }
}
