
export const addToCartDogs = async (req: Request, res: Response): Promise<any> => {
    console.log(req.body);
    const { member_id, dogs, price, tax, platformCharges, paybleAmount } = req.body;

    if (!member_id || !dogs || !Array.isArray(dogs) || dogs.length === 0) {
        return res.status(StatusCodes.BAD_REQUEST).json({
            message: "Invalid input data. Please provide valid member_id and dogs array.",
        });
    }

    try {
        // Find existing cart for the member
        let existingCart = await addToCartModel.findOne({ member_id });

        if (existingCart) {
            // Update existing cart
            dogs.forEach((newDog: any) => {
                const existingDogIndex = existingCart.dogs.findIndex(
                    (dog: any) => dog.dog_id.toString() === newDog.dog_id
                );

                if (existingDogIndex > -1) {
                    // Update quantity if dog exists
                    existingCart.dogs[existingDogIndex].unit_qty += newDog.unit_qty;
                } else {
                    // Add new dog entry
                    existingCart.dogs.push(newDog);
                }
            });

            // Update price-related fields
            existingCart.price += price;
            existingCart.tax += tax;
            existingCart.platformCharges += platformCharges;
            existingCart.paybleAmount += paybleAmount;

            await existingCart.save();

            return res.status(200).json({
                message: "Cart updated successfully!",
                data: existingCart
            });

        } else {
            // Create a new cart if it doesn't exist
            const addToCart = await addToCartModel.create({
                member_id,
                dogs,
                price,
                tax,
                platformCharges,
                paybleAmount
            });

            return res.status(201).json({
                message: "Cart created successfully!",
                data: addToCart
            });
        }
    } catch (error) {
        console.error(error);
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
            message: "An error occurred while updating the cart.",
            error
        });
    }
};














export interface IAddToCartSchema extends ICreated {
	member_id: Types.ObjectId;
	dogs: [{
		dog_id: Types.ObjectId;
		unit_qty: number | 0.00;
		unit_price: number | 0.00;
	}];
	price: number | 0.00;
	tax: number | 0.00;
	platformCharges: number | 0.00;
	paybleAmount: number | 0.00;
	date: SchemaDefinitionProperty<Date>;
	status:
	{
		type: string,
		enum: ['pending', 'active', 'inactive', 'cancelled'],
		default: 'pending'
	}
}

export interface IAddtoCart extends IAddToCartSchema, IObjectId { }


export const addToCartDogs = async (req: Request, res: Response): Promise<any> => {
	console.log(req.body);
	const { member_id, dogs, price, tax, platformCharges, paybleAmount } = req.body;

	if (!member_id || !dogs || !Array.isArray(dogs) || dogs.length === 0) {
		return res.status(StatusCodes.BAD_REQUEST).json({
			message: "Invalid input data. Please provide valid member_id and dogs array.",
		});
	}
	try {
		// Create a new member subscription
		const addToCart = await addToCartModel.create({
			member_id,
			dogs,
			price,
			tax,
			platformCharges,
			paybleAmount
		});
		return res.status(200).json({
			message: "Add to Cart  created successfully!",
			data: addToCart
		});
	}
	catch (error) {
		console.log(error);
		return res.status(StatusCodes.BAD_REQUEST).json({
			message: MESSAGE.custom("Dog updated unsuccessful!"),
			error
		});
	}

}

const addToCartSchema: Schema<IAddtoCart> = new Schema<IAddtoCart>(
	{
		member_id: {
			...SCHEMA_DEFINITION_PROPERTY.requiredObjectId,
			ref: "member"
		},
		dogs: [{
			dog_id: SCHEMA_DEFINITION_PROPERTY.requiredObjectId, // Auto generated for workers and adminstrator member
			unit_qty: SCHEMA_DEFINITION_PROPERTY.requiredNumber, // Auto generated for workers and adminstrator member
			unit_price: SCHEMA_DEFINITION_PROPERTY.optionalNullNumber // Auto generated for workers and adminstrator member
		}],
		price: SCHEMA_DEFINITION_PROPERTY.optionalNullNumber,
		tax: SCHEMA_DEFINITION_PROPERTY.optionalNullNumber,
		platformCharges: SCHEMA_DEFINITION_PROPERTY.optionalNullNumber,
		paybleAmount: SCHEMA_DEFINITION_PROPERTY.optionalNullNumber,
		date: SCHEMA_DEFINITION_PROPERTY.requiredDate,
		status: {
			...SCHEMA_DEFINITION_PROPERTY.optionalNullString,
			enum: [SUBSCRIPTION_STATUS.pending, SUBSCRIPTION_STATUS.active, SUBSCRIPTION_STATUS.inactive, SUBSCRIPTION_STATUS.cancelled, null],
		},
	},


{
member_id: '67bef37dc34ccc925695635d',
  dogs: [
    {
      dog_id: '67ce91976046a9c845a62f77',
      unit_qty: 4,
      unit_price: 12.11
    },
    { dog_id: '67ce913010df93267750bcbf', unit_qty: 5, unit_price: 10 }
  ],
  price: 22.11,
  tax: 5,
  platformCharges: 10,
  paybleAmount: 37.11
}
