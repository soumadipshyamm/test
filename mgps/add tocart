import { Request, Response } from 'express';
import { StatusCodes } from 'http-status-codes';
import { addToCartModel } from './models'; // Adjust the import according to your project structure

export const addOrUpdateDogInCart = async (req: Request, res: Response): Promise<Response> => {
  const { member_id, dog_id, unit_qty, unit_price } = req.body;

  // Validate input data
  if (!member_id || !dog_id || !unit_qty || !unit_price) {
    return res.status(StatusCodes.BAD_REQUEST).json({
      message: 'Missing required fields: member_id, dog_id, unit_qty, and unit_price are required.',
    });
  }

  try {
    // Find the member by member_id
    const member = await addToCartModel.findOne({ member_id });

    if (member) {
      // Check if the dog already exists in the member's dogs array
      const existingDogIndex = member.dogs.findIndex(dog => dog.dog_id === dog_id);

      if (existingDogIndex !== -1) {
        // Dog exists, update the unit_qty
        member.dogs[existingDogIndex].unit_qty += unit_qty;
      } else {
        // Dog doesn't exist, add a new entry
        member.dogs.push({ dog_id, unit_qty, unit_price });
      }

      // Save the updated member document
      await member.save();

      return res.status(StatusCodes.OK).json({
        message: 'Cart updated successfully!',
        data: member,
      });
    } else {
      // Member doesn't exist, create a new member with the dog information
      const newMember = new addToCartModel({
        member_id,
        dogs: [{ dog_id, unit_qty, unit_price }],
      });

      // Save the new member document
      await newMember.save();

      return res.status(StatusCodes.CREATED).json({
        message: 'New member created and dog added to cart.',
        data: newMember,
      });
    }
  } catch (error) {
    console.error('Error adding/updating dog in cart:', error);
    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: 'An error occurred while updating the cart.',
      error: error instanceof Error ? error.message : 'Unknown error',
    });
  }
};










export const addToCartDogs = async (req: Request, res: Response): Promise<any> => {
console.log(req.body);
	const { member_id, dogs, price, tax, platformCharges, paybleAmount } = req.body;

	if (!member_id || !dogs || !Array.isArray(dogs) || dogs.length === 0) {
		return res.status(StatusCodes.BAD_REQUEST).json({
			message: "Invalid input data. Please provide valid member_id and dogs array.",
		});
	}
	try {
		// Create a new member subscription
		const addToCart = await addToCartModel.create({
			member_id,
			dogs,
			price,
			tax,
			platformCharges,
			paybleAmount
		});
		return res.status(200).json({
			message: "Add to Cart  created successfully!",
			data: addToCart
		});
	}
	catch (error) {
		console.log(error);
		return res.status(StatusCodes.BAD_REQUEST).json({
			message: MESSAGE.custom("Dog updated unsuccessful!"),
			error
		});
	}

}

{
member_id: '67bef37dc34ccc925695635d',
  dogs: [
    {
      dog_id: '67ce91976046a9c845a62f77',
      unit_qty: 4,
      unit_price: 12.11
    },
    { dog_id: '67ce913010df93267750bcbf', unit_qty: 5, unit_price: 10 }
  ],
  price: 22.11,
  tax: 5,
  platformCharges: 10,
  paybleAmount: 37.11
}


