No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => Promise<Response<any, Record<string, any>> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: Request, res: Response, next: NextFunction) => Promise<Response<any, Record<string, any>> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Type 'Promise<Response<any, Record<string, any>> | undefined>' is not assignable to type 'void | Promise<void>'.
          Type 'Promise<Response<any, Record<string, any>> | undefined>' is not assignable to type 'Promise<void>'.
            Type 'Response<any, Record<string, any>> | undefined' is not assignable to type 'void'.
              Type 'Response<any, Record<string, any>>' is not assignable to type 'void'.ts(2769)
index.d.ts(207, 5): The last overload is declared here.







import jwt from "jsonwebtoken";
import { StatusCodes } from "http-status-codes";
import { ROLES } from "../constants"; // Assuming ROLES is defined somewhere
import { employeeModel } from "../models"; // Assuming employeeModel is defined

const memberAuth = async (req: Request, res: Response, next: NextFunction) => {
    try {
        // Check if the Authorization header is present
        const token = req.headers.authorization?.replace("Bearer ", "");
        
        if (!token) {
            return res.status(StatusCodes.UNAUTHORIZED).json({
                message: "Access denied. No token provided"
            });
        }

        // Check if JWT_KEY is set in the environment variables
        if (!process.env.JWT_KEY) {
            return res.status(StatusCodes.BAD_REQUEST).json({
                message: "Token secret key not found in environment variables."
            });
        }

        // Decode and verify the token
        const decoded = jwt.verify(token, process.env.JWT_KEY) as Record<string, any>;

        // Check if the role is 'member'
        if (decoded.role !== ROLES.member) {
            return res.status(StatusCodes.UNAUTHORIZED).json({
                message: "Access denied. Invalid Token!"
            });
        }

        // Attach user data to the request
        req.user = decoded;
        req.user["read_access"] = false; // Example of dynamic access control
        req.user["write_access"] = false;

        // Attach member-specific data if the user is a member
        if (req.user.role === ROLES.member) {
            const { _id } = req.user;
            const employeeData = await employeeModel.findOne({ _id, role: ROLES.member });
            if (employeeData) {
                req.user.info = employeeData; // Attach employee data to user info
            }
        }

        // Proceed to the next middleware or route handler
        next();
    } catch (error) {
        return res.status(StatusCodes.UNAUTHORIZED).json({
            message: "Invalid Token!",
            error: error.message || error,
            token: req.header("Authorization")
        });
    }
};

export default memberAuth;




const memberAuth = async (req: Request, res: Response, next: NextFunction) => {
	try {
		if (!req.headers.authorization) {
			return res.status(StatusCodes.UNAUTHORIZED).json({
				message: MESSAGE.custom("Access denied. No token provided")
			});
		}

		const token = req.headers.authorization.replace("Bearer ", "");

		if (!token) {
			return res.status(StatusCodes.UNAUTHORIZED).json({
				message: MESSAGE.custom("Access denied. No token provided")
			});
		}

		if (!process.env.JWT_KEY) {
			return res.status(StatusCodes.BAD_REQUEST).json({
				message: MESSAGE.custom("Token not found")
			});
		}
		const decoded = jwt.verify(token, process.env.JWT_KEY) as Record<string, unknown>;

		if (!(decoded.role === ROLES.member)) {
			return res.status(StatusCodes.UNAUTHORIZED).json({
				message: MESSAGE.custom("Access denied. Invalid Token!"),
				token: req.header("token")
			});
		}

		req.user = decoded;
		req.user["read_access"] = false;
		req.user["write_access"] = false;

		if (req.user.role === ROLES.member) {
			const { _id } = req.user;
			const employeeData = await employeeModel.findOne({
				$and: [{ _id }, { role: ROLES.member }]
			});
			req.user.info = employeeData;
		}

		next();
	} catch (error) {
		return res.status(StatusCodes.BAD_REQUEST).json({
			message: MESSAGE.custom("Invalid Token!"),
			error: error,
			token: req.header("token")
		});
	}
};

router.route("/password-change").post(memberAuth, validator(validators.changePasswordValidator, null), changePassword);




		const isMatch = await service.auth.comparePassword(old_password, oldPassword);
Argument of type 'string | null' is not assignable to parameter of type 'string'.
  Type 'null' is not assignable to type 'string'.ts(2345)
export const comparePassword = async (inputPassword: string, dbPassword: string): Promise<boolean> => {
	const compare = await bcrypt.compare(inputPassword, dbPassword);

	// console.log("Password Bcrypt Comparison", compare);

	if (compare) return true;
	else return false;
};





if (!old_password || old_password === null) {
    return res.status(StatusCodes.BAD_REQUEST).json({
        message: "Old password is required!"
    });
}

const isMatch = await service.auth.comparePassword(old_password, oldPassword);









export const memberRegistration = async (req: Request, res: Response): Promise<any> => {
    try {
        const {
            role,
            first_name,
            middle_name,
            last_name,
            user_name,
            password,
            email,
            gender,
            address_line_1,
            address_line_2,
            city,
            state,
            country,
            ZIP,
            contact_label,
            phone_number,
            phone_extension
        } = req.body;

        console.log("Registration Request: ", req.body);

        // Check for duplicate email, phone, and username in both member and group owner models
        const duplicateChecks = [
            { field: 'email', value: email, service: service.auth.isDuplicateGroupOwnerEmailService },
            { field: 'phone_number', value: phone_number, service: service.auth.isDuplicateValueCheckService },
            { field: 'user_name', value: user_name, service: service.auth.isDuplicateValueCheckService }
        ];

        for (const check of duplicateChecks) {
            const isDuplicate = await check.service(memberModel, check.field, check.value) ||
                                await check.service(GroupOwnerModel, check.field, check.value);
            if (isDuplicate) {
                return res.status(StatusCodes.BAD_REQUEST).json({
                    message: MESSAGE.custom(`Duplicate ${check.field.replace('_', ' ')}! ${check.value} already exists!`)
                });
            }
        }

        // Hash password
        const hashedPassword = await service.auth.hashPassword(password);

        // Create and save the new member
        const member = new memberModel({
            member_id: service.common.generateId("M", 6),
            role,
            first_name,
            middle_name,
            last_name,
            user_name,
            password: hashedPassword,
            email,
            gender,
            address_line_1,
            address_line_2,
            city,
            state,
            country,
            ZIP,
            contact_label,
            phone_number,
            phone_extension
        });

        await member.save();
        console.log("Member registered successfully: ", member);

        return res.status(StatusCodes.CREATED).json({
            message: MESSAGE.custom("Registration Successful!"),
            member: {
                member_id: member.member_id,
                role: member.role,
                first_name: member.first_name,
                last_name: member.last_name,
                user_name: member.user_name,
                email: member.email,
                phone_number: member.phone_number
            }
        });

    } catch (error) {
        console.error("Error in registration: ", error);
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
            message: MESSAGE.custom("Registration Unsuccessful!"),
            error
        });
    }
};










export const memberRegistration = async (req: Request, res: Response): Promise<any> => {
    try {
        const {
            role, first_name, middle_name, last_name, user_name, password, email, gender,
            address_line_1, address_line_2, city, state, country, ZIP, contact_label,
            phone_number, phone_extension
        } = req.body;

        console.log("Registration Request:", req.body);

        // **Step 1: Perform Duplicate Checks in Parallel**
        const [emailExists, phoneExistsMember, usernameExistsMember, phoneExistsGroup, usernameExistsGroup] = await Promise.all([
            service.auth.isDuplicateGroupOwnerEmailService(memberModel, email),
            service.auth.isDuplicateValueCheckService(memberModel, 'phone_number', phone_number),
            service.auth.isDuplicateValueCheckService(memberModel, 'user_name', user_name),
            service.auth.isDuplicateValueCheckService(GroupOwnerModel, 'phone_number', phone_number),
            service.auth.isDuplicateValueCheckService(GroupOwnerModel, 'user_name', user_name)
        ]);

        // **Step 2: Collect all errors instead of returning multiple responses**
        const errors = [];

        if (emailExists) errors.push(`Duplicate Email! ${email} already exists!`);
        if (phoneExistsMember || phoneExistsGroup) errors.push(`Duplicate Phone Number! ${phone_number} already exists!`);
        if (usernameExistsMember || usernameExistsGroup) errors.push(`Duplicate Username! ${user_name} already exists!`);

        if (errors.length > 0) {
            return res.status(StatusCodes.BAD_REQUEST).json({
                message: MESSAGE.custom(errors.join(" "))
            });
        }

        // **Step 3: Prepare Data for Insertion**
        const hashedPassword = await service.auth.hashPassword(password);
        const newMember = new memberModel({
            member_id: service.common.generateId("M", 6),
            role, first_name, middle_name, last_name, user_name,
            password: hashedPassword, email, gender,
            address_line_1, address_line_2, city, state, country, ZIP,
            contact_label, phone_number, phone_extension
        });

        // **Step 4: Save Member Data**
        await newMember.save();
        console.log("Member registered successfully:", newMember);

        return res.status(StatusCodes.CREATED).json({
            message: MESSAGE.custom("Registration Successful!"),
            member: newMember
        });

    } catch (error) {
        console.error("Registration Error:", error);
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
            message: MESSAGE.custom("Registration Unsuccessful!"),
            error
        });
    }
};











export const memberRegistration = async (req: Request, res: Response): Promise<any> => {
	try {
		const {
			role,
			first_name,
			middle_name,
			last_name,
			user_name,
			password,
			email,
			gender,
			address_line_1,
			address_line_2,
			city,
			state,
			country,
			ZIP,
			contact_label,
			phone_number,
			phone_extension
		} = req.body;
		console.log("Registration Request: ", req.body);

		if (await service.auth.isDuplicateGroupOwnerEmailService(memberModel, email)) {
			return res.status(StatusCodes.BAD_REQUEST).json({
				message: MESSAGE.custom(`Duplicate Email! ${email} already exists!`)
			});
		}
		if (await service.auth.isDuplicateValueCheckService(memberModel, 'phone_number', phone_number)) {
			return res.status(StatusCodes.BAD_REQUEST).json({
				message: MESSAGE.custom(`Duplicate Phone Number! ${phone_number} already exists!`)
			});
		}
		if (await service.auth.isDuplicateValueCheckService(memberModel, 'user_name', user_name)) {
			return res.status(StatusCodes.BAD_REQUEST).json({
				message: MESSAGE.custom(`Duplicate UserName! ${user_name} already exists!`)
			});
		}
		if (await service.auth.isDuplicateValueCheckService(GroupOwnerModel, 'phone_number', phone_number)) {
			return res.status(StatusCodes.BAD_REQUEST).json({
				message: MESSAGE.custom(`Duplicate Phone Number! ${phone_number} already exists!`)
			});
		}
		if (await service.auth.isDuplicateValueCheckService(GroupOwnerModel, 'user_name', user_name)) {
			return res.status(StatusCodes.BAD_REQUEST).json({
				message: MESSAGE.custom(`Duplicate UserName! ${user_name} already exists!`)
			});
		}

		const member = new memberModel({
			member_id: service.common.generateId("M", 6),
			role,
			first_name,
			middle_name,
			last_name,
			user_name,
			password: await service.auth.hashPassword(password),
			email,
			gender,
			address_line_1,
			address_line_2,
			city,
			state,
			country,
			ZIP,
			contact_label,
			phone_number,
			phone_extension
		});

		await member.save();
		console.log("Member  registered successfully: ", member);

		return res.status(StatusCodes.CREATED).json({
			message: MESSAGE.custom("Registration Successful!"),
			member: member // Return relevant user info
		});

	} catch (error) {
		console.log(error);
		return res.status(StatusCodes.BAD_REQUEST).json({
			message: MESSAGE.custom("Registration Unsuccessful!"),
			error
		});
	}
};






import { Request, Response } from "express";
import { StatusCodes } from "http-status-codes";
import memberModel from "../models/memberModel";
import service from "../services";
import MESSAGE from "../utils/messages";

export const emailVerification = async (req: Request, res: Response): Promise<Response> => {
    try {
        const { type, email, otp } = req.body;
        console.log("Email Verification Request:", req.body);

        if (!email || !type) {
            return res.status(StatusCodes.BAD_REQUEST).json({
                message: MESSAGE.custom("Email or type is missing!")
            });
        }

        if (type === "email") {
            const generatedOtp = await service.common.generateOtp();
            const emailExists = await service.auth.isRegisteredEmailService(memberModel, email);
            const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // OTP expires in 5 minutes

            if (!emailExists) {
                return res.status(StatusCodes.BAD_REQUEST).json({
                    message: MESSAGE.custom("Email is not registered!")
                });
            }

            await memberModel.findOneAndUpdate(
                { email },
                { otp: generatedOtp, expiresAt },
                { new: true }
            );

            return res.status(StatusCodes.OK).json({
                message: "OTP sent successfully!"
            });
        }

        if (type === "otp") {
            const member = await memberModel.findOne({ email });

            if (!member) {
                return res.status(StatusCodes.BAD_REQUEST).json({
                    message: MESSAGE.custom("Email not found!")
                });
            }

            if (!member.otp || !member.expiresAt || member.expiresAt < new Date()) {
                return res.status(StatusCodes.BAD_REQUEST).json({
                    message: MESSAGE.custom("OTP expired or invalid!")
                });
            }

            if (member.otp !== otp) {
                return res.status(StatusCodes.BAD_REQUEST).json({
                    message: MESSAGE.custom("Invalid OTP!")
                });
            }

            // OTP verified, clear it from the database
            await memberModel.findOneAndUpdate(
                { email },
                { otp: null, expiresAt: null }
            );

            return res.status(StatusCodes.OK).json({
                message: MESSAGE.custom("OTP Verified Successfully!"),
                member
            });
        }

        return res.status(StatusCodes.BAD_REQUEST).json({
            message: MESSAGE.custom("Invalid request type!")
        });

    } catch (error) {
        console.error("Error in email verification:", error);
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
            message: MESSAGE.custom("Email verification failed!"),
            error
        });
    }
};






export const emailVerification = async (req: Request, res: Response): Promise<any> => {
	try {
		const {
			type, email, otp
		} = req.body;
		console.log("Registration Request: ", req.body);
		if (type === 'email') {
			const otp = await service.common.generateOtp();
			const emailVerification = await service.auth.isRegisteredEmailService(memberModel, email);
			const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 min expiry
			if (emailVerification) {
				await memberModel.findOneAndUpdate({ email }, { otp, expiresAt });
				return res.json({ message: "OTP sent successfully!" });
			} else {
				return res.status(StatusCodes.BAD_REQUEST).json({
					message: MESSAGE.custom("Email is missing!")
				});
			}
		}

		if (type === 'otp') {
			const member = await memberModel.findOne({ email });

			if (!member) {
				return res.status(StatusCodes.BAD_REQUEST).json({
					message: MESSAGE.custom("Email not found!")
				});
			}

			// Check if the OTP matches
			if (member.otp === otp) {
				// OTP is valid, proceed with the update or any other logic
				member.otp = null; // Clear the OTP after successful verification
				await member.save();

				return res.status(StatusCodes.OK).json({
					message: MESSAGE.custom("OTP Verified Successfully!"),
					member
				});
			} else {
				return res.status(StatusCodes.BAD_REQUEST).json({
					message: MESSAGE.custom("Invalid OTP!")
				});
			}
		}

		return res.status(StatusCodes.BAD_REQUEST).json({
			message: MESSAGE.custom("Email or OTP is missing!")
		});


	} catch (error) {
		console.log(error);
		return res.status(StatusCodes.BAD_REQUEST).json({
			message: MESSAGE.custom("Registration Unsuccessful!"),
			error
		});
	}
};
















import { Request, Response } from "express";
import crypto from "crypto";
import nodemailer from "nodemailer";
import Otp from "../models/Otp";

const generateOTP = () => Math.floor(100000 + Math.random() * 900000).toString();

// Configure Nodemailer
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// Generate and send OTP
export const sendOtp = async (req: Request, res: Response) => {
  try {
    const { email } = req.body;
    const otp = generateOTP();
    const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 min expiry

    await Otp.create({ email, otp, expiresAt });

    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Your OTP Code",
      text: `Your OTP code is ${otp}. It expires in 5 minutes.`,
    });

    res.json({ message: "OTP sent successfully!" });
  } catch (error) {
    res.status(500).json({ message: "Error sending OTP", error });
  }
};

// Verify OTP
export const verifyOtp = async (req: Request, res: Response) => {
  try {
    const { email, otp } = req.body;
    const otpRecord = await Otp.findOne({ email, otp });

    if (!otpRecord) return res.status(400).json({ message: "Invalid OTP" });

    if (otpRecord.expiresAt < new Date())
      return res.status(400).json({ message: "OTP expired" });

    await Otp.deleteOne({ email, otp });

    res.json({ message: "OTP verified successfully!" });
  } catch (error) {
    res.status(500).json({ message: "Error verifying OTP", error });
  }
};
