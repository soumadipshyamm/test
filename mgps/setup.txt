
Here‚Äôs an **advanced folder structure** for a **Node.js + MongoDB + TypeScript + EJS** API project with middleware and utilities:

```
my-project/
‚îÇ‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ config/             # Configuration files (e.g., environment, DB connection)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ db.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ env.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logger.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ controllers/        # Controllers handle request logic
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.controller.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user.controller.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ middleware/         # Express middlewares
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.middleware.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ error.middleware.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ models/             # Mongoose models (schemas)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user.model.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ routes/             # Routes definition
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.routes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user.routes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ services/           # Business logic (service layer)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.service.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user.service.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ utils/              # Utility functions/helpers
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ response.util.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hash.util.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ views/              # EJS templates
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layouts/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ main.ejs
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.ejs
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ footer.ejs
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ home.ejs
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.ejs
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dashboard.ejs
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ejs
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ app.ts              # Express app setup
‚îÇ   ‚îú‚îÄ‚îÄ server.ts           # Server entry point
‚îÇ
‚îÇ‚îÄ‚îÄ tests/                  # Unit and integration tests
‚îÇ   ‚îú‚îÄ‚îÄ auth.test.ts
‚îÇ   ‚îú‚îÄ‚îÄ user.test.ts
‚îÇ
‚îÇ‚îÄ‚îÄ .env                    # Environment variables
‚îÇ‚îÄ‚îÄ .gitignore               # Git ignore file
‚îÇ‚îÄ‚îÄ package.json             # Dependencies and scripts
‚îÇ‚îÄ‚îÄ tsconfig.json            # TypeScript configuration
‚îÇ‚îÄ‚îÄ README.md                # Project documentation
```

### Explanation:
- `config/`: Handles configurations like DB, logging, and environment variables.
- `controllers/`: Manages HTTP request logic.
- `middleware/`: Contains Express middlewares like authentication, error handling, etc.
- `models/`: Defines Mongoose schemas.
- `routes/`: Stores API endpoints.
- `services/`: Contains business logic and interacts with models.
- `utils/`: Utility functions like password hashing, response formatting.
- `views/`: EJS templates for rendering frontend pages.
- `tests/`: Unit and integration tests.

---

## Setting Up the Project
Run the following commands to initialize:

```sh
mkdir my-project && cd my-project
npm init -y
npm install express mongoose dotenv ejs bcryptjs jsonwebtoken winston cors helmet
npm install --save-dev typescript @types/node @types/express @types/mongoose @types/bcryptjs @types/jsonwebtoken jest ts-jest @types/jest supertest
```

### Configure `tsconfig.json`:
```json
{
  "compilerOptions": {
    "target": "ES6",
    "module": "CommonJS",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true
  }
}
```

---

Would you like sample files (`app.ts`, `server.ts`, etc.) to go along with this setup?









I'll generate a **Node.js + TypeScript + MongoDB + EJS** project following the **advanced structure** and implement **CRUD operations with file upload and proper validation**.  

---

### **üöÄ Steps I'll Follow**  
1Ô∏è‚É£ **Set up the project** with the correct structure.  
2Ô∏è‚É£ **Configure Express, Mongoose, and Multer** for file uploads.  
3Ô∏è‚É£ **Implement CRUD operations** for a resource (e.g., Products).  
4Ô∏è‚É£ **Add validation** using **Express-Validator**.  
5Ô∏è‚É£ **Handle errors and logs** properly.  
6Ô∏è‚É£ **Ensure TypeScript support** with proper interfaces.  

---

### **üì¶ Setting Up the Project**  

#### **1Ô∏è‚É£ Create a New Project**  
```sh
mkdir node-mongo-ts-ejs-api && cd node-mongo-ts-ejs-api
npm init -y
```

#### **2Ô∏è‚É£ Install Dependencies**  
```sh
npm install express mongoose multer dotenv express-validator bcryptjs jsonwebtoken ejs winston cors method-override
npm install --save-dev typescript ts-node @types/express @types/node @types/mongoose @types/jsonwebtoken @types/bcryptjs nodemon
```

#### **3Ô∏è‚É£ Configure TypeScript**  
```sh
npx tsc --init
```
Edit **`tsconfig.json`**:
```json
{
  "compilerOptions": {
    "target": "ES6",
    "module": "CommonJS",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true
  }
}
```

#### **4Ô∏è‚É£ Update `package.json` Scripts**
```json
"scripts": {
  "start": "node dist/server.js",
  "dev": "ts-node src/server.ts",
  "build": "tsc"
}
```

---

### **üìÇ Project Structure**
```
node-mongo-ts-ejs-api/
‚îÇ‚îÄ‚îÄ üìÇ src/
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ config/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ db.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ env.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logger.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ controllers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ product.controller.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ models/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ product.model.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ product.routes.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.routes.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ middlewares/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ error.middleware.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validation.middleware.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ services/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ product.service.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ utils/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ fileUpload.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ responseHandler.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ views/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layouts/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ main.ejs
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ejs
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ products.ejs
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ public/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ uploads/  # For storing uploaded files
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÇ types/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ product.interface.ts
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ app.ts
‚îÇ   ‚îú‚îÄ‚îÄ server.ts
‚îÇ
‚îÇ‚îÄ‚îÄ .env
‚îÇ‚îÄ‚îÄ .gitignore
‚îÇ‚îÄ‚îÄ package.json
‚îÇ‚îÄ‚îÄ tsconfig.json
‚îÇ‚îÄ‚îÄ README.md
```

---

## **üìå Step 1: Configure MongoDB Connection**
üìÑ **`src/config/db.ts`**
```ts
import mongoose from "mongoose";

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI as string);
    console.log("‚úÖ MongoDB Connected");
  } catch (error) {
    console.error("‚ùå MongoDB Connection Error:", error);
    process.exit(1);
  }
};

export default connectDB;
```

---

## **üìå Step 2: Define the Product Model**
üìÑ **`src/models/product.model.ts`**
```ts
import mongoose, { Schema, Document } from "mongoose";

interface IProduct extends Document {
  name: string;
  description: string;
  price: number;
  image: string;
}

const ProductSchema = new Schema(
  {
    name: { type: String, required: true },
    description: { type: String, required: true },
    price: { type: Number, required: true },
    image: { type: String, required: false },
  },
  { timestamps: true }
);

export default mongoose.model<IProduct>("Product", ProductSchema);
```

---

## **üìå Step 3: Implement Product Controller**
üìÑ **`src/controllers/product.controller.ts`**
```ts
import { Request, Response } from "express";
import Product from "../models/product.model";
import { validationResult } from "express-validator";

export const getProducts = async (req: Request, res: Response) => {
  const products = await Product.find();
  res.render("pages/products", { products });
};

export const addProduct = async (req: Request, res: Response) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  try {
    const { name, description, price } = req.body;
    const image = req.file ? req.file.filename : "";

    const newProduct = new Product({ name, description, price, image });
    await newProduct.save();

    res.redirect("/products");
  } catch (error) {
    res.status(500).json({ message: "Server Error" });
  }
};
```

---

## **üìå Step 4: Set Up Routes**
üìÑ **`src/routes/product.routes.ts`**
```ts
import { Router } from "express";
import { getProducts, addProduct } from "../controllers/product.controller";
import upload from "../utils/fileUpload";
import { check } from "express-validator";

const router = Router();

router.get("/", getProducts);

router.post(
  "/add",
  upload.single("image"),
  [
    check("name").notEmpty().withMessage("Name is required"),
    check("description").notEmpty().withMessage("Description is required"),
    check("price").isNumeric().withMessage("Price must be a number"),
  ],
  addProduct
);

export default router;
```

üìÑ **`src/routes/index.routes.ts`**
```ts
import { Router } from "express";
import productRoutes from "./product.routes";

const router = Router();

router.use("/products", productRoutes);

export default router;
```

---

## **üìå Step 5: Set Up File Upload Utility**
üìÑ **`src/utils/fileUpload.ts`**
```ts
import multer from "multer";
import path from "path";

const storage = multer.diskStorage({
  destination: "public/uploads/",
  filename: (req, file, cb) => {
    cb(null, file.fieldname + "-" + Date.now() + path.extname(file.originalname));
  },
});

const upload = multer({ storage });

export default upload;
```

---

## **üìå Step 6: Configure Express App**
üìÑ **`src/app.ts`**
```ts
import express from "express";
import dotenv from "dotenv";
import path from "path";
import connectDB from "./config/db";
import routes from "./routes/index.routes";

dotenv.config();
connectDB();

const app = express();
app.set("view engine", "ejs");
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, "public")));

app.use("/", routes);

export default app;
```

üìÑ **`src/server.ts`**
```ts
import app from "./app";

const PORT = process.env.PORT || 5000;

app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));
```

---

### **üöÄ Run the Project**
```sh
npm run dev
```

Now, visit **`http://localhost:5000/products`** to view and manage products.

Would you like me to add authentication (JWT) 
or an admin panel?










### **üìå Step 1: Configuration Setup**  

To keep configurations organized, we'll set up a **`config/`** directory to handle database connections, environment variables, and logging.

---

### **üìÇ Folder Structure**
```
üìÇ src/
‚îÇ‚îÄ‚îÄ üìÇ config/
‚îÇ   ‚îú‚îÄ‚îÄ db.ts            # MongoDB Connection
‚îÇ   ‚îú‚îÄ‚îÄ env.ts           # Environment Variables
‚îÇ   ‚îú‚îÄ‚îÄ logger.ts        # Logger Setup
‚îÇ‚îÄ‚îÄ .env                 # Environment Variables File
```

---

## **1Ô∏è‚É£ Configure Environment Variables**  

üìÑ **`.env`**  
```env
PORT=5000
MONGO_URI=mongodb://localhost:27017/node-mongo-ts
JWT_SECRET=your_secret_key
NODE_ENV=development
```

---

## **2Ô∏è‚É£ Load Environment Variables**  

üìÑ **`src/config/env.ts`**  
```ts
import dotenv from "dotenv";
import path from "path";

dotenv.config({ path: path.resolve(__dirname, "../../.env") });

const config = {
  port: process.env.PORT || 5000,
  mongoURI: process.env.MONGO_URI || "mongodb://localhost:27017/default",
  jwtSecret: process.env.JWT_SECRET || "default_secret",
  nodeEnv: process.env.NODE_ENV || "development",
};

export default config;
```

---

## **3Ô∏è‚É£ Setup MongoDB Connection**  

üìÑ **`src/config/db.ts`**  
```ts
import mongoose from "mongoose";
import config from "./env";
import logger from "./logger";

const connectDB = async () => {
  try {
    await mongoose.connect(config.mongoURI);
    logger.info("‚úÖ MongoDB Connected");
  } catch (error) {
    logger.error("‚ùå MongoDB Connection Error:", error);
    process.exit(1);
  }
};

export default connectDB;
```

---

## **4Ô∏è‚É£ Configure Logger**  

üìÑ **`src/config/logger.ts`**  
```ts
import winston from "winston";

const logger = winston.createLogger({
  level: "info",
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} [${level.toUpperCase()}]: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: "logs/error.log", level: "error" }),
  ],
});

export default logger;
```

---

## **5Ô∏è‚É£ Integrate Configurations in `app.ts`**  

üìÑ **`src/app.ts`**  
```ts
import express from "express";
import path from "path";
import dotenv from "dotenv";
import connectDB from "./config/db";
import routes from "./routes/index.routes";
import logger from "./config/logger";
import config from "./config/env";

dotenv.config();
connectDB();

const app = express();
app.set("view engine", "ejs");
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, "public")));

// Log incoming requests
app.use((req, res, next) => {
  logger.info(`${req.method} ${req.url}`);
  next();
});

app.use("/", routes);

export default app;
```

---

## **6Ô∏è‚É£ Start the Server**  

üìÑ **`src/server.ts`**  
```ts
import app from "./app";
import config from "./config/env";
import logger from "./config/logger";

const PORT = config.port;

app.listen(PORT, () => logger.info(`üöÄ Server running on port ${PORT}`));
```

---

## **‚úÖ Summary**
- `.env` manages environment variables.
- `config/env.ts` loads and centralizes configurations.
- `config/db.ts` connects to MongoDB.
- `config/logger.ts` logs events/errors using **Winston**.
- `app.ts` integrates everything.

Now, you can start your project with:
```sh
npm run dev
```

Would you like **Docker support** or **Swagger API documentation** added next?
