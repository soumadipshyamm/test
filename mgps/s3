export const uploadImageToS3Service = async (key: string, thumbnailBuffer: Buffer) => {
	const keyName = `${key}/${Date.now()}photo.png`;
	// console.log(" bucketName, s3Client, s3Url", bucketName, s3Client, s3Url);

	const command = new PutObjectCommand({
		Bucket: bucketName,
		Key: keyName,
		Body: thumbnailBuffer,
		// ACL: "public-read" // Set the ACL as needed (e.g., public-read for public access)
	});

	console.log("command", command);

	try {
		const response = await s3Client.send(command);
		// console.log("response", response);
		// console.log("Image uploaded successfully:", s3Url, keyName);
		if (response) {

			return `${s3Url}/${keyName}`;
		}
		return null;
	} catch (err) {
		console.error(err);
	}
};



This XML file does not appear to have any style information associated with it. The document tree is shown below.
<Error>
<Code>AccessDenied</Code>
<Message>Access Denied</Message>
<RequestId>M5HRW4HYAWVCYP5P</RequestId>
<HostId>I4PowDOBKg3vo5M67xZ0GiBjwIK7HzwEK2NZpZ8di8hqfnqa/eU9/yA6CMeqU6o7mcUgqF7ccQ8=</HostId>
</Error>




// getPresignedUrlService.ts
import { GetObjectCommand } from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
import { s3Client } from "./s3Client";

const bucketName = "your-private-bucket";

export const getPresignedUrl = async (key: string) => {
  const command = new GetObjectCommand({
    Bucket: bucketName,
    Key: key,
  });

  try {
    const signedUrl = await getSignedUrl(s3Client, command, { expiresIn: 3600 }); // 1 hour
    return signedUrl;
  } catch (err) {
    console.error("Presign Error:", err);
    return null;
  }
};


Here‚Äôs how to **securely upload private images to S3 and generate a pre-signed URL** using **Node.js with AWS SDK v3** ‚Äî **without any public bucket policy**.

---

## ‚úÖ Step-by-Step Node.js Secure S3 Upload & Access (No Public Access)

---

### üì¶ 1. **Install Required Packages**

```bash
npm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner
```

---

### üîê 2. **Setup AWS S3 Client (`s3Client.ts`)**

```ts
// s3Client.ts
import { S3Client } from "@aws-sdk/client-s3";

export const s3Client = new S3Client({
  region: "your-region", // e.g., "ap-south-1"
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
  },
});
```

---

### üñºÔ∏è 3. **Upload Image to S3 (Private)**

```ts
// uploadImageService.ts
import { PutObjectCommand } from "@aws-sdk/client-s3";
import { s3Client } from "./s3Client";

const bucketName = "your-bucket-name";

export const uploadImageToS3Service = async (key: string, buffer: Buffer): Promise<string | null> => {
  const keyName = `${key}/${Date.now()}_photo.png`;

  const command = new PutObjectCommand({
    Bucket: bucketName,
    Key: keyName,
    Body: buffer,
    ContentType: "image/png" // or dynamic based on MIME
  });

  try {
    await s3Client.send(command);
    return keyName; // return key only, for private access
  } catch (err) {
    console.error("Upload failed:", err);
    return null;
  }
};
```

---

### üîó 4. **Generate Pre-Signed URL for Access**

```ts
// getPresignedUrl.ts
import { GetObjectCommand } from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
import { s3Client } from "./s3Client";

const bucketName = "your-bucket-name";

export const generatePresignedUrl = async (keyName: string): Promise<string | null> => {
  const command = new GetObjectCommand({
    Bucket: bucketName,
    Key: keyName
  });

  try {
    const signedUrl = await getSignedUrl(s3Client, command, { expiresIn: 3600 }); // 1 hour
    return signedUrl;
  } catch (err) {
    console.error("Failed to generate presigned URL:", err);
    return null;
  }
};
```

---

### üß™ 5. **Example Usage (API Route or Controller)**

```ts
// controller.ts
import fs from "fs";
import { uploadImageToS3Service } from "./uploadImageService";
import { generatePresignedUrl } from "./getPresignedUrl";

export const uploadAndGetUrl = async () => {
  const fileBuffer = fs.readFileSync("sample.png"); // or from req.file.buffer (Multer)

  const keyName = await uploadImageToS3Service("user-uploads", fileBuffer);
  if (!keyName) {
    return console.log("Upload failed");
  }

  const url = await generatePresignedUrl(keyName);
  console.log("Access your private file at:", url);
};
```

---

## üõ°Ô∏è Security Recap

* ‚úÖ Bucket is **100% private** ‚Äî no public access needed
* ‚úÖ Files are uploaded securely via SDK
* ‚úÖ Users access files via **signed URLs**
* ‚úÖ Works with APIs and file uploads (Multer etc.)

---

Let me know if you want to integrate with Multer for Express `req.file.buffer` or return URL in an API response.

