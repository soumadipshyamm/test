@extends('layouts.app', ['isSidebar' => true, 'isNavbar' => true, 'isFooter' => false])
@push('styles')
    <style>
        #map {
            height: 600px;
            width: 100%;
        }

        #search-box {
            width: 300px;
            margin-bottom: 10px;
        }

        #polygon-data {
            margin-top: 20px;
            width: 100%;
        }

        #status {
            margin-top: 10px;
            font-weight: bold;
        }
    </style>
@endpush

@section('content')
    <h2>Draw & Save Cab Service Area</h2>
    <h2>City Autocomplete + Polygon Drawing</h2>
    <input id="search-box" type="text" placeholder="Enter a city name" />
    <div id="map"></div>
    <textarea id="polygon-data" rows="5" readonly placeholder="Draw a polygon to see coordinates here..."></textarea>
    <div id="status"></div>
@endsection

@push('scripts')
    <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAVZ1qG4_OeMi2QisK6dwZYv7lsjMZF_BE&libraries=places,drawing&callback=initMap"
        async defer></script>

    <script>
        let map;
        let drawingManager;
        let selectedShape;
        let cityCircle;
        let currentPolygon;
        let markers = [];

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 6,
                center: {
                    lat: 22.5726,
                    lng: 88.3639
                }, // Default to Kolkata
                mapTypeId: "roadmap",
            });

            // City autocomplete setup
            const input = document.getElementById("search-box");
            const autocomplete = new google.maps.places.Autocomplete(input, {
                types: ["(cities)"],
            });
            autocomplete.bindTo("bounds", map);

            autocomplete.addListener("place_changed", function() {
                const place = autocomplete.getPlace();
                if (!place.geometry || !place.geometry.location) return;

                // Center map to city
                map.setCenter(place.geometry.location);
                map.setZoom(12);

                // Highlight the city location with a circle
                if (cityCircle) cityCircle.setMap(null);
                cityCircle = new google.maps.Circle({
                    center: place.geometry.location,
                    radius: 5000,
                    strokeColor: "#4285F4",
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: "#4285F4",
                    fillOpacity: 0.2,
                    map: map,
                });
            });

            // Drawing manager setup
            drawingManager = new google.maps.drawing.DrawingManager({
                drawingMode: google.maps.drawing.OverlayType.POLYGON,
                drawingControl: true,
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: ["polygon"],
                },
                polygonOptions: {
                    fillColor: "#FF0000",
                    fillOpacity: 0.35,
                    strokeWeight: 2,
                    clickable: true,
                    editable: true,
                    zIndex: 1,
                },
            });

            drawingManager.setMap(map);

            // When polygon completed
            google.maps.event.addListener(drawingManager, "overlaycomplete", function(event) {
                if (selectedShape) selectedShape.setMap(null); // remove old polygon

                selectedShape = event.overlay;
                selectedShape.type = event.type;
                currentPolygon = selectedShape.getPath();

                const coordinates = selectedShape.getPath().getArray().map(latlng => ({
                    lat: latlng.lat(),
                    lng: latlng.lng()
                }));

                document.getElementById("polygon-data").value = JSON.stringify(coordinates, null, 2);
            });

            // Add click listener to the map
            map.addListener("click", (e) => {
                if (!currentPolygon) {
                    alert("Please draw the service area polygon first.");
                    return;
                }

                // Clear previous markers
                markers.forEach(m => m.setMap(null));
                markers = [];

                const latLng = e.latLng;
                const marker = new google.maps.Marker({
                    position: latLng,
                    map: map,
                    title: "Cab Request Location",
                });
                markers.push(marker);

                const inside = google.maps.geometry.poly.containsLocation(latLng, currentPolygon);
                document.getElementById("status").innerText = inside
                    ? "Location is INSIDE the service area."
                    : "Location is OUTSIDE the service area.";
                document.getElementById("status").style.color = inside ? "green" : "red";
            });
        }

        function showMap(lat, lng) {
            const mapOptions = {
                center: { lat: lat, lng: lng },
                zoom: 12,
            };
            map = new google.maps.Map(document.getElementById('map'), mapOptions);
            new google.maps.Marker({
                position: { lat: lat, lng: lng },
                map: map,
                title: 'Selected Area'
            });
        }
    </script>
@endpush
