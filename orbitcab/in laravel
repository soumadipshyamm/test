@extends('layouts.app')

@section('content')
<div id="controls">
    <input id="city-input" type="text" placeholder="Enter city name" />
    <p><strong>Place ID:</strong></p>
    <textarea id="place-id-txt" rows="2" readonly style="width:100%; resize: none;"></textarea>
    
    <button onclick="savePolygon()">Save Polygon</button>
    <hr />
    <div id="polygon-info"></div>
</div>

<div id="map"></div>

<style>
    #map {
        height: 90vh;
        width: 100%;
    }

    #controls {
        position: absolute;
        top: 10px;
        left: 10px;
        background: white;
        z-index: 10;
        padding: 12px;
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        font-family: Arial, sans-serif;
        max-width: 300px;
        overflow-y: auto;
        max-height: 95vh;
    }

    #controls input,
    #controls button {
        width: 100%;
        margin-bottom: 8px;
        padding: 8px;
        font-size: 14px;
    }

    #controls button {
        background-color: #6200ee;
        color: white;
        border: none;
        border-radius: 4px;
        font-weight: bold;
        cursor: pointer;
    }

    #polygon-info {
        font-size: 12px;
        white-space: pre-wrap;
        word-wrap: break-word;
        max-height: 200px;
        overflow-y: auto;
    }
</style>

<script>
    let map, drawingManager, drawnPolygon = null, selectedPlace = null;

    function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 22.57, lng: 88.36 },
            zoom: 13,
        });

        const featureLayer = map.getFeatureLayer("LOCALITY");
        initAutocomplete(featureLayer);
        initDrawingManager();
    }

    function initAutocomplete(featureLayer) {
        const input = document.getElementById("city-input");
        const autocomplete = new google.maps.places.Autocomplete(input, {
            types: ["(cities)"],
            fields: ["place_id", "geometry", "name"],
        });

        autocomplete.bindTo("bounds", map);

        autocomplete.addListener("place_changed", () => {
            const place = autocomplete.getPlace();

            if (!place.place_id || !place.geometry) {
                alert("Please select a valid city from the suggestions.");
                return;
            }

            selectedPlace = place;
            document.getElementById("place-id-txt").value = place.place_id;

            map.setCenter(place.geometry.location);
            map.setZoom(14);

            const style = {
                strokeColor: "#810FCB",
                strokeOpacity: 1.0,
                strokeWeight: 2.0,
                fillColor: "#810FCB",
                fillOpacity: 0.4,
            };

            featureLayer.style = (params) => {
                return params.feature.placeId === place.place_id ? style : null;
            };
        });
    }

    function initDrawingManager() {
        drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: null,
            drawingControl: true,
            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
                drawingModes: ["polygon"],
            },
            polygonOptions: {
                fillColor: "#FF0000",
                fillOpacity: 0.4,
                strokeWeight: 2,
                clickable: true,
                editable: true,
                zIndex: 1,
            },
        });

        drawingManager.setMap(map);

        google.maps.event.addListener(drawingManager, "overlaycomplete", function (event) {
            if (drawnPolygon) {
                drawnPolygon.setMap(null);
            }

            if (event.type === "polygon") {
                drawnPolygon = event.overlay;
                drawingManager.setDrawingMode(null);
                showPolygonDetails(drawnPolygon);
            }
        });
    }

    function showPolygonDetails(polygon) {
        const path = polygon.getPath();
        const bounds = new google.maps.LatLngBounds();
        const coords = [];

        for (let i = 0; i < path.getLength(); i++) {
            const latLng = path.getAt(i);
            coords.push({ lat: latLng.lat(), lng: latLng.lng() });
            bounds.extend(latLng);
        }

        const area = google.maps.geometry.spherical.computeArea(path);
        const info = `
📏 Area: ${(area / 1000000).toFixed(4)} km²
🧭 Bounds:
  SW: ${bounds.getSouthWest().lat().toFixed(5)}, ${bounds.getSouthWest().lng().toFixed(5)}
  NE: ${bounds.getNorthEast().lat().toFixed(5)}, ${bounds.getNorthEast().lng().toFixed(5)}

🧾 Coordinates:
${JSON.stringify(coords, null, 2)}
`;

        drawnPolygon.polygonCoords = coords;
        document.getElementById("polygon-info").textContent = info;
    }

    function savePolygon() {
        if (!drawnPolygon || !selectedPlace) {
            alert("Please select a city and draw a polygon first.");
            return;
        }

        const postData = {
            place_id: selectedPlace.place_id,
            city_name: selectedPlace.name,
            coordinates: drawnPolygon.polygonCoords,
        };

        fetch("{{ route('admin.service-zones.store') }}", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
            },
            body: JSON.stringify(postData),
        })
        .then(response => response.json())
        .then(data => {
            alert("Polygon saved successfully.");
            console.log("Saved:", data);
        })
        .catch(error => {
            console.error("Error saving polygon:", error);
            alert("Failed to save polygon.");
        });
    }
</script>

<script
    src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places,drawing,geometry&callback=initMap"
    async defer></script>
@endsection





***********************************************************************************************************************************
***********************************************************************************************************************************
***********************************************************************************************************************************
***********************************************************************************************************************************


@extends('layouts.app', [
    'isSidebar' => true,
    'isNavbar' => true,
    'isFooter' => false,
])

@push('styles')
    <style>
        #map {
            height: 600px;
            width: 100%;
            margin-top: 20px;
        }

        #city {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
        }

        #geofence-form {
            margin-bottom: 20px;
        }

        #status {
            margin-top: 20px;
            font-weight: bold;
        }
    </style>
@endpush

@section('content')
    <h2>Dynamic Geofencing ({{ $cabZone->city->name }})</h2>
    <div class="d-flex align-items-center justify-content-between mb-3">
        <x-site.back />
    </div>

    <input type="hidden" id="city" value="{{ $cabZone->city->id }}">
    <input type="hidden" id="city-lat" value="{{ $cabZone->city->latitude }}">
    <input type="hidden" id="city-lng" value="{{ $cabZone->city->longitude }}">

    <div id="geofence-form" class="mb-3">
        <button id="start-drawing" type="button" class="btn btn-primary">
            <i class="fa-solid fa-pencil-alt"></i> Draw Geofence
        </button>
        <button id="save-geofence" type="button" class="btn btn-success" style="display:none;">
            <i class="fa-solid fa-save"></i> Save Geofence
        </button>
    </div>

    <div id="map" style="height: 400px; border: 1px solid #ccc;"></div>
    <div id="status" class="mt-3"></div>
@endsection

@push('scripts')
    <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAVZ1qG4_OeMi2QisK6dwZYv7lsjMZF_BE&libraries=drawing,geometry">
    </script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        let map, drawingManager, currentPolygon = null,
            markers = [],
            city = '',
            cityLatLng = null;
        let zonePolygons = [];

        document.addEventListener('DOMContentLoaded', function() {
            let citySel = document.getElementById('city');
            let cityId = citySel.value;
            city = cityId ? citySel.text : '';
            document.getElementById('start-drawing').disabled = !cityId;

            // Remove polygons from last city
            zonePolygons.forEach(p => p.setMap(null));
            zonePolygons = [];

            if (cityId) {
                // Center map to city
                let opt = cityId;
                let lat = parseFloat(document.getElementById('city-lat').value);
                let lng = parseFloat(document.getElementById('city-lng').value);
                // alert( lat + ' ' + lng);

                if (!map) {
                    initMap(lat, lng);
                } else {
                    map.setCenter({
                        lat: lat,
                        lng: lng
                    });
                    map.setZoom(12);
                }
                cityLatLng = {
                    lat: lat,
                    lng: lng
                };

                // Highlight existing zones for city
                axios.get('/ajax/service-zone/cities/zones/' + cityId).then(({
                    data
                }) => {
                    data.forEach(zone => {
                        if (!zone.coordinates) return;
                        let paths;
                        if (typeof zone.coordinates === "string") {
                            try {
                                paths = JSON.parse(zone.coordinates);
                            } catch (e) {
                                console.error("Invalid JSON in zone.coordinates", zone
                                    .coordinates);
                                return;
                            }
                        } else {
                            paths = zone.coordinates;
                        }

                        let polygon = new google.maps.Polygon({
                            paths: paths,
                            strokeColor: '#4285F4',
                            strokeOpacity: 0.8,
                            strokeWeight: 2,
                            fillColor: '#4285F4',
                            fillOpacity: 0.25,
                            map: map
                        });

                        // Highlight border on mouseover
                        google.maps.event.addListener(polygon, 'mouseover', function() {
                            this.setOptions({
                                strokeColor: '#FF0000', // Highlight color (red)
                                strokeWeight: 4,
                                fillOpacity: 0.35
                            });
                        });
                        // Reset border on mouseout
                        google.maps.event.addListener(polygon, 'mouseout', function() {
                            this.setOptions({
                                strokeColor: '#4285F4',
                                strokeWeight: 2,
                                fillOpacity: 0.25
                            });
                        });
                        // Click to select polygon (highlight green)
                        google.maps.event.addListener(polygon, 'click', function() {
                            zonePolygons.forEach(p => p.setOptions({
                                strokeColor: '#4285F4',
                                strokeWeight: 2,
                                fillOpacity: 0.25
                            }));
                            this.setOptions({
                                strokeColor: '#00C853',
                                strokeWeight: 4,
                                fillOpacity: 0.40
                            });
                        });

                        zonePolygons.push(polygon);
                    });
                });
            }
            // });
        });

        function initMap(lat, lng) {

            map = new google.maps.Map(document.getElementById('map'), {
                center: {
                    lat: lat,
                    lng: lng
                },
                zoom: 12,
                mapTypeId: 'roadmap'
            });

            map.addListener("click", (e) => {
                if (!currentPolygon) {
                    document.getElementById("status")
                        .innerText =
                        "Please draw the service area polygon first.";
                    document.getElementById("status").style
                        .color = "orange";
                    return;
                }
                markers.forEach(m => m.setMap(null));
                markers = [];
                let marker = new google.maps.Marker({
                    position: e.latLng,
                    map,
                    title: "Test Point"
                });
                markers.push(marker);
                let inside = google.maps.geometry.poly
                    .containsLocation(e.latLng, currentPolygon);
                document.getElementById("status").innerText =
                    inside ?
                    "Location is INSIDE the service area." :
                    "Location is OUTSIDE the service area.";
                document.getElementById("status").style.color =
                    inside ? "green" : "red";
            });
        }

        document.getElementById('start-drawing').addEventListener(
            'click',
            function() {
                if (currentPolygon) currentPolygon.setMap(null);
                drawingManager = new google.maps.drawing
                    .DrawingManager({
                        drawingMode: google.maps.drawing
                            .OverlayType.POLYGON,
                        drawingControl: true,
                        drawingControlOptions: {
                            position: google.maps
                                .ControlPosition.TOP_CENTER,
                            drawingModes: ['polygon'],
                        },
                        polygonOptions: {
                            fillColor: '#00FF00',
                            fillOpacity: 0.5,
                            strokeWeight: 2,
                            clickable: false,
                            editable: true,
                            zIndex: 2,
                        },
                    });
                drawingManager.setMap(map);
                google.maps.event.addListener(drawingManager,
                    'overlaycomplete',
                    function(event) {
                        if (currentPolygon) currentPolygon
                            .setMap(null);
                        currentPolygon = event.overlay;
                        drawingManager.setMap(null);
                        document.getElementById('save-geofence')
                            .style.display = 'block';
                    });
            });

        document.getElementById('save-geofence').addEventListener(
            'click',
            function() {
                // const areaName = prompt("Enter a name for this geofence:");
                alert('Saving geofence...');
                // let areaName = citySel.options[citySel.selectedIndex].text;

                if (currentPolygon) {
                    // alert('Saving geofence "' + areaName + '" to database...');
                    const coords = currentPolygon.getPath()
                        .getArray().map(coord => ({
                            lat: coord.lat(),
                            lng: coord.lng()
                        }));
                    let citySel = document.getElementById('city');
                    let cityId = citySel.value;
                    axios.post(
                        "{{ route('admin.service-zones.storePolygon') }}", {
                            // name: areaName,
                            services_id: "{{ $cityId }}",
                            city_id: cityId,
                            coordinates: coords
                        }).then(function(response) {
                        alert(
                            'Geofence saved to database!');
                        currentPolygon.setMap(null);
                        document.getElementById(
                                'save-geofence').style
                            .display = 'none';
                        // Optionally re-trigger city dropdown to reload highlighted zones
                        let citySelect = document
                            .getElementById('city');
                        let evt = new Event('change');
                        citySelect.dispatchEvent(evt);
                    }).catch(function(error) {
                        alert('Failed to save geofence.');
                    });
                } else {
                    alert(
                        "Please draw a polygon first or provide a valid name.");
                }
            });
    </script>
@endpush

{{--
let map;
//@ts-ignore
let featureLayer;

async function initMap() {
  // Request needed libraries.
  const { Map } = await google.maps.importLibrary("maps");

  map = new Map(document.getElementById("map"), {
    center: { lat: 20.773, lng: -156.01 }, // Hana, HI
    zoom: 12,
    // In the cloud console, configure this Map ID with a style that enables the
    // "Locality" feature layer.
    mapId: "a3efe1c035bad51b", // <YOUR_MAP_ID_HERE>,
  });
  //@ts-ignore
  featureLayer = map.getFeatureLayer("LOCALITY");

  // Define a style with purple fill and border.
  //@ts-ignore
  const featureStyleOptions = {
    strokeColor: "#810FCB",
    strokeOpacity: 1.0,
    strokeWeight: 3.0,
    fillColor: "#810FCB",
    fillOpacity: 0.5,
  };

  // Apply the style to a single boundary.
  //@ts-ignore
  featureLayer.style = (options) => {
    if (options.feature.placeId == "ChIJ0zQtYiWsVHkRk8lRoB1RNPo") {
      // Hana, HI
      return featureStyleOptions;
    }
  };
}

initMap(); --}}







Here’s how to **implement the cab geofencing feature in Laravel**, including:

---

## ✅ Features:

1. **Draw polygon (Geo-Fence) on map**
2. **Save polygon data to database**
3. **Check if a point (lat/lng) is inside any stored geofence**

---

## ✅ Step-by-Step Laravel Implementation

---

### 🧩 1. **Migration: `cab_zones` Table**

```bash
php artisan make:migration create_cab_zones_table
```

```php
// database/migrations/xxxx_xx_xx_create_cab_zones_table.php
public function up()
{
    Schema::create('cab_zones', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->json('coordinates'); // store polygon as JSON
        $table->timestamps();
    });
}
```

```bash
php artisan migrate
```

---

### 🧠 2. **Model: CabZone**

```php
// app/Models/CabZone.php
namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class CabZone extends Model
{
    protected $fillable = ['name', 'coordinates'];

    protected $casts = [
        'coordinates' => 'array',
    ];
}
```

---

### 🖼 3. **Blade View: Map + Polygon Drawing**

```blade
<!-- resources/views/cab-zones/create.blade.php -->
<!DOCTYPE html>
<html>
<head>
    <title>Define Cab Zone</title>
    <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=drawing"></script>
</head>
<body>
    <h2>Draw & Save Cab Service Area</h2>
    <form method="POST" action="{{ route('cab-zones.store') }}">
        @csrf
        <input type="text" name="name" placeholder="Zone Name" required><br><br>
        <input type="hidden" name="coordinates" id="coordinates">
        <div id="map" style="height:500px; width:100%;"></div><br>
        <button type="submit">Save Zone</button>
    </form>

    <script>
        let map;
        let drawingManager;
        let polygon;

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 22.5726, lng: 88.3639 },
                zoom: 12,
            });

            drawingManager = new google.maps.drawing.DrawingManager({
                drawingMode: google.maps.drawing.OverlayType.POLYGON,
                drawingControl: true,
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: ["polygon"],
                },
                polygonOptions: {
                    editable: true,
                },
            });

            drawingManager.setMap(map);

            google.maps.event.addListener(drawingManager, "overlaycomplete", function (event) {
                if (polygon) polygon.setMap(null);
                polygon = event.overlay;

                const coordinates = polygon.getPath().getArray().map(latlng => ({
                    lat: latlng.lat(),
                    lng: latlng.lng()
                }));

                document.getElementById("coordinates").value = JSON.stringify(coordinates);
            });
        }

        window.onload = initMap;
    </script>
</body>
</html>
```

---

### 📥 4. **Controller to Store Polygon**

```php
// app/Http/Controllers/CabZoneController.php
namespace App\Http\Controllers;

use App\Models\CabZone;
use Illuminate\Http\Request;

class CabZoneController extends Controller
{
    public function create()
    {
        return view('cab-zones.create');
    }

    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string',
            'coordinates' => 'required|json',
        ]);

        CabZone::create([
            'name' => $request->name,
            'coordinates' => $request->coordinates,
        ]);

        return redirect()->route('cab-zones.create')->with('success', 'Zone saved!');
    }
}
```

---

### 📍 5. **Check Point Inside Polygon (Backend)**

Install [vincenty/polygon](https://github.com/vincenty/polygon) or create a simple helper function.

#### ✅ Create Helper:

```php
// app/Helpers/GeoHelper.php
namespace App\Helpers;

class GeoHelper
{
    public static function pointInPolygon($point, $polygon)
    {
        $x = $point['lng'];
        $y = $point['lat'];

        $inside = false;
        $n = count($polygon);
        for ($i = 0, $j = $n - 1; $i < $n; $j = $i++) {
            $xi = $polygon[$i]['lng']; $yi = $polygon[$i]['lat'];
            $xj = $polygon[$j]['lng']; $yj = $polygon[$j]['lat'];

            $intersect = (($yi > $y) != ($yj > $y)) &&
                         ($x < ($xj - $xi) * ($y - $yi) / ($yj - $yi + 0.0000001) + $xi);
            if ($intersect) $inside = !$inside;
        }

        return $inside;
    }
}
```

#### ✅ Usage Example:

```php
use App\Models\CabZone;
use App\Helpers\GeoHelper;

public function checkLocation(Request $request)
{
    $point = ['lat' => $request->lat, 'lng' => $request->lng];

    foreach (CabZone::all() as $zone) {
        if (GeoHelper::pointInPolygon($point, $zone->coordinates)) {
            return response()->json(['zone' => $zone->name, 'status' => 'inside']);
        }
    }

    return response()->json(['zone' => null, 'status' => 'outside']);
}
```

---

### 📡 6. **Routes**

```php
Route::get('/cab-zones/create', [CabZoneController::class, 'create'])->name('cab-zones.create');
Route::post('/cab-zones/store', [CabZoneController::class, 'store'])->name('cab-zones.store');
Route::post('/cab-zones/check', [CabZoneController::class, 'checkLocation']);
```

---

## ✅ Result:

* You can **draw and save** geofence polygons.
* Later, check any coordinates against them to see if **inside/outside** the area.

---

Would you like me to build this into a Laravel Livewire or Vue component?
