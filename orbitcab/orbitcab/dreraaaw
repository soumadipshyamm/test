



You're seeing **critical errors** because your Google Maps setup is **not using a vector map style with the required Feature Layer (`LOCALITY`) enabled**.

Let‚Äôs break it down and solve it step-by-step.

---

## ‚ùå Errors You're Seeing Explained

| Error Message                                         | Root Cause                                                      |
| ----------------------------------------------------- | --------------------------------------------------------------- |
| `The map is not a vector map`                         | You're using a default raster (non-vector) map.                 |
| `FeatureLayer LOCALITY is not configured`             | Your map style does not include the **Locality** feature layer. |
| `No FeatureLayers configured for data-driven styling` | Your custom map style is missing Feature Layer support.         |

---

## ‚úÖ Solution: Use a Properly Configured Vector Map ID

You **must create and use a custom vector map style** with **Feature Layers enabled**, especially `LOCALITY`.

---

### üîß Step-by-Step: Create a Working Vector Map ID with Feature Layers

1. Go to the [Google Cloud Map Style Editor](https://console.cloud.google.com/maps/styler)
2. Click **"Create Map Style"**
3. Select **Vector Map**
4. Choose **"Administrative Boundaries"** ‚Üí ‚úÖ Enable:

   * **`Locality`** (for cities)
   * You can optionally enable `Country`, `Province`, `District`, or `Postal Code` too
5. Click **Next**, then **Save**
6. Copy the **Map ID** shown

---

### ‚úÖ Example Output You Need:

This must replace this line in your HTML code:

```js
mapId: "YOUR_VECTOR_MAP_ID", // ‚Üê replace this with actual working Map ID
```

If you're using the default map (no custom style), this WILL NOT work.

---

## üîç Quick Checklist for Success

| ‚úÖ Item                           | Required? | Notes                                                |
| -------------------------------- | --------- | ---------------------------------------------------- |
| Google Maps JavaScript API key   | ‚úÖ         | Must have **Maps JS API** and **Places API** enabled |
| Map is **Vector type**           | ‚úÖ         | Raster maps can't use `FeatureLayer.style()`         |
| Feature Layer `LOCALITY` enabled | ‚úÖ         | Must be explicitly enabled in Map Style editor       |
| Using custom `mapId`             | ‚úÖ         | Passed into `map` options as `mapId: "..."`          |
| Libraries param in script tag    | ‚úÖ         | Must include `libraries=places` and `loading=async`  |

---

## ‚úÖ Confirm with This Final Setup:

```html
<script
  src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places&callback=initMap&loading=async"
  async
  defer
></script>
```

Then in your `initMap()`:

```js
map = new google.maps.Map(document.getElementById("map"), {
  center: { lat: 22.5726, lng: 88.3639 },
  zoom: 12,
  mapId: "YOUR_VECTOR_MAP_ID", // ‚úÖ Replace this with actual working ID
});
```

---

### üß™ Still not working?

Run this in the browser DevTools console:

```js
console.log(map.mapId);
console.log(map.getMapCapabilities().isVector);
```

* `isVector` must return `true`
* If it‚Äôs `false`, you're **not using a vector map**, which is why the boundary highlight fails

---

Would you like me to:

* Generate the map style and share the exact setup instructions?
* Help debug your specific map ID?
* Show how to check if your style has `LOCALITY` enabled?

Just let me know.

























@extends('layouts.app', [
    'isSidebar' => true,
    'isNavbar' => true,
    'isFooter' => false,
])

@push('styles')
    <style>
        #map {
            height: 600px;
            width: 100%;
            margin-top: 20px;
        }

        #city {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
        }

        #geofence-form {
            margin-bottom: 20px;
        }

        #status {
            margin-top: 20px;
            font-weight: bold;
        }
    </style>
@endpush

@section('content')
    <h2>Dynamic Geofencing ({{ $cabZone->city->name }})</h2>
    <div class="d-flex align-content-center flex-wrap gap-3">
        <x-site.back />
    </div>
    <input type="hidden" id="city" value="{{ $cabZone->city->id }}">
    <input type="hidden" id="city-lat" value="{{ $cabZone->city->latitude }}">
    <input type="hidden" id="city-lng" value="{{ $cabZone->city->longitude }}">
    {{-- <select id="city" class="form-control" required>
        <option value="">Select City</option>
    </select> --}}
    <div id="geofence-form">
        <button id="start-drawing" type="button">Draw Geofence</button>
        <button id="save-geofence" type="button" style="display:none;">Save Geofence</button>
    </div>
    <div id="map"></div>
    <div id="status"></div>
@endsection

@push('scripts')
    <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAVZ1qG4_OeMi2QisK6dwZYv7lsjMZF_BE&libraries=drawing,geometry">
    </script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        let map, drawingManager, currentPolygon = null,
            markers = [],
            city = '',
            cityLatLng = null;
        let zonePolygons = [];

        document.addEventListener('DOMContentLoaded', function() {
            let citySel = document.getElementById('city');
            let cityId = citySel.value;
            city = cityId ? citySel.text : '';
            document.getElementById('start-drawing').disabled = !cityId;

            // Remove polygons from last city
            zonePolygons.forEach(p => p.setMap(null));
            zonePolygons = [];

            if (cityId) {
                // Center map to city
                let opt = cityId;
                let lat = parseFloat(document.getElementById('city-lat').value);
                let lng = parseFloat(document.getElementById('city-lng').value);
                    alert( lat + ' ' + lng);

                if (!map) {
                    initMap(lat, lng);
                } else {
                    map.setCenter({
                        lat: lat,
                        lng: lng
                    });
                    map.setZoom(12);
                }
                cityLatLng = {
                    lat: lat,
                    lng: lng
                };

                // Highlight existing zones for city
                axios.get('/ajax/service-zone/cities/zones/' + cityId).then(({
                    data
                }) => {
                    data.forEach(zone => {
                        if (!zone.coordinates) return;
                        let paths;
                        if (typeof zone.coordinates === "string") {
                            try {
                                paths = JSON.parse(zone.coordinates);
                            } catch (e) {
                                console.error("Invalid JSON in zone.coordinates", zone
                                    .coordinates);
                                return;
                            }
                        } else {
                            paths = zone.coordinates;
                        }

                        let polygon = new google.maps.Polygon({
                            paths: paths,
                            strokeColor: '#4285F4',
                            strokeOpacity: 0.8,
                            strokeWeight: 2,
                            fillColor: '#4285F4',
                            fillOpacity: 0.25,
                            map: map
                        });

                        // Highlight border on mouseover
                        google.maps.event.addListener(polygon, 'mouseover', function() {
                            this.setOptions({
                                strokeColor: '#FF0000', // Highlight color (red)
                                strokeWeight: 4,
                                fillOpacity: 0.35
                            });
                        });
                        // Reset border on mouseout
                        google.maps.event.addListener(polygon, 'mouseout', function() {
                            this.setOptions({
                                strokeColor: '#4285F4',
                                strokeWeight: 2,
                                fillOpacity: 0.25
                            });
                        });
                        // Click to select polygon (highlight green)
                        google.maps.event.addListener(polygon, 'click', function() {
                            zonePolygons.forEach(p => p.setOptions({
                                strokeColor: '#4285F4',
                                strokeWeight: 2,
                                fillOpacity: 0.25
                            }));
                            this.setOptions({
                                strokeColor: '#00C853',
                                strokeWeight: 4,
                                fillOpacity: 0.40
                            });
                        });

                        zonePolygons.push(polygon);
                    });
                });
            }
            // });
        });

        function initMap(lat , lng ) {

            map = new google.maps.Map(document.getElementById('map'), {
                center: {
                    lat: lat,
                    lng: lng
                },
                zoom: 12,
                mapTypeId: 'roadmap'
            });

            map.addListener("click", (e) => {
                if (!currentPolygon) {
                    document.getElementById("status")
                        .innerText =
                        "Please draw the service area polygon first.";
                    document.getElementById("status").style
                        .color = "orange";
                    return;
                }
                markers.forEach(m => m.setMap(null));
                markers = [];
                let marker = new google.maps.Marker({
                    position: e.latLng,
                    map,
                    title: "Test Point"
                });
                markers.push(marker);
                let inside = google.maps.geometry.poly
                    .containsLocation(e.latLng, currentPolygon);
                document.getElementById("status").innerText =
                    inside ?
                    "Location is INSIDE the service area." :
                    "Location is OUTSIDE the service area.";
                document.getElementById("status").style.color =
                    inside ? "green" : "red";
            });
        }

        document.getElementById('start-drawing').addEventListener(
            'click',
            function() {
                if (currentPolygon) currentPolygon.setMap(null);
                drawingManager = new google.maps.drawing
                    .DrawingManager({
                        drawingMode: google.maps.drawing
                            .OverlayType.POLYGON,
                        drawingControl: true,
                        drawingControlOptions: {
                            position: google.maps
                                .ControlPosition.TOP_CENTER,
                            drawingModes: ['polygon'],
                        },
                        polygonOptions: {
                            fillColor: '#00FF00',
                            fillOpacity: 0.5,
                            strokeWeight: 2,
                            clickable: false,
                            editable: true,
                            zIndex: 2,
                        },
                    });
                drawingManager.setMap(map);
                google.maps.event.addListener(drawingManager,
                    'overlaycomplete',
                    function(event) {
                        if (currentPolygon) currentPolygon
                            .setMap(null);
                        currentPolygon = event.overlay;
                        drawingManager.setMap(null);
                        document.getElementById('save-geofence')
                            .style.display = 'block';
                    });
            });

        document.getElementById('save-geofence').addEventListener(
            'click',
            function() {
                // const areaName = prompt("Enter a name for this geofence:");
                alert('Saving geofence...');
                // let areaName = citySel.options[citySel.selectedIndex].text;

                if (currentPolygon) {
                    // alert('Saving geofence "' + areaName + '" to database...');
                    const coords = currentPolygon.getPath()
                        .getArray().map(coord => ({
                            lat: coord.lat(),
                            lng: coord.lng()
                        }));
                    let citySel = document.getElementById('city');
                    let cityId = citySel.value;
                    axios.post(
                        "{{ route('admin.service-zones.storePolygon') }}", {
                            // name: areaName,
                            services_id: "{{ $cityId }}",
                            city_id: cityId,
                            coordinates: coords
                        }).then(function(response) {
                        alert(
                            'Geofence saved to database!');
                        currentPolygon.setMap(null);
                        document.getElementById(
                                'save-geofence').style
                            .display = 'none';
                        // Optionally re-trigger city dropdown to reload highlighted zones
                        let citySelect = document
                            .getElementById('city');
                        let evt = new Event('change');
                        citySelect.dispatchEvent(evt);
                    }).catch(function(error) {
                        alert('Failed to save geofence.');
                    });
                } else {
                    alert(
                        "Please draw a polygon first or provide a valid name.");
                }
            });
    </script>
@endpush

{{--
let map;
//@ts-ignore
let featureLayer;

async function initMap() {
  // Request needed libraries.
  const { Map } = await google.maps.importLibrary("maps");

  map = new Map(document.getElementById("map"), {
    center: { lat: 20.773, lng: -156.01 }, // Hana, HI
    zoom: 12,
    // In the cloud console, configure this Map ID with a style that enables the
    // "Locality" feature layer.
    mapId: "a3efe1c035bad51b", // <YOUR_MAP_ID_HERE>,
  });
  //@ts-ignore
  featureLayer = map.getFeatureLayer("LOCALITY");

  // Define a style with purple fill and border.
  //@ts-ignore
  const featureStyleOptions = {
    strokeColor: "#810FCB",
    strokeOpacity: 1.0,
    strokeWeight: 3.0,
    fillColor: "#810FCB",
    fillOpacity: 0.5,
  };

  // Apply the style to a single boundary.
  //@ts-ignore
  featureLayer.style = (options) => {
    if (options.feature.placeId == "ChIJ0zQtYiWsVHkRk8lRoB1RNPo") {
      // Hana, HI
      return featureStyleOptions;
    }
  };
}

initMap(); --}}




















@extends('layouts.app', ['isSidebar' => true, 'isNavbar' => true, 'isFooter' => false])

@section('content')
    <div class="container">
        <h2>Create Service Zone</h2>
        <div class="d-flex align-content-center flex-wrap gap-3">
            <x-site.back />
        </div>

        <form method="POST" action="{{ route('admin.service-zones.store') }}">
            @csrf
            <div class="form-group">
                <label for="country">Country</label>
                <select id="country" name="country_id" class="form-control" required>
                    <option value="">Select Country</option>
                </select>
            </div>

            <div class="form-group">
                <label for="state">State</label>
                <select id="state" name="state_id" class="form-control" required>
                    <option value="">Select State</option>
                </select>
            </div>

            <div class="form-group">
                <label for="city">City</label>
                <select id="city" name="city_id" class="form-control" required>
                    <option value="">Select City</option>
                </select>
            </div>

            <div class="form-group">
                <label>Draw Service Area</label>
                <div id="map" style="height: 400px; border: 1px solid #ccc;"></div>
                <small class="form-text text-muted">Draw polygon to define service area. It will auto-save.</small>
            </div>

            <button type="submit" class="btn btn-primary">Create Zone</button>
        </form>
    </div>
@endsection

@push('scripts')
    {{-- Google Maps + Axios --}}
    <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAPS_API_KEY&libraries=drawing"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script>
        let map, drawingManager, selectedPolygon = null;

        document.addEventListener('DOMContentLoaded', function () {
            const baseUrl = "{{ url('/') }}";
            axios.defaults.baseURL = baseUrl;

            // Load countries
            axios.get('/ajax/countries').then(res => {
                let countrySelect = document.getElementById('country');
                res.data.forEach(country => {
                    countrySelect.innerHTML += `<option value="${country.id}">${country.name}</option>`;
                });
            });

            // States based on country
            document.getElementById('country').addEventListener('change', function () {
                let countryId = this.value;
                document.getElementById('state').innerHTML = '<option value="">Select State</option>';
                document.getElementById('city').innerHTML = '<option value="">Select City</option>';
                if (!countryId) return;

                axios.get(`/ajax/states/${countryId}`).then(res => {
                    res.data.forEach(state => {
                        document.getElementById('state').innerHTML += `<option value="${state.id}">${state.name}</option>`;
                    });
                });
            });

            // Cities based on state
            document.getElementById('state').addEventListener('change', function () {
                let stateId = this.value;
                document.getElementById('city').innerHTML = '<option value="">Select City</option>';
                if (!stateId) return;

                axios.get(`/ajax/cities/${stateId}`).then(res => {
                    res.data.forEach(city => {
                        document.getElementById('city').innerHTML += `<option value="${city.id}">${city.name}</option>`;
                    });
                });
            });

            // Init map
            initMap();
        });

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 22.5726, lng: 88.3639 },
                zoom: 12,
            });

            drawingManager = new google.maps.drawing.DrawingManager({
                drawingMode: google.maps.drawing.OverlayType.POLYGON,
                drawingControl: true,
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: ["polygon"]
                },
                polygonOptions: {
                    editable: true,
                    fillColor: '#007bff',
                    fillOpacity: 0.2,
                    strokeWeight: 2,
                    clickable: false,
                    draggable: false
                }
            });

            drawingManager.setMap(map);

            // On draw complete
            google.maps.event.addListener(drawingManager, 'overlaycomplete', function (event) {
                if (selectedPolygon) {
                    selectedPolygon.setMap(null);
                }

                selectedPolygon = event.overlay;
                const path = selectedPolygon.getPath();
                const coordinates = [];

                for (let i = 0; i < path.getLength(); i++) {
                    const latLng = path.getAt(i);
                    coordinates.push({ lat: latLng.lat(), lng: latLng.lng() });
                }

                const cityId = document.getElementById('city').value;
                if (!cityId) {
                    alert("Select a city first.");
                    selectedPolygon.setMap(null);
                    return;
                }

                // Save polygon via AJAX
                axios.post("{{ route('admin.service-zones.savePolygon') }}", {
                    city_id: cityId,
                    coordinates: coordinates
                })
                .then(res => {
                    console.log("Polygon saved:", res.data);
                })
                .catch(err => {
                    console.error("Save failed:", err.response?.data || err.message);
                });
            });
        }
    </script>
@endpush
***********************************************************************************************


@extends('layouts.app', ['isSidebar' => true, 'isNavbar' => true, 'isFooter' => false])

@section('content')
    <div class="container">
        <h2>Create Service Zone</h2>

        {{-- Back Button --}}
        <div class="d-flex align-content-center flex-wrap gap-3">
            <x-site.back />
        </div>

        {{-- Zone Creation Form --}}
        <form method="POST" action="{{ route('admin.service-zones.store') }}">
            @csrf

            {{-- Country Dropdown --}}
            <div class="form-group">
                <label for="country">Country</label>
                <select id="country" name="country_id" class="form-control" required>
                    <option value="">Select Country</option>
                </select>
            </div>

            {{-- State Dropdown --}}
            <div class="form-group">
                <label for="state">State</label>
                <select id="state" name="state_id" class="form-control" required>
                    <option value="">Select State</option>
                </select>
            </div>

            {{-- City Dropdown --}}
            <div class="form-group">
                <label for="city">City</label>
                <select id="city" name="city_id" class="form-control" required>
                    <option value="">Select City</option>
                </select>
            </div>

            {{-- Google Maps Area for Polygon Drawing --}}
            <div class="form-group">
                <label>Draw Service Area on Map</label>
                <div id="map" style="height: 400px; border: 1px solid #ccc;"></div>
                <small class="form-text text-muted">After selecting a city, draw the polygon. It auto-saves without a popup.</small>
            </div>

            <button type="submit" class="btn btn-primary">Create Zone</button>
        </form>
    </div>
@endsection

@push('scripts')
    {{-- Google Maps Drawing Library & Axios --}}
    <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAPS_API_KEY&libraries=drawing"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script>
        let map, drawingManager, selectedPolygon = null;

        document.addEventListener('DOMContentLoaded', function () {
            const baseUrl = "{{ url('/') }}";
            axios.defaults.baseURL = baseUrl;

            /** Step 1: Populate Country Dropdown **/
            axios.get('/ajax/countries').then(response => {
                const countrySelect = document.getElementById('country');
                response.data.forEach(country => {
                    countrySelect.innerHTML += `<option value="${country.id}">${country.name}</option>`;
                });
            });

            /** Step 2: Populate States on Country Change **/
            document.getElementById('country').addEventListener('change', function () {
                const countryId = this.value;
                resetDropdowns(['state', 'city']);
                if (!countryId) return;

                axios.get(`/ajax/states/${countryId}`).then(response => {
                    response.data.forEach(state => {
                        document.getElementById('state').innerHTML += `<option value="${state.id}">${state.name}</option>`;
                    });
                });
            });

            /** Step 3: Populate Cities on State Change **/
            document.getElementById('state').addEventListener('change', function () {
                const stateId = this.value;
                resetDropdowns(['city']);
                if (!stateId) return;

                axios.get(`/ajax/cities/${stateId}`).then(response => {
                    response.data.forEach(city => {
                        document.getElementById('city').innerHTML += `<option value="${city.id}">${city.name}</option>`;
                    });
                });
            });

            /** Step 4: Initialize Google Map with Drawing Tools **/
            initMap();
        });

        function resetDropdowns(ids) {
            ids.forEach(id => {
                document.getElementById(id).innerHTML = `<option value="">Select ${capitalize(id)}</option>`;
            });
        }

        function capitalize(str) {
            return str.charAt(0).toUpperCase() + str.slice(1);
        }

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 22.5726, lng: 88.3639 }, // Default to Kolkata
                zoom: 12,
            });

            drawingManager = new google.maps.drawing.DrawingManager({
                drawingMode: google.maps.drawing.OverlayType.POLYGON,
                drawingControl: true,
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: ["polygon"]
                },
                polygonOptions: {
                    editable: true,
                    fillColor: '#007bff',
                    fillOpacity: 0.2,
                    strokeWeight: 2,
                    draggable: false
                }
            });

            drawingManager.setMap(map);

            /** Auto-Save Polygon When Drawn **/
            google.maps.event.addListener(drawingManager, 'overlaycomplete', function (event) {
                if (selectedPolygon) selectedPolygon.setMap(null); // Remove old

                selectedPolygon = event.overlay;
                const path = selectedPolygon.getPath();
                const coordinates = [];

                for (let i = 0; i < path.getLength(); i++) {
                    const latLng = path.getAt(i);
                    coordinates.push({ lat: latLng.lat(), lng: latLng.lng() });
                }

                const cityId = document.getElementById('city').value;
                if (!cityId) {
                    alert("Please select a city before drawing.");
                    selectedPolygon.setMap(null);
                    return;
                }

                // Send polygon to backend without popup
                axios.post("{{ route('admin.service-zones.savePolygon') }}", {
                    city_id: cityId,
                    coordinates: coordinates
                })
                .then(res => {
                    console.log("Polygon saved successfully", res.data);
                })
                .catch(err => {
                    console.error("Polygon save failed", err);
                });
            });
        }
    </script>
@endpush



public function savePolygon(Request $request)
{
    $request->validate([
        'city_id' => 'required|exists:cities,id',
        'coordinates' => 'required|array',
    ]);

    $zone = CabZone::updateOrCreate(
        ['city_id' => $request->city_id],
        ['polygon_coordinates' => json_encode($request->coordinates)]
    );

    return response()->json([
        'message' => 'Polygon saved successfully',
        'zone' => $zone
    ]);
}

