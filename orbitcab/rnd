<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>City Autocomplete with Polygon Drawing</title>
    <style>
        #map {
            height: 600px;
            width: 100%;
        }

        #search-box {
            width: 300px;
            margin-bottom: 10px;
        }

        #polygon-data {
            margin-top: 20px;
            width: 100%;
        }
    </style>
</head>

<body>
    <h2>City Autocomplete + Polygon Drawing</h2>
    <input id="search-box" type="text" placeholder="Enter a city name" />
    <div id="map"></div>
    <textarea id="polygon-data" rows="5" readonly placeholder="Draw a polygon to see coordinates here..."></textarea>

    <script
        src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places,drawing&callback=initMap"
        async defer></script>

    <script>
        let map;
        let drawingManager;
        let selectedShape;
        let cityCircle;

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 6,
                center: { lat: 22.5726, lng: 88.3639 }, // Default to Kolkata
                mapTypeId: "roadmap",
            });

            // City autocomplete setup
            const input = document.getElementById("search-box");
            const autocomplete = new google.maps.places.Autocomplete(input, {
                types: ["(cities)"],
            });
            autocomplete.bindTo("bounds", map);

            autocomplete.addListener("place_changed", function () {
                const place = autocomplete.getPlace();
                if (!place.geometry || !place.geometry.location) return;

                // Center map to city
                map.setCenter(place.geometry.location);
                map.setZoom(12);

                // Highlight the city location with a circle
                if (cityCircle) cityCircle.setMap(null);
                cityCircle = new google.maps.Circle({
                    center: place.geometry.location,
                    radius: 5000,
                    strokeColor: "#4285F4",
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: "#4285F4",
                    fillOpacity: 0.2,
                    map: map,
                });
            });

            // Drawing manager setup
            drawingManager = new google.maps.drawing.DrawingManager({
                drawingMode: google.maps.drawing.OverlayType.POLYGON,
                drawingControl: true,
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: ["polygon"],
                },
                polygonOptions: {
                    fillColor: "#FF0000",
                    fillOpacity: 0.35,
                    strokeWeight: 2,
                    clickable: true,
                    editable: true,
                    zIndex: 1,
                },
            });

            drawingManager.setMap(map);

            // When polygon completed
            google.maps.event.addListener(drawingManager, "overlaycomplete", function (event) {
                if (selectedShape) selectedShape.setMap(null); // remove old polygon

                selectedShape = event.overlay;
                selectedShape.type = event.type;

                const coordinates = selectedShape.getPath().getArray().map(latlng => ({
                    lat: latlng.lat(),
                    lng: latlng.lng()
                }));

                document.getElementById("polygon-data").value = JSON.stringify(coordinates, null, 2);
            });
        }
    </script>
</body>

</html>









<!DOCTYPE html>
<html>
<head>
  <title>Advanced City Search with Highlights & Polygon Drawing</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="initial-scale=1.0, width=device-width" />
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
    }
    #search-container {
      position: absolute;
      top: 10px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 5;
      background: white;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.3);
    }
    #search-box {
      width: 300px;
      padding: 8px;
    }
    #map {
      height: 100vh;
      width: 100%;
    }
    #coordinates {
      position: absolute;
      bottom: 10px;
      left: 10px;
      width: 350px;
      height: 120px;
      z-index: 5;
      background: #fff;
      padding: 10px;
      font-size: 12px;
      border: 1px solid #ccc;
      border-radius: 8px;
      overflow-y: auto;
    }
  </style>
</head>
<body>
  <div id="search-container">
    <input id="search-box" type="text" placeholder="Search city, locality, or place..." />
  </div>
  <div id="map"></div>
  <div id="coordinates" placeholder="Polygon coordinates...">Draw a polygon to see coordinates.</div>

  <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places,drawing,geometry" defer></script>
  <script>
    let map;
    let marker = null;
    let cityCircle = null;
    let polygon = null;

    function initMap() {
      const defaultCenter = { lat: 22.5726, lng: 88.3639 }; // Kolkata

      map = new google.maps.Map(document.getElementById("map"), {
        center: defaultCenter,
        zoom: 6,
      });

      const input = document.getElementById("search-box");
      const autocomplete = new google.maps.places.Autocomplete(input, {
        types: ["(regions)", "(cities)", "geocode"],
      });
      autocomplete.bindTo("bounds", map);

      autocomplete.addListener("place_changed", () => {
        const place = autocomplete.getPlace();
        if (!place.geometry || !place.geometry.location) {
          alert("No details available for: '" + place.name + "'");
          return;
        }

        const location = place.geometry.location;

        // Move map to location
        map.setCenter(location);
        map.setZoom(13);

        // Clear previous marker/circle
        if (marker) marker.setMap(null);
        if (cityCircle) cityCircle.setMap(null);

        // Add marker
        marker = new google.maps.Marker({
          map: map,
          position: location,
        });

        // Add highlight circle
        cityCircle = new google.maps.Circle({
          strokeColor: "#0088ff",
          strokeOpacity: 0.6,
          strokeWeight: 2,
          fillColor: "#0088ff",
          fillOpacity: 0.2,
          map,
          center: location,
          radius: 5000,
        });
      });

      initDrawingTool();
    }

    function initDrawingTool() {
      const drawingManager = new google.maps.drawing.DrawingManager({
        drawingMode: null,
        drawingControl: true,
        drawingControlOptions: {
          position: google.maps.ControlPosition.TOP_CENTER,
          drawingModes: ["polygon"],
        },
        polygonOptions: {
          fillColor: "#FF0000",
          fillOpacity: 0.4,
          strokeWeight: 2,
          clickable: true,
          editable: true,
          zIndex: 1,
        },
      });

      drawingManager.setMap(map);

      google.maps.event.addListener(drawingManager, "overlaycomplete", function (event) {
        if (polygon) polygon.setMap(null); // remove previous

        polygon = event.overlay;

        // Show coordinates
        updateCoordinates(polygon.getPath());

        // Update on edit
        google.maps.event.addListener(polygon.getPath(), "set_at", () =>
          updateCoordinates(polygon.getPath())
        );
        google.maps.event.addListener(polygon.getPath(), "insert_at", () =>
          updateCoordinates(polygon.getPath())
        );
      });
    }

    function updateCoordinates(path) {
      const coords = [];
      for (let i = 0; i < path.getLength(); i++) {
        const latLng = path.getAt(i);
        coords.push({ lat: latLng.lat(), lng: latLng.lng() });
      }

      document.getElementById("coordinates").innerText = JSON.stringify(coords, null, 2);
    }

    window.initMap = initMap;
  </script>
</body>
</html>














<!DOCTYPE html>
<html>
<head>
  <title>Advanced City Search & Highlight with Polygon</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="initial-scale=1.0, width=device-width" />
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
    }
    #search-container {
      padding: 10px;
      background-color: #f8f8f8;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    #search-box {
      width: 300px;
      padding: 8px;
      font-size: 16px;
    }
    #map {
      height: 600px;
      width: 100%;
    }
    #coordinates {
      width: 100%;
      height: 100px;
      padding: 10px;
      font-size: 14px;
    }
    button {
      padding: 8px 12px;
      font-size: 14px;
      margin-left: 10px;
    }
  </style>
</head>
<body>
  <div id="search-container">
    <input id="search-box" type="text" placeholder="Search a city..." />
    <button onclick="clearPolygon()">Clear Polygon</button>
  </div>
  <div id="map"></div>
  <textarea id="coordinates" placeholder="Polygon coordinates will appear here..."></textarea>

  <script
    src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places,drawing&callback=initMap"
    async
    defer
  ></script>

  <script>
    let map;
    let drawingManager;
    let cityMarker = null;
    let cityCircle = null;
    let polygon = null;

    function initMap() {
      const defaultLocation = { lat: 20.5937, lng: 78.9629 }; // India

      map = new google.maps.Map(document.getElementById("map"), {
        center: defaultLocation,
        zoom: 5,
      });

      const input = document.getElementById("search-box");
      const autocomplete = new google.maps.places.Autocomplete(input, {
        types: ["(cities)"],
      });
      autocomplete.bindTo("bounds", map);

      autocomplete.addListener("place_changed", () => {
        const place = autocomplete.getPlace();

        if (!place.geometry || !place.geometry.location) {
          alert("No details available for input: '" + place.name + "'");
          return;
        }

        map.panTo(place.geometry.location);
        map.setZoom(12);

        if (cityMarker) cityMarker.setMap(null);
        cityMarker = new google.maps.Marker({
          map,
          position: place.geometry.location,
          title: place.name,
        });

        if (cityCircle) cityCircle.setMap(null);
        cityCircle = new google.maps.Circle({
          strokeColor: "#4285F4",
          strokeOpacity: 0.8,
          strokeWeight: 2,
          fillColor: "#4285F4",
          fillOpacity: 0.2,
          map,
          center: place.geometry.location,
          radius: 10000,
        });
      });

      initDrawingManager();
    }

    function initDrawingManager() {
      drawingManager = new google.maps.drawing.DrawingManager({
        drawingMode: google.maps.drawing.OverlayType.POLYGON,
        drawingControl: true,
        drawingControlOptions: {
          position: google.maps.ControlPosition.TOP_CENTER,
          drawingModes: ["polygon"],
        },
        polygonOptions: {
          fillColor: "#FF0000",
          fillOpacity: 0.3,
          strokeWeight: 2,
          clickable: true,
          editable: true,
          zIndex: 1,
        },
      });

      drawingManager.setMap(map);

      google.maps.event.addListener(drawingManager, "overlaycomplete", function (event) {
        if (polygon) polygon.setMap(null);
        polygon = event.overlay;

        const coordinates = polygon.getPath().getArray().map((latLng) => ({
          lat: latLng.lat(),
          lng: latLng.lng(),
        }));

        document.getElementById("coordinates").value = JSON.stringify(coordinates, null, 2);
      });
    }

    function clearPolygon() {
      if (polygon) {
        polygon.setMap(null);
        polygon = null;
        document.getElementById("coordinates").value = "";
      }
    }

    window.initMap = initMap;
  </script>
</body>
</html>













<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Dynamic Geofencing with Polygon Drawing</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    #map {
      height: 600px;
      width: 100%;
      margin-top: 20px;
    }
    #area-input {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;
    }
    #geofence-form {
      margin-bottom: 20px;
    }
    #status {
      margin-top: 20px;
      font-weight: bold;
    }
  </style>
  <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_API_KEY&libraries=places,drawing,geometry"></script>
</head>

<body>
  <h1>Dynamic Geofencing with Polygon Drawing</h1>
  <input type="text" id="area-input" placeholder="Search for an area..." />
  <div id="geofence-form">
    <button id="start-drawing">Draw Geofence</button>
    <button id="save-geofence" style="display:none;">Save Geofence</button>
  </div>
  <div id="map"></div>
  <div id="status"></div>

  <script>
    let map;
    let drawingManager;
    let currentPolygon = null;
    let geofences = {};
    let markers = [];
    let searchAreaRectangle = null;

    function getRandomColor() {
      const letters = '0123456789ABCDEF';
      let color = '#';
      for (let i = 0; i < 6; i++) color += letters[Math.floor(Math.random() * 16)];
      return color;
    }

    function initMap() {
      const input = document.getElementById('area-input');
      const autocomplete = new google.maps.places.Autocomplete(input, {
        types: ['(cities)'],
      });

      autocomplete.addListener('place_changed', function () {
        const place = autocomplete.getPlace();
        if (place && place.geometry) {
          const lat = place.geometry.location.lat();
          const lng = place.geometry.location.lng();
          const viewport = place.geometry.viewport;
          map.setCenter({ lat, lng });
          map.setZoom(12);

          new google.maps.Marker({
            position: { lat, lng },
            map: map,
            title: 'Selected Area'
          });

          highlightGeofences(lat, lng);
          drawSearchArea(viewport);
        } else {
          alert("Invalid place selected.");
        }
      });

      map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: 22.5726, lng: 88.3639 }, // Default to Kolkata
        zoom: 10
      });

      map.addListener("click", function (e) {
        if (!currentPolygon) return;

        markers.forEach(m => m.setMap(null));
        markers = [];

        const latLng = e.latLng;
        const marker = new google.maps.Marker({
          position: latLng,
          map: map,
          title: "Request Location"
        });
        markers.push(marker);

        const inside = google.maps.geometry.poly.containsLocation(latLng, currentPolygon);
        document.getElementById("status").innerText = inside
          ? "Location is INSIDE the service area."
          : "Location is OUTSIDE the service area.";
        document.getElementById("status").style.color = inside ? "green" : "red";
      });
    }

    function drawSearchArea(viewport) {
      if (searchAreaRectangle) searchAreaRectangle.setMap(null);
      if (!viewport || !viewport.northeast || !viewport.southwest) return;

      searchAreaRectangle = new google.maps.Rectangle({
        bounds: {
          north: viewport.northeast.lat(),
          south: viewport.southwest.lat(),
          east: viewport.northeast.lng(),
          west: viewport.southwest.lng()
        },
        strokeColor: '#FF0000',
        strokeOpacity: 0.8,
        strokeWeight: 2,
        fillColor: '#FF9999',
        fillOpacity: 0.3
      });
      searchAreaRectangle.setMap(map);
    }

    document.getElementById('start-drawing').addEventListener('click', function () {
      if (currentPolygon) currentPolygon.setMap(null);

      drawingManager = new google.maps.drawing.DrawingManager({
        drawingMode: google.maps.drawing.OverlayType.POLYGON,
        drawingControl: true,
        drawingControlOptions: {
          position: google.maps.ControlPosition.TOP_CENTER,
          drawingModes: ['polygon'],
        },
        polygonOptions: {
          fillColor: '#00FF00',
          fillOpacity: 0.5,
          strokeWeight: 2,
          editable: true,
          zIndex: 1,
        },
      });

      drawingManager.setMap(map);

      google.maps.event.addListener(drawingManager, 'overlaycomplete', function (event) {
        if (currentPolygon) currentPolygon.setMap(null);
        currentPolygon = event.overlay;
        drawingManager.setDrawingMode(null);
        drawingManager.setMap(null);
        document.getElementById('save-geofence').style.display = 'inline-block';
      });
    });

    document.getElementById('save-geofence').addEventListener('click', function () {
      if (!currentPolygon) return alert("Please draw a polygon first.");
      const areaName = prompt("Enter name for this area:");
      if (!areaName) return;

      const coords = currentPolygon.getPath().getArray().map(coord => ({
        lat: coord.lat(),
        lng: coord.lng()
      }));

      const color = getRandomColor();
      geofences[areaName] = { coords, color };

      const polygon = new google.maps.Polygon({
        paths: coords,
        strokeColor: '#000000',
        strokeOpacity: 0.8,
        strokeWeight: 2,
        fillColor: color,
        fillOpacity: 0.35,
      });
      polygon.setMap(map);

      alert(`Geofence "${areaName}" saved.`);
      currentPolygon.setMap(null);
      currentPolygon = null;
      document.getElementById('save-geofence').style.display = 'none';
    });

    function highlightGeofences(lat, lng) {
      for (const name in geofences) {
        const area = geofences[name];
        const polygon = new google.maps.Polygon({
          paths: area.coords,
          strokeColor: '#000000',
          strokeOpacity: 0.8,
          strokeWeight: 2,
          fillColor: area.color,
          fillOpacity: 0.35
        });
        polygon.setMap(map);

        const point = new google.maps.LatLng(lat, lng);
        if (google.maps.geometry.poly.containsLocation(point, polygon)) {
          alert(`This location is inside the "${name}" zone.`);
        }
      }
    }

    google.maps.event.addDomListener(window, 'load', initMap);
  </script>
</body>
</html>















Great — you're looking for **automatic suggestions** while typing city names, i.e., **live autocomplete using Google Places API** with **only city-level results**.

### ✅ You already get this by using:

```js
new google.maps.places.Autocomplete(input, {
  types: ['(cities)']
});
```

But to clarify **how to do full automatic city suggestions**, here’s the working **end-to-end implementation**:

---

## ✅ Final HTML + JS (with autocomplete for cities)

```html
<!DOCTYPE html>
<html>
<head>
  <title>City Autocomplete with Google API</title>
  <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_API_KEY&libraries=places"></script>
</head>
<body>
  <h2>City Autocomplete</h2>
  <input id="cityInput" type="text" placeholder="Enter city..." autocomplete="off" />
  <button onclick="saveCity()">Save City</button>

  <script>
    let autocomplete;
    let selectedCity = null;

    function initAutocomplete() {
      const input = document.getElementById("cityInput");

      autocomplete = new google.maps.places.Autocomplete(input, {
        types: ['(cities)'], // only cities
        componentRestrictions: { country: "in" } // optional: restrict to India
      });

      autocomplete.addListener("place_changed", () => {
        const place = autocomplete.getPlace();
        if (!place.geometry) {
          alert("Please select a valid city from the suggestions.");
          return;
        }

        selectedCity = {
          name: place.name,
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng()
        };

        console.log("Selected City:", selectedCity);
      });
    }

    function saveCity() {
      if (!selectedCity) {
        alert("Please choose a city from the suggestions.");
        return;
      }

      fetch("/api/cities", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        body: JSON.stringify(selectedCity)
      })
      .then(res => res.json())
      .then(data => {
        alert("City saved successfully.");
        console.log(data);
      })
      .catch(err => {
        alert("Error saving city.");
        console.error(err);
      });
    }

    window.onload = initAutocomplete;
  </script>
</body>
</html>
```

---

## ✅ How It Works

* ✅ As soon as the user types, Google suggests **city names**
* ✅ When the user selects one, the city’s `name`, `lat`, and `lng` are captured
* ✅ On clicking **Save**, it’s POSTed to your Laravel backend

---

## ✅ Optional Enhancements

| Feature                                    | Code/Idea                                         |
| ------------------------------------------ | ------------------------------------------------- |
| Limit suggestions to India 🇮🇳            | Add `componentRestrictions: { country: "in" }`    |
| Auto save on select                        | Call `saveCity()` inside `place_changed` listener |
| Disable save button until city is selected | Use `disabled` logic tied to `selectedCity`       |

---

Would you like to:

* Automatically **fetch & show saved cities**
* Show on map with marker/polygon
* Prevent duplicate cities in DB

Let me know — I can help add those features too!




*******,***********,***********,***********,***********,***********,***********,***********,***********,****




To start with **searching a city** via Google Maps and **storing its name, latitude, and longitude** in your **Laravel** backend, follow this step-by-step guide:

---

## ✅ Step 1: Frontend (Search City + Get Lat/Lng)

Use Google Maps **Places Autocomplete** to allow the user to search a city.

### ✅ HTML + JS (Autocomplete Search + Send to Laravel)

```html
<!DOCTYPE html>
<html>
<head>
  <title>City Search and Save</title>
  <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places"></script>
</head>
<body>
  <h2>Search City</h2>
  <input id="cityInput" type="text" placeholder="Enter city name" />
  <button onclick="saveCity()">Save City</button>

  <script>
    let autocomplete;
    let selectedPlace = null;

    function initAutocomplete() {
      const input = document.getElementById("cityInput");
      autocomplete = new google.maps.places.Autocomplete(input, {
        types: ["(cities)"]
      });

      autocomplete.addListener("place_changed", () => {
        const place = autocomplete.getPlace();
        if (!place.geometry) return;

        selectedPlace = {
          name: place.name,
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng()
        };

        console.log("Selected City:", selectedPlace);
      });
    }

    function saveCity() {
      if (!selectedPlace) {
        alert("Please select a city first.");
        return;
      }

      fetch("/api/cities", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json",
        },
        body: JSON.stringify(selectedPlace)
      })
      .then(response => response.json())
      .then(data => {
        alert("City saved successfully!");
        console.log(data);
      })
      .catch(error => {
        alert("Error saving city.");
        console.error(error);
      });
    }

    window.onload = initAutocomplete;
  </script>
</body>
</html>
```

---

## ✅ Step 2: Laravel Setup

### 🔸 Migration for `cities` table

```bash
php artisan make:migration create_cities_table
```

```php
// database/migrations/xxxx_xx_xx_create_cities_table.php
public function up()
{
    Schema::create('cities', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->decimal('lat', 10, 7);
        $table->decimal('lng', 10, 7);
        $table->timestamps();
    });
}
```

```bash
php artisan migrate
```

---

### 🔸 Create City Model

```bash
php artisan make:model City
```

---

### 🔸 API Route

```php
// routes/api.php
Route::post('/cities', [CityController::class, 'store']);
```

---

### 🔸 Controller Logic

```bash
php artisan make:controller CityController
```

```php
// app/Http/Controllers/CityController.php
use App\Models\City;
use Illuminate\Http\Request;

class CityController extends Controller
{
    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string',
            'lat' => 'required|numeric',
            'lng' => 'required|numeric',
        ]);

        $city = City::create([
            'name' => $request->name,
            'lat' => $request->lat,
            'lng' => $request->lng,
        ]);

        return response()->json(['success' => true, 'city' => $city], 201);
    }
}
```

---

### 🔸 Allow Mass Assignment in City Model

```php
// app/Models/City.php
protected $fillable = ['name', 'lat', 'lng'];
```

---

## ✅ Done!

Now you can:

* ✅ Search cities with Google Maps Autocomplete
* ✅ Extract `lat`, `lng`, and `name`
* ✅ Save it to your Laravel DB

---

### 🧪 Sample API Data Sent

```json
{
  "name": "Kolkata",
  "lat": 22.5726,
  "lng": 88.3639
}
```

---

Would you like the next step: **fetching saved cities to select and draw polygons**?





************************************************************************************************************************************************



To store polygon data in your **Laravel** app and check whether a location is **inside** or **outside** a polygon (geofence), follow this approach:

---

## ✅ Step 1: Store Polygon Data in Laravel

### 🎯 Use `spatial` datatype if possible:

Use **MySQL with spatial support** (e.g. MySQL 5.7+ or MariaDB) and **`POINT`, `POLYGON`** types.

### 🔸Migration Example

```php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateServiceAreasTable extends Migration
{
    public function up()
    {
        Schema::create('service_areas', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->polygon('area'); // for spatial polygon
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('service_areas');
    }
}
```

> If your DB doesn’t support spatial, fallback to storing as **JSON**.

```php
$table->json('area_coordinates');
```

---

## ✅ Step 2: Save Polygon Coordinates (from frontend)

From your map drawing tool (`google.maps.Polygon`), get the coordinates:

### 🔹 Extract coordinates from polygon

```javascript
const path = serviceAreaPolygon.getPath();
let coordinates = [];

for (let i = 0; i < path.getLength(); i++) {
  const point = path.getAt(i);
  coordinates.push({ lat: point.lat(), lng: point.lng() });
}

// Send to Laravel API
fetch('/api/service-area', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    name: 'Kolkata Zone',
    coordinates: coordinates,
  }),
});
```

---

## ✅ Step 3: Store in Laravel Controller

```php
public function store(Request $request)
{
    $request->validate([
        'name' => 'required|string',
        'coordinates' => 'required|array',
    ]);

    $area = new ServiceArea();
    $area->name = $request->name;
    $area->area_coordinates = json_encode($request->coordinates); // If JSON column
    $area->save();

    return response()->json(['success' => true]);
}
```

---

## ✅ Step 4: Check if Location is Inside Polygon (Backend)

To check if a point is inside a polygon:

### Option 1: Use **MySQL ST\_Contains**

If you use spatial data:

```php
$point = DB::raw("ST_GeomFromText('POINT($lng $lat)')");
$inside = DB::table('service_areas')
    ->whereRaw("ST_Contains(area, $point)")
    ->exists();
```

### Option 2: Use PHP Point-In-Polygon Algorithm

If you store polygon as JSON:

```php
function isPointInPolygon($point, $polygon)
{
    $x = $point['lng'];
    $y = $point['lat'];
    $inside = false;
    $n = count($polygon);

    for ($i = 0, $j = $n - 1; $i < $n; $j = $i++) {
        $xi = $polygon[$i]['lng']; $yi = $polygon[$i]['lat'];
        $xj = $polygon[$j]['lng']; $yj = $polygon[$j]['lat'];

        $intersect = (($yi > $y) != ($yj > $y))
            && ($x < ($xj - $xi) * ($y - $yi) / ($yj - $yi + 0.0000001) + $xi);

        if ($intersect) $inside = !$inside;
    }

    return $inside;
}
```

### Use in Controller:

```php
public function checkLocation(Request $request)
{
    $point = ['lat' => $request->lat, 'lng' => $request->lng];
    $area = ServiceArea::find($request->area_id);
    $polygon = json_decode($area->area_coordinates, true);

    $inside = isPointInPolygon($point, $polygon);

    return response()->json(['inside' => $inside]);
}
```

---

## 🧪 Final API Example

### Route

```php
Route::post('/check-location', [ServiceAreaController::class, 'checkLocation']);
```

### Sample Request

```json
POST /api/check-location
{
  "lat": 22.57,
  "lng": 88.36,
  "area_id": 1
}
```

---

## ✅ Bonus: Save Polygon via Laravel Blade/JS

You can send the polygon from your HTML page by using `fetch` or AJAX once drawing is complete.

---

## ✅ Summary

| Task                       | Approach                                  |
| -------------------------- | ----------------------------------------- |
| Store polygon              | Use MySQL `polygon` or JSON               |
| Send polygon from frontend | Use `getPath()` → convert to lat/lng JSON |
| Save in Laravel            | Store JSON or spatial data                |
| Check if point is inside   | Use `ST_Contains()` or PHP logic          |

---

Let me know if you want a **complete working Laravel + DB + map demo setup**, or how to visualize it back from DB to map.
