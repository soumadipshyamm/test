




To start with **searching a city** via Google Maps and **storing its name, latitude, and longitude** in your **Laravel** backend, follow this step-by-step guide:

---

## âœ… Step 1: Frontend (Search City + Get Lat/Lng)

Use Google Maps **Places Autocomplete** to allow the user to search a city.

### âœ… HTML + JS (Autocomplete Search + Send to Laravel)

```html
<!DOCTYPE html>
<html>
<head>
  <title>City Search and Save</title>
  <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places"></script>
</head>
<body>
  <h2>Search City</h2>
  <input id="cityInput" type="text" placeholder="Enter city name" />
  <button onclick="saveCity()">Save City</button>

  <script>
    let autocomplete;
    let selectedPlace = null;

    function initAutocomplete() {
      const input = document.getElementById("cityInput");
      autocomplete = new google.maps.places.Autocomplete(input, {
        types: ["(cities)"]
      });

      autocomplete.addListener("place_changed", () => {
        const place = autocomplete.getPlace();
        if (!place.geometry) return;

        selectedPlace = {
          name: place.name,
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng()
        };

        console.log("Selected City:", selectedPlace);
      });
    }

    function saveCity() {
      if (!selectedPlace) {
        alert("Please select a city first.");
        return;
      }

      fetch("/api/cities", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json",
        },
        body: JSON.stringify(selectedPlace)
      })
      .then(response => response.json())
      .then(data => {
        alert("City saved successfully!");
        console.log(data);
      })
      .catch(error => {
        alert("Error saving city.");
        console.error(error);
      });
    }

    window.onload = initAutocomplete;
  </script>
</body>
</html>
```

---

## âœ… Step 2: Laravel Setup

### ðŸ”¸ Migration for `cities` table

```bash
php artisan make:migration create_cities_table
```

```php
// database/migrations/xxxx_xx_xx_create_cities_table.php
public function up()
{
    Schema::create('cities', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->decimal('lat', 10, 7);
        $table->decimal('lng', 10, 7);
        $table->timestamps();
    });
}
```

```bash
php artisan migrate
```

---

### ðŸ”¸ Create City Model

```bash
php artisan make:model City
```

---

### ðŸ”¸ API Route

```php
// routes/api.php
Route::post('/cities', [CityController::class, 'store']);
```

---

### ðŸ”¸ Controller Logic

```bash
php artisan make:controller CityController
```

```php
// app/Http/Controllers/CityController.php
use App\Models\City;
use Illuminate\Http\Request;

class CityController extends Controller
{
    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string',
            'lat' => 'required|numeric',
            'lng' => 'required|numeric',
        ]);

        $city = City::create([
            'name' => $request->name,
            'lat' => $request->lat,
            'lng' => $request->lng,
        ]);

        return response()->json(['success' => true, 'city' => $city], 201);
    }
}
```

---

### ðŸ”¸ Allow Mass Assignment in City Model

```php
// app/Models/City.php
protected $fillable = ['name', 'lat', 'lng'];
```

---

## âœ… Done!

Now you can:

* âœ… Search cities with Google Maps Autocomplete
* âœ… Extract `lat`, `lng`, and `name`
* âœ… Save it to your Laravel DB

---

### ðŸ§ª Sample API Data Sent

```json
{
  "name": "Kolkata",
  "lat": 22.5726,
  "lng": 88.3639
}
```

---

Would you like the next step: **fetching saved cities to select and draw polygons**?








************************
To store polygon data in your **Laravel** app and check whether a location is **inside** or **outside** a polygon (geofence), follow this approach:

---

## âœ… Step 1: Store Polygon Data in Laravel

### ðŸŽ¯ Use `spatial` datatype if possible:

Use **MySQL with spatial support** (e.g. MySQL 5.7+ or MariaDB) and **`POINT`, `POLYGON`** types.

### ðŸ”¸Migration Example

```php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateServiceAreasTable extends Migration
{
    public function up()
    {
        Schema::create('service_areas', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->polygon('area'); // for spatial polygon
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('service_areas');
    }
}
```

> If your DB doesnâ€™t support spatial, fallback to storing as **JSON**.

```php
$table->json('area_coordinates');
```

---

## âœ… Step 2: Save Polygon Coordinates (from frontend)

From your map drawing tool (`google.maps.Polygon`), get the coordinates:

### ðŸ”¹ Extract coordinates from polygon

```javascript
const path = serviceAreaPolygon.getPath();
let coordinates = [];

for (let i = 0; i < path.getLength(); i++) {
  const point = path.getAt(i);
  coordinates.push({ lat: point.lat(), lng: point.lng() });
}

// Send to Laravel API
fetch('/api/service-area', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    name: 'Kolkata Zone',
    coordinates: coordinates,
  }),
});
```

---

## âœ… Step 3: Store in Laravel Controller

```php
public function store(Request $request)
{
    $request->validate([
        'name' => 'required|string',
        'coordinates' => 'required|array',
    ]);

    $area = new ServiceArea();
    $area->name = $request->name;
    $area->area_coordinates = json_encode($request->coordinates); // If JSON column
    $area->save();

    return response()->json(['success' => true]);
}
```

---

## âœ… Step 4: Check if Location is Inside Polygon (Backend)

To check if a point is inside a polygon:

### Option 1: Use **MySQL ST\_Contains**

If you use spatial data:

```php
$point = DB::raw("ST_GeomFromText('POINT($lng $lat)')");
$inside = DB::table('service_areas')
    ->whereRaw("ST_Contains(area, $point)")
    ->exists();
```

### Option 2: Use PHP Point-In-Polygon Algorithm

If you store polygon as JSON:

```php
function isPointInPolygon($point, $polygon)
{
    $x = $point['lng'];
    $y = $point['lat'];
    $inside = false;
    $n = count($polygon);

    for ($i = 0, $j = $n - 1; $i < $n; $j = $i++) {
        $xi = $polygon[$i]['lng']; $yi = $polygon[$i]['lat'];
        $xj = $polygon[$j]['lng']; $yj = $polygon[$j]['lat'];

        $intersect = (($yi > $y) != ($yj > $y))
            && ($x < ($xj - $xi) * ($y - $yi) / ($yj - $yi + 0.0000001) + $xi);

        if ($intersect) $inside = !$inside;
    }

    return $inside;
}
```

### Use in Controller:

```php
public function checkLocation(Request $request)
{
    $point = ['lat' => $request->lat, 'lng' => $request->lng];
    $area = ServiceArea::find($request->area_id);
    $polygon = json_decode($area->area_coordinates, true);

    $inside = isPointInPolygon($point, $polygon);

    return response()->json(['inside' => $inside]);
}
```

---

## ðŸ§ª Final API Example

### Route

```php
Route::post('/check-location', [ServiceAreaController::class, 'checkLocation']);
```

### Sample Request

```json
POST /api/check-location
{
  "lat": 22.57,
  "lng": 88.36,
  "area_id": 1
}
```

---

## âœ… Bonus: Save Polygon via Laravel Blade/JS

You can send the polygon from your HTML page by using `fetch` or AJAX once drawing is complete.

---

## âœ… Summary

| Task                       | Approach                                  |
| -------------------------- | ----------------------------------------- |
| Store polygon              | Use MySQL `polygon` or JSON               |
| Send polygon from frontend | Use `getPath()` â†’ convert to lat/lng JSON |
| Save in Laravel            | Store JSON or spatial data                |
| Check if point is inside   | Use `ST_Contains()` or PHP logic          |

---

Let me know if you want a **complete working Laravel + DB + map demo setup**, or how to visualize it back from DB to map.
