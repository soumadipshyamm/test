  public function getFares(Request $request, $uuid = null)
    {
        if ($request->ajax()) {
            try {
                $filterConditions = collect([]);
                if ($request->type) {
                    $filterConditions = $filterConditions->merge(['category_id' => uuidtoid($request->type, 'categories')]);
                }
                if ($request->zone) {
                    $filterConditions = $filterConditions->merge(['zone_id' => uuidtoid($request->zone, 'zones')]);
                }
                $totalData = $this->zoneService->getTotalFareData($filterConditions->toArray());
                $totalFiltered = $totalData;
                $limit = $request->input('length');
                $start = $request->input('start');
                $order = 'category_id';
                $dir = 'desc';
                $index = $start;
                $nestedData = [];
                $data = [];
                if (empty($request->input('search.value'))) {
                    $fares = $this->zoneService->getListofZoneFares($filterConditions->toArray(), $start, $limit, $order, $dir);
                } else {
                    $search = $request->input('search.value');
                    $fares = $this->zoneService->getListofZoneFares($filterConditions->toArray(), $start, $limit, $order, $dir, $search);
                    $totalFiltered = $this->zoneService->getTotalFareData($filterConditions->toArray(), $search);
                }
                if (!empty($fares)) {
                    foreach ($fares as $fare) {
                        $status = '';
                        if ($fare->is_active) {
                            $status = 'checked';
                        }
                        $editRoute = route('admin.fares.edit', ['fareUuid' => $fare->uuid, 'uuid' => $uuid ?? null]);
                        $index++;
                        $nestedData['sr'] = '<p>' . $index . '</p>';
                        $nestedData['id'] = $index;
                        // $nestedData['type'] = $fare->category?->name;
                        $nestedData['type'] = $fare->category?->name;
                        $nestedData['price'] = $fare->rate_per_km;
                        $nestedData['time'] = 'Start:- ' . customTime($fare->start) . '<br />' . 'End:- ' . customTime($fare->end);
                        $nestedData['fare_type'] = $fare->fare_for ? implode(',', $fare->fare_for) : '';
                        $nestedData['status'] = '
                            <div class="">
                            <label class="switch">
                            <input type="checkbox" class="changeStatus" id="switchery_inline1' . $fare->uuid . '" name="is_active"' . $status . ' data-uuid="' . $fare->uuid . '" data-table="km_fares" data-message="deactive">
                            <span class="slider round"></span>
                        </label>
                         </div>';
                        $nestedData['action'] = '<div class="dropdown btn_action">
                                                <button class="dropdown-toggle" type="button"
                                                    id="dropdownMenuButton1" data-toggle="dropdown"
                                                    aria-expanded="false">
                                                    <i class="fa-solid fa-gear"></i>
                                                </button><ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">';
                        $nestedData['action'] .= '<li>
                                                    <a class="dropdown-item" href="' . $editRoute . '"><span><i
                                                    class="fa-regular fa-pen-to-square"></i></span>Edit</a>
                                                </li>';
                        $nestedData['action'] .= '<li>
                                                    <a class="dropdown-item deleteData" data-uuid="' . $fare->uuid . '" href="javascript:void(0)" data-table="km_fares"><span><i
                                                    class="fa-regular fa-trash-can"></i></span>Delete</a>
                                                </li>';
                        $nestedData['action'] .= '</ul></div>';
                        $data[] = $nestedData;
                        $nestedData = [];
                    }
                }
                $jsonData = array(
                    "draw" => (int) $request->input('draw'),
                    "recordsTotal" => (int) $totalData,
                    "recordsFiltered" => (int) $totalFiltered,
                    "data" => $data,
                );
                return response()->json($jsonData);
            } catch (\Exception $e) {
                logger($e->getMessage() . ' on ' . $e->getFile() . ' line number ' . $e->getLine());
                return array(
                    "draw" => (int) $request->input('draw'),
                    "recordsTotal" => (int) 0,
                    "recordsFiltered" => (int) 0,
                    "data" => []
                );
            }
        }
        abort(405);
    }




let fareDataColumn = [
    ...commonFirstDataColumn, ...
    [
        // { data: 'zone', name: 'zone', sClass: 'w-25' },
        { data: 'type', name: 'type', sClass: 'w-25' },
        { data: 'price', name: 'price', sClass: 'w-25' },
        { data: 'time', name: 'time', sClass: 'w-75' },
        { data: 'fare_type', name: 'fare_type', sClass: 'w-25' },
    ],
    ...commonLastDataColumn
];



let fareTable = $('#fareTable').DataTable({
    responsive: true,
    searching: false,
    lengthChange: false,
    "language": {
        lengthMenu: "Counts per page_MENU_",
        searchPlaceholder: "Search by name"
    },
    autoWidth: false,
    processing: true,
    serverSide: true,
    ajax: {
        url: baseUrl + 'ajax/getFares',
        dataType: "json",
        type: "get",
        data: function (d) {
            return $.extend({}, d, {
                "type": $(".type").val() ?? '',
                // "zone": $(".zone").val() ?? ''
            });
        },

    },
    columns: fareDataColumn,
    dom: '<".d-flex"<".col-6" l><".col-6 text-right" f>>t<".d-flex"<".col-6" i><".col-6 text-right"p>>',
    "ordering": true,
    "fnDrawCallback": function (oSettings) {
        let pagination = $(oSettings.nTableWrapper).find('.dataTables_paginate,.dataTables_info,.dataTables_length');
        oSettings._iDisplayLength > oSettings.fnRecordsDisplay() ? pagination.hide() : pagination.show();
    },
    "createdRow": function (row, data, dataIndex) {
        // console.log(data);
        $(row).addClass('manage-enable');
        if (data.is_active) {
            $(row).addClass('block-disable');
        }
        console.log(data.type);

    }
});

*******************************************************


ChatGPT Auto

You said:
Duplicate value count data.type  in js
ChatGPT said:
ChatGPT
To count the occurrences of duplicate values in an array in JavaScript, you can use a combination of Array.prototype.reduce() or a forEach loop along with an object to store the counts. Here's how you can do it:

Example Code
javascript
Copy code
function countDuplicates(array) {
    const count = {};
    
    array.forEach(item => {
        count[item] = (count[item] || 0) + 1;
    });
    
    // Filter the count object to keep only duplicates
    const duplicates = {};
    for (let key in count) {
        if (count[key] > 1) {
            duplicates[key] = count[key];
        }
    }
    
    return duplicates;
}

// Example usage
const data = ['apple', 'orange', 'apple', 'banana', 'orange', 'apple'];
const duplicateCounts = countDuplicates(data);
console.log(duplicateCounts);
Output
yaml
Copy code
{
  apple: 3,
  orange: 2
}
Explanation
The countDuplicates function iterates over the array and counts the occurrences of each value using an object (count).
It then filters out only those values that appear more than once.
Finally, it returns an object containing only the duplicate values and their counts.





You said:
let fareTable = $('#fareTable').DataTable({
    responsive: true,
    searching: false,
    lengthChange: false,
    "language": {
        lengthMenu: "Counts per page_MENU_",
        searchPlaceholder: "Search by name"
    },
    autoWidth: false,
    processing: true,
    serverSide: true,
    ajax: {
        url: baseUrl + 'ajax/getFares',
        dataType: "json",
        type: "get",
        data: function (d) {
            return $.extend({}, d, {
                "type": $(".type").val() ?? '',
                // "zone": $(".zone").val() ?? ''
            });
        },

    },
    columns: fareDataColumn,
    dom: '<".d-flex"<".col-6" l><".col-6 text-right" f>>t<".d-flex"<".col-6" i><".col-6 text-right"p>>',
    "ordering": true,
    "fnDrawCallback": function (oSettings) {
        let pagination = $(oSettings.nTableWrapper).find('.dataTables_paginate,.dataTables_info,.dataTables_length');
        oSettings._iDisplayLength > oSettings.fnRecordsDisplay() ? pagination.hide() : pagination.show();
    },
    "createdRow": function (row, data, dataIndex) {
        // console.log(data);
        $(row).addClass('manage-enable');
        if (data.is_active) {
            $(row).addClass('block-disable');
        }
        console.log(data.type);

    }
});
ChatGPT said:
ChatGPT
Your DataTable setup looks mostly correct. Hereâ€™s a breakdown of what's happening in your configuration and where you might be looking to handle or count duplicate values for data.type.

If you need to count how often each type appears within the data received from the server and do something with those counts, you can modify the ajax success callback or the createdRow function.

Adding Duplicate Count Logic for data.type
If you want to count the occurrences of data.type in the table, you can use an object to keep track of the counts as rows are created. Here's an example using the createdRow function to maintain a count of data.type occurrences:

javascript
Copy code
// Object to store the count of types
let typeCount = {};

let fareTable = $('#fareTable').DataTable({
    responsive: true,
    searching: false,
    lengthChange: false,
    "language": {
        lengthMenu: "Counts per page_MENU_",
        searchPlaceholder: "Search by name"
    },
    autoWidth: false,
    processing: true,
    serverSide: true,
    ajax: {
        url: baseUrl + 'ajax/getFares',
        dataType: "json",
        type: "get",
        data: function (d) {
            return $.extend({}, d, {
                "type": $(".type").val() ?? '',
                // "zone": $(".zone").val() ?? ''
            });
        },
    },
    columns: fareDataColumn,
    dom: '<".d-flex"<".col-6" l><".col-6 text-right" f>>t<".d-flex"<".col-6" i><".col-6 text-right"p>>',
    "ordering": true,
    "fnDrawCallback": function (oSettings) {
        let pagination = $(oSettings.nTableWrapper).find('.dataTables_paginate,.dataTables_info,.dataTables_length');
        oSettings._iDisplayLength > oSettings.fnRecordsDisplay() ? pagination.hide() : pagination.show();
    },
    "createdRow": function (row, data, dataIndex) {
        $(row).addClass('manage-enable');
        if (data.is_active) {
            $(row).addClass('block-disable');
        }
        
        // Count occurrences of data.type
        let type = data.type;
        typeCount[type] = (typeCount[type] || 0) + 1;

        // Log the current count of each type (or handle it in another way)
        console.log(typeCount);
    }
});
Explanation
typeCount Object: A global object (typeCount) is used to store the count of each data.type.
createdRow Function: This function is triggered whenever a row is created. It checks the data.type for that row and increments its count in the typeCount object.
Logging the Counts: Inside createdRow, we log the current count of each type. You can modify this part to handle the duplicate counts however you like.
This example updates the typeCount object every time the table data is drawn, allowing you to keep track of duplicate type values within the current data set.






You said:
Add with colspan 
ChatGPT said:
ChatGPT
If you want to add a colspan attribute to a table row, you can modify the table in the DataTables createdRow function or handle it in a custom footer/header. Hereâ€™s how you can add a row with a colspan inside the DataTable dynamically.

Example: Adding a Row with colspan
Letâ€™s assume you want to add a row at the end of the table (or somewhere in between) that spans multiple columns. You can do this within the createdRow function or with the drawCallback.

Using drawCallback to Add a colspan Row:
javascript
Copy code
let fareTable = $('#fareTable').DataTable({
    responsive: true,
    searching: false,
    lengthChange: false,
    "language": {
        lengthMenu: "Counts per page_MENU_",
        searchPlaceholder: "Search by name"
    },
    autoWidth: false,
    processing: true,
    serverSide: true,
    ajax: {
        url: baseUrl + 'ajax/getFares',
        dataType: "json",
        type: "get",
        data: function (d) {
            return $.extend({}, d, {
                "type": $(".type").val() ?? '',
            });
        },
    },
    columns: fareDataColumn,
    dom: '<".d-flex"<".col-6" l><".col-6 text-right" f>>t<".d-flex"<".col-6" i><".col-6 text-right"p>>',
    "ordering": true,
    "fnDrawCallback": function (oSettings) {
        let pagination = $(oSettings.nTableWrapper).find('.dataTables_paginate,.dataTables_info,.dataTables_length');
        oSettings._iDisplayLength > oSettings.fnRecordsDisplay() ? pagination.hide() : pagination.show();
    },
    "createdRow": function (row, data, dataIndex) {
        $(row).addClass('manage-enable');
        if (data.is_active) {
            $(row).addClass('block-disable');
        }
    },
    "drawCallback": function (settings) {
        // Remove existing custom row (if any)
        $('#fareTable tbody .custom-row').remove();

        // Append custom row with colspan to the table body
        $('#fareTable tbody').append(
            `<tr class="custom-row">
                <td colspan="5" class="text-center">This is a custom row with colspan.</td>
            </tr>`
        );
    }
});
Explanation
drawCallback Function: This function is called after every draw (when data is loaded or refreshed). Here, we use it to append a custom row with a colspan.
Custom Row: The new row is added at the end of the table's body (<tbody>), with a <td> that has a colspan="5", making it span 5 columns. Modify the colspan value based on the number of columns in your table.
Removing the Existing Custom Row: If the table is redrawn (such as on pagination or search), the existing custom row is first removed to avoid duplication.
You can customize the text and styling as needed or change when and where the row is added. If you need to place it elsewhere, you can adjust the placement logic (e.g., use prepend() instead of append() for adding it at the top).


2/2






You said:
Data.type duplicate value wise table design use with  rowspan
ChatGPT said:
ChatGPT
To dynamically merge table rows (<tr>) based on duplicate values of data.type in a DataTable using rowspan, you'll need to adjust the structure of how the rows are created. Specifically, rowspan is applied to merge multiple rows into one for a specific column where duplicate values occur.

However, DataTables doesnâ€™t provide native support for rowspan handling. Youâ€™ll need to manipulate the DOM manually after DataTables has rendered the rows. This can be achieved using the drawCallback or createdRow methods.

Steps:
Identify duplicate values for data.type.
Apply rowspan to the first occurrence of each duplicate value.
Remove the repeated values from subsequent rows (which are now spanned).
Hereâ€™s how you can achieve this:

Example Implementation
javascript
Copy code
let fareTable = $('#fareTable').DataTable({
    responsive: true,
    searching: false,
    lengthChange: false,
    "language": {
        lengthMenu: "Counts per page_MENU_",
        searchPlaceholder: "Search by name"
    },
    autoWidth: false,
    processing: true,
    serverSide: true,
    ajax: {
        url: baseUrl + 'ajax/getFares',
        dataType: "json",
        type: "get",
        data: function (d) {
            return $.extend({}, d, {
                "type": $(".type").val() ?? '',
            });
        },
    },
    columns: [
        { data: 'type' },  // This is the 'type' column
        { data: 'otherColumn1' },
        { data: 'otherColumn2' },
        // other columns...
    ],
    dom: '<".d-flex"<".col-6" l><".col-6 text-right" f>>t<".d-flex"<".col-6" i><".col-6 text-right"p>>',
    "ordering": true,
    "drawCallback": function (settings) {
        // Create a map to store the rowspan count for each unique type
        let api = this.api();
        let rows = api.rows({ page: 'current' }).nodes();
        let last = null;

        // Loop through each row and check for duplicate 'type'
        api.column(0, { page: 'current' }).data().each(function (type, i) {
            if (last !== type) {
                // Count how many rows have the same 'type'
                let count = api.column(0, { page: 'current' }).data().filter(function (value) {
                    return value === type;
                }).length;

                // Apply rowspan for the first occurrence
                $(rows).eq(i).find('td:first').attr('rowspan', count);

                // Remember the last type to compare
                last = type;
            } else {
                // Remove the 'type' cell from subsequent rows
                $(rows).eq(i).find('td:first').remove();
            }
        });
    }
});
Explanation:
drawCallback Function: This function is triggered every time the table is drawn (e.g., after paging or filtering).

api.column(0, { page: 'current' }): This fetches the data of the first column (data.type) for the currently displayed page. We are only applying rowspan to the current page of data.

Counting Duplicates: The data() method returns all values in the type column for the current page, and the .filter() function counts how many times each type value appears.

Applying rowspan: For the first occurrence of each duplicate value, rowspan is applied. The attr('rowspan', count) function merges rows based on the count of duplicate values.

Removing Duplicates: For subsequent rows where the type is the same, the first <td> element is removed using $(rows).eq(i).find('td:first').remove() to avoid displaying the same value repeatedly.

Example:
Let's say your table data looks like this:

Type	Column 1	Column 2
A	Data 1	Data 2
A	Data 3	Data 4
B	Data 5	Data 6
C	Data 7	Data 8
C	Data 9	Data 10
After applying rowspan, it will render as:

Type	Column 1	Column 2
A	Data 1	Data 2
Data 3	Data 4
B	Data 5	Data 6
C	Data 7	Data 8
Data 9	Data 10
Notes:
Column Index: Make sure that the column index (api.column(0)) corresponds to the correct column where the duplicate values exist (data.type in this case).
Pagination: The code only applies to the currently visible rows (page: 'current'). If you want to apply it globally, you can change the scope or adjust it as needed for the entire table.
This approach should handle rowspan for dynamically loaded data from the server.


2/2






You said:
  public function getFares(Request $request, $uuid = null)
    {
        if ($request->ajax()) {
            try {
                $filterConditions = collect([]);
                if ($request->type) {
                    $filterConditions = $filterConditions->merge(['category_id' => uuidtoid($request->type, 'categories')]);
                }
                if ($request->zone) {
                    $filterConditions = $filterConditions->merge(['zone_id' => uuidtoid($request->zone, 'zones')]);
                }
                $totalData = $this->zoneService->getTotalFareData($filterConditions->toArray());
                $totalFiltered = $totalData;
                $limit = $request->input('length');
                $start = $request->input('start');
                $order = 'category_id';
                $dir = 'desc';
                $index = $start;
                $nestedData = [];
                $data = [];
                if (empty($request->input('search.value'))) {
                    $fares = $this->zoneService->getListofZoneFares($filterConditions->toArray(), $start, $limit, $order, $dir);
                } else {
                    $search = $request->input('search.value');
                    $fares = $this->zoneService->getListofZoneFares($filterConditions->toArray(), $start, $limit, $order, $dir, $search);
                    $totalFiltered = $this->zoneService->getTotalFareData($filterConditions->toArray(), $search);
                }
                if (!empty($fares)) {
                    foreach ($fares as $fare) {
                        $status = '';
                        if ($fare->is_active) {
                            $status = 'checked';
                        }
                        $editRoute = route('admin.fares.edit', ['fareUuid' => $fare->uuid, 'uuid' => $uuid ?? null]);
                        $index++;
                        $nestedData['sr'] = '<p>' . $index . '</p>';
                        $nestedData['id'] = $index;
                        // $nestedData['type'] = $fare->category?->name;
                        $nestedData['type'] = $fare->category?->name;
                        $nestedData['price'] = $fare->rate_per_km;
                        $nestedData['time'] = 'Start:- ' . customTime($fare->start) . '<br />' . 'End:- ' . customTime($fare->end);
                        $nestedData['fare_type'] = $fare->fare_for ? implode(',', $fare->fare_for) : '';
                        $nestedData['status'] = '
                            <div class="">
                            <label class="switch">
                            <input type="checkbox" class="changeStatus" id="switchery_inline1' . $fare->uuid . '" name="is_active"' . $status . ' data-uuid="' . $fare->uuid . '" data-table="km_fares" data-message="deactive">
                            <span class="slider round"></span>
                        </label>
                         </div>';
                        $nestedData['action'] = '<div class="dropdown btn_action">
                                                <button class="dropdown-toggle" type="button"
                                                    id="dropdownMenuButton1" data-toggle="dropdown"
                                                    aria-expanded="false">
                                                    <i class="fa-solid fa-gear"></i>
                                                </button><ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">';
                        $nestedData['action'] .= '<li>
                                                    <a class="dropdown-item" href="' . $editRoute . '"><span><i
                                                    class="fa-regular fa-pen-to-square"></i></span>Edit</a>
                                                </li>';
                        $nestedData['action'] .= '<li>
                                                    <a class="dropdown-item deleteData" data-uuid="' . $fare->uuid . '" href="javascript:void(0)" data-table="km_fares"><span><i
                                                    class="fa-regular fa-trash-can"></i></span>Delete</a>
                                                </li>';
                        $nestedData['action'] .= '</ul></div>';
                        $data[] = $nestedData;
                        $nestedData = [];
                    }
                }
                $jsonData = array(
                    "draw" => (int) $request->input('draw'),
                    "recordsTotal" => (int) $totalData,
                    "recordsFiltered" => (int) $totalFiltered,
                    "data" => $data,
                );
                return response()->json($jsonData);
            } catch (\Exception $e) {
                logger($e->getMessage() . ' on ' . $e->getFile() . ' line number ' . $e->getLine());
                return array(
                    "draw" => (int) $request->input('draw'),
                    "recordsTotal" => (int) 0,
                    "recordsFiltered" => (int) 0,
                    "data" => []
                );
            }
        }
        abort(405);
    }




let fareDataColumn = [
    ...commonFirstDataColumn, ...
    [
        // { data: 'zone', name: 'zone', sClass: 'w-25' },
        { data: 'type', name: 'type', sClass: 'w-25' },
        { data: 'price', name: 'price', sClass: 'w-25' },
        { data: 'time', name: 'time', sClass: 'w-75' },
        { data: 'fare_type', name: 'fare_type', sClass: 'w-25' },
    ],
    ...commonLastDataColumn
];



let fareTable = $('#fareTable').DataTable({
    responsive: true,
    searching: false,
    lengthChange: false,
    "language": {
        lengthMenu: "Counts per page_MENU_",
        searchPlaceholder: "Search by name"
    },
    autoWidth: false,
    processing: true,
    serverSide: true,
    ajax: {
        url: baseUrl + 'ajax/getFares',
        dataType: "json",
        type: "get",
        data: function (d) {
            return $.extend({}, d, {
                "type": $(".type").val() ?? '',
                // "zone": $(".zone").val() ?? ''
            });
        },

    },
    columns: fareDataColumn,
    dom: '<".d-flex"<".col-6" l><".col-6 text-right" f>>t<".d-flex"<".col-6" i><".col-6 text-right"p>>',
    "ordering": true,
    "fnDrawCallback": function (oSettings) {
        let pagination = $(oSettings.nTableWrapper).find('.dataTables_paginate,.dataTables_info,.dataTables_length');
        oSettings._iDisplayLength > oSettings.fnRecordsDisplay() ? pagination.hide() : pagination.show();
    },
    "createdRow": function (row, data, dataIndex) {
        // console.log(data);
        $(row).addClass('manage-enable');
        if (data.is_active) {
            $(row).addClass('block-disable');
        }
        console.log(data.type);

    }
});
Correction this code add with rowspan "type "
ChatGPT said:
ChatGPT
To apply rowspan to the "type" column in your DataTable, we need to modify the createdRow function to manage the merging of rows based on duplicate values of type. DataTables doesn't natively support rowspan, so we'll handle this manually after the rows are rendered.

Here's how you can update the code to implement rowspan for the "type" column:

Steps:
Track duplicates of data.type.
Apply rowspan to the first occurrence of each type value.
Remove the type cell for subsequent rows (which are now spanned).
Updated Code with rowspan for "type":
javascript
Copy code
let fareTable = $('#fareTable').DataTable({
    responsive: true,
    searching: false,
    lengthChange: false,
    "language": {
        lengthMenu: "Counts per page_MENU_",
        searchPlaceholder: "Search by name"
    },
    autoWidth: false,
    processing: true,
    serverSide: true,
    ajax: {
        url: baseUrl + 'ajax/getFares',
        dataType: "json",
        type: "get",
        data: function (d) {
            return $.extend({}, d, {
                "type": $(".type").val() ?? '',
            });
        },
    },
    columns: [
        { data: 'type', name: 'type', sClass: 'w-25' },  // 'type' column
        { data: 'price', name: 'price', sClass: 'w-25' },
        { data: 'time', name: 'time', sClass: 'w-75' },
        { data: 'fare_type', name: 'fare_type', sClass: 'w-25' },
    ],
    dom: '<".d-flex"<".col-6" l><".col-6 text-right" f>>t<".d-flex"<".col-6" i><".col-6 text-right"p>>',
    "ordering": true,
    "fnDrawCallback": function (oSettings) {
        let pagination = $(oSettings.nTableWrapper).find('.dataTables_paginate,.dataTables_info,.dataTables_length');
        oSettings._iDisplayLength > oSettings.fnRecordsDisplay() ? pagination.hide() : pagination.show();
    },
    "createdRow": function (row, data, dataIndex) {
        $(row).addClass('manage-enable');
        if (data.is_active) {
            $(row).addClass('block-disable');
        }
    },
    "drawCallback": function (settings) {
        // Create a map to store the rowspan count for each unique type
        let api = this.api();
        let rows = api.rows({ page: 'current' }).nodes(); // Get all rows for the current page
        let last = null; // To keep track of the last seen 'type'

        // Loop through each row and check for duplicate 'type'
        api.column(0, { page: 'current' }).data().each(function (type, i) {
            if (last !== type) {
                // Count how many rows have the same 'type'
                let count = api.column(0, { page: 'current' }).data().filter(function (value) {
                    return value === type;
                }).length;

                // Apply rowspan to the first occurrence
                $(rows).eq(i).find('td:first').attr('rowspan', count);

                // Remember the last type to compare
                last = type;
            } else {
                // Remove the 'type' cell from subsequent rows to merge them
                $(rows).eq(i).find('td:first').remove();
            }
        });
    }
});

*******************************************************
*******************************************************
*******************************************************
*******************************************************
*******************************************************
*******************************************************
