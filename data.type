  public function getFares(Request $request, $uuid = null)
    {
        if ($request->ajax()) {
            try {
                $filterConditions = collect([]);
                if ($request->type) {
                    $filterConditions = $filterConditions->merge(['category_id' => uuidtoid($request->type, 'categories')]);
                }
                if ($request->zone) {
                    $filterConditions = $filterConditions->merge(['zone_id' => uuidtoid($request->zone, 'zones')]);
                }
                $totalData = $this->zoneService->getTotalFareData($filterConditions->toArray());
                $totalFiltered = $totalData;
                $limit = $request->input('length');
                $start = $request->input('start');
                $order = 'category_id';
                $dir = 'desc';
                $index = $start;
                $nestedData = [];
                $data = [];
                if (empty($request->input('search.value'))) {
                    $fares = $this->zoneService->getListofZoneFares($filterConditions->toArray(), $start, $limit, $order, $dir);
                } else {
                    $search = $request->input('search.value');
                    $fares = $this->zoneService->getListofZoneFares($filterConditions->toArray(), $start, $limit, $order, $dir, $search);
                    $totalFiltered = $this->zoneService->getTotalFareData($filterConditions->toArray(), $search);
                }
                if (!empty($fares)) {
                    foreach ($fares as $fare) {
                        $status = '';
                        if ($fare->is_active) {
                            $status = 'checked';
                        }
                        $editRoute = route('admin.fares.edit', ['fareUuid' => $fare->uuid, 'uuid' => $uuid ?? null]);
                        $index++;
                        $nestedData['sr'] = '<p>' . $index . '</p>';
                        $nestedData['id'] = $index;
                        // $nestedData['type'] = $fare->category?->name;
                        $nestedData['type'] = $fare->category?->name;
                        $nestedData['price'] = $fare->rate_per_km;
                        $nestedData['time'] = 'Start:- ' . customTime($fare->start) . '<br />' . 'End:- ' . customTime($fare->end);
                        $nestedData['fare_type'] = $fare->fare_for ? implode(',', $fare->fare_for) : '';
                        $nestedData['status'] = '
                            <div class="">
                            <label class="switch">
                            <input type="checkbox" class="changeStatus" id="switchery_inline1' . $fare->uuid . '" name="is_active"' . $status . ' data-uuid="' . $fare->uuid . '" data-table="km_fares" data-message="deactive">
                            <span class="slider round"></span>
                        </label>
                         </div>';
                        $nestedData['action'] = '<div class="dropdown btn_action">
                                                <button class="dropdown-toggle" type="button"
                                                    id="dropdownMenuButton1" data-toggle="dropdown"
                                                    aria-expanded="false">
                                                    <i class="fa-solid fa-gear"></i>
                                                </button><ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">';
                        $nestedData['action'] .= '<li>
                                                    <a class="dropdown-item" href="' . $editRoute . '"><span><i
                                                    class="fa-regular fa-pen-to-square"></i></span>Edit</a>
                                                </li>';
                        $nestedData['action'] .= '<li>
                                                    <a class="dropdown-item deleteData" data-uuid="' . $fare->uuid . '" href="javascript:void(0)" data-table="km_fares"><span><i
                                                    class="fa-regular fa-trash-can"></i></span>Delete</a>
                                                </li>';
                        $nestedData['action'] .= '</ul></div>';
                        $data[] = $nestedData;
                        $nestedData = [];
                    }
                }
                $jsonData = array(
                    "draw" => (int) $request->input('draw'),
                    "recordsTotal" => (int) $totalData,
                    "recordsFiltered" => (int) $totalFiltered,
                    "data" => $data,
                );
                return response()->json($jsonData);
            } catch (\Exception $e) {
                logger($e->getMessage() . ' on ' . $e->getFile() . ' line number ' . $e->getLine());
                return array(
                    "draw" => (int) $request->input('draw'),
                    "recordsTotal" => (int) 0,
                    "recordsFiltered" => (int) 0,
                    "data" => []
                );
            }
        }
        abort(405);
    }




let fareDataColumn = [
    ...commonFirstDataColumn, ...
    [
        // { data: 'zone', name: 'zone', sClass: 'w-25' },
        { data: 'type', name: 'type', sClass: 'w-25' },
        { data: 'price', name: 'price', sClass: 'w-25' },
        { data: 'time', name: 'time', sClass: 'w-75' },
        { data: 'fare_type', name: 'fare_type', sClass: 'w-25' },
    ],
    ...commonLastDataColumn
];



let fareTable = $('#fareTable').DataTable({
    responsive: true,
    searching: false,
    lengthChange: false,
    "language": {
        lengthMenu: "Counts per page_MENU_",
        searchPlaceholder: "Search by name"
    },
    autoWidth: false,
    processing: true,
    serverSide: true,
    ajax: {
        url: baseUrl + 'ajax/getFares',
        dataType: "json",
        type: "get",
        data: function (d) {
            return $.extend({}, d, {
                "type": $(".type").val() ?? '',
                // "zone": $(".zone").val() ?? ''
            });
        },

    },
    columns: fareDataColumn,
    dom: '<".d-flex"<".col-6" l><".col-6 text-right" f>>t<".d-flex"<".col-6" i><".col-6 text-right"p>>',
    "ordering": true,
    "fnDrawCallback": function (oSettings) {
        let pagination = $(oSettings.nTableWrapper).find('.dataTables_paginate,.dataTables_info,.dataTables_length');
        oSettings._iDisplayLength > oSettings.fnRecordsDisplay() ? pagination.hide() : pagination.show();
    },
    "createdRow": function (row, data, dataIndex) {
        // console.log(data);
        $(row).addClass('manage-enable');
        if (data.is_active) {
            $(row).addClass('block-disable');
        }
        console.log(data.type);

    }
});

*******************************************************
*******************************************************
*******************************************************
*******************************************************
*******************************************************
*******************************************************
*******************************************************
