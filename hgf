  public function filterData(Request $request)
    {
        $name = $request->name;
        $latitude = $request->lat;
        $longitude = $request->long;
        $maxDistance = $request->distance;
        $fees = $request->fees;
        // $fees = [6,2];
        $specialist = $request->specialist;
        $sort = $request->sort;

        $data = User::with('doctorProfile', 'doctorsCategories')
            ->where('type', 'doctor')
            ->where('is_active', 1)
            ->where('name', 'like', '%' . $name . '%');

        if (isset($specialist) && !empty($specialist)) {
            $data->whereHas('doctorsCategories', function ($query) use ($specialist) {
                $query->whereIn('id', $specialist);
            });
        }

        if (isset($sort) && !empty($sort)) {
            switch ($sort) {
                case 1:
                    $query = $data->orderBy('name', 'asc');
                    break;
                case 2:
                    $query = $data->orderBy('name', 'desc');
                    break;
                case 3:
                    $query = $data->orderBy('name', 'desc');
                    break;
                case 4:
                    $query = $data->whereHas('doctorProfile', function ($q) {
                        $q->orderBy('price', 'asc');
                    });
                    break;
                case 5:
                    $query = $data->whereHas('doctorProfile', function ($q) {
                        $q->orderBy('price', 'desc');
                    });
                    break;
            }
            $data = $query;
        }

        if (isset($fees) && !empty($fees)) {
            foreach ($fees as $key => $fee) {
                switch ($fee) {
                    case 1:
                        $min = 0;
                        $max = 200;
                        break;
                    case 2:
                        $min = 200;
                        $max = 500;
                        break;
                    case 3:
                        $min = 500;
                        $max = 800;
                        break;
                    case 4:
                        $min = 800;
                        $max = 1100;
                        break;
                    case 5:
                        $min = 1100;
                        $max = 1400;
                        break;
                    case 6:
                        $min = 1400;
                        $max = 999999999;
                        break;
                }
                $data->whereHas('doctorProfile', function ($q) use ($min, $max) {
                    $q->whereBetween('price', [$min, $max]);
                });
            }
        }

        // $data->doctorProfile->when($fees, function ($q) use ($fees) {
        //     dd($q);
        //     return $q;
        // });

        // $data = $data->doctorProfile;
        // $data->when($toDate, function ($q) use ($toDate) {
        //     return $q->whereDate('end_date', '<=', $toDate);
        // });

        // ->when('doctorAssignmentClinics', function ($query) use ($latitude, $longitude, $maxDistance) {
        //     $query->profile_clinics;
        //     // $query->withinDistance($latitude, $longitude, $maxDistance);
        //     // $query->calculateDistance($latitude, $longitude, $maxDistance);
        // })
        // ->get();
        $data = $data->get();

        return $this->responseJson(true, 200, 'Doctor List Found Successfully', DoctorResource::collection($data));

        // dd($data);
        // return response()->json(['data' => $data]);
    }
