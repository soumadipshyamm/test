bcf774f5bfcd145f3932055d
















To send push notifications using Firebase via **cURL** in Laravel, you can create a reusable function or implement it in a Laravel Job for sending notifications in the background. Here’s how to use Firebase with cURL to send a notification to 100 users at once:

---

### **1. Create a Helper Function or Job**
You can write a reusable function in a helper file or directly within a Laravel Job.

#### Example Helper Function:
Add this to a helper file, e.g., `app/Helpers/CommonHelper.php`:

```php
<?php

if (!function_exists('sendPushNotification')) {
    function sendPushNotification($title, $body, $tokens)
    {
        $serverKey = 'YOUR_FIREBASE_SERVER_KEY'; // Replace with your Firebase server key
        $url = 'https://fcm.googleapis.com/fcm/send';

        $headers = [
            'Authorization: key=' . $serverKey,
            'Content-Type: application/json',
        ];

        // Split tokens into batches of 100 (Firebase limit is 500, but smaller batches are better for reliability)
        $chunks = array_chunk($tokens, 100);

        foreach ($chunks as $tokenBatch) {
            $payload = [
                'registration_ids' => $tokenBatch,
                'notification' => [
                    'title' => $title,
                    'body' => $body,
                ],
            ];

            $ch = curl_init();

            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));

            $response = curl_exec($ch);

            if ($response === false) {
                \Log::error('Firebase cURL error: ' . curl_error($ch));
            } else {
                \Log::info('Firebase Response: ' . $response);
            }

            curl_close($ch);
        }
    }
}
```

---

### **2. Dispatch the Notifications**
From your controller or service, call the `sendPushNotification` function with the title, body, and array of tokens.

#### Example in a Controller:
```php
public function sendBatchNotification()
{
    $title = "Bulk Notification";
    $body = "This is a bulk push notification to 100 users.";
    
    // Array of 100 device tokens (replace with actual tokens)
    $tokens = [
        'TOKEN_1',
        'TOKEN_2',
        'TOKEN_3',
        // ... up to 100 tokens
    ];

    // Call the helper function
    sendPushNotification($title, $body, $tokens);

    return response()->json(['status' => 'Bulk notifications sent!']);
}
```

---

### **3. Send Notifications in the Background Using a Job**
If you want to use a **Job** instead of a helper function to send notifications in the background:

#### Step 1: Create a Job
```bash
php artisan make:job SendPushNotification
```

#### Step 2: Implement the Logic
In the `handle()` method of the job, use the cURL logic:

```php
<?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;

class SendPushNotification implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    protected $title;
    protected $body;
    protected $tokens;

    public function __construct($title, $body, $tokens)
    {
        $this->title = $title;
        $this->body = $body;
        $this->tokens = $tokens;
    }

    public function handle()
    {
        $serverKey = 'YOUR_FIREBASE_SERVER_KEY'; // Replace with your Firebase server key
        $url = 'https://fcm.googleapis.com/fcm/send';

        $headers = [
            'Authorization: key=' . $serverKey,
            'Content-Type: application/json',
        ];

        $chunks = array_chunk($this->tokens, 100);

        foreach ($chunks as $tokenBatch) {
            $payload = [
                'registration_ids' => $tokenBatch,
                'notification' => [
                    'title' => $this->title,
                    'body' => $this->body,
                ],
            ];

            $ch = curl_init();

            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));

            $response = curl_exec($ch);

            if ($response === false) {
                \Log::error('Firebase cURL error: ' . curl_error($ch));
            } else {
                \Log::info('Firebase Response: ' . $response);
            }



###########₹₹₹₹₹₹₹₹₹$₹"₹₹₹#

To send 100 push notifications to a user at once in Laravel using Firebase Cloud Messaging (FCM), you can batch the notifications within a **job queue** to handle them in the background. This is efficient and prevents overwhelming the server by sending a large number of notifications synchronously.

Here’s how you can do it:

---

### **1. Modify the Job Class to Handle Multiple Tokens**
You will send notifications to a batch of 100 tokens at once. Update your job to accept an array of tokens.

#### `app/Jobs/SendPushNotification.php`
```php
<?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Kreait\Firebase\Factory;

class SendPushNotification implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    protected $title;
    protected $body;
    protected $tokens; // Array of device tokens

    /**
     * Create a new job instance.
     *
     * @return void
     */
    public function __construct($title, $body, array $tokens)
    {
        $this->title = $title;
        $this->body = $body;
        $this->tokens = $tokens; // Accept an array of tokens
    }

    /**
     * Execute the job.
     *
     * @return void
     */
    public function handle()
    {
        $firebase = (new Factory)
            ->withServiceAccount(storage_path('firebase/firebase_credentials.json'))
            ->createMessaging();

        $message = [
            'notification' => [
                'title' => $this->title,
                'body' => $this->body,
            ],
        ];

        // Loop through the tokens and send a notification to each batch of 100 tokens
        $chunks = array_chunk($this->tokens, 100); // Split tokens into batches of 100

        foreach ($chunks as $tokenBatch) {
            try {
                $firebase->sendMulticast(array_merge($message, ['tokens' => $tokenBatch]));
            } catch (\Exception $e) {
                \Log::error("Failed to send push notification: " . $e->getMessage());
            }
        }
    }
}
```

---

### **2. Dispatch the Job with 100 Tokens**
When you want to send 100 notifications at once, you can dispatch the job with a list of tokens. You can pass an array of tokens when dispatching the job.

#### Example in Controller:
```php
use App\Jobs\SendPushNotification;

public function sendBatchNotification()
{
    $title = "Bulk Notification";
    $body = "This is a bulk push notification to 100 users.";
    
    // Array of 100 device tokens (replace with actual tokens)
    $tokens = [
        'TOKEN_1',
        'TOKEN_2',
        'TOKEN_3',
        // ... add up to 100 tokens
    ];

    // Dispatch the job to send to 100 users at once
    SendPushNotification::dispatch($title, $body, $tokens);

    return response()->json(['status' => 'Bulk notifications queued!']);
}
```

---

### **3. Batch Processing with Queues**
Each time the job is dispatched, the notification will be sent to up to 100 users in a single batch. You can queue multiple jobs to handle more tokens if needed.

1. Ensure your queue is properly set up and running:
   ```bash
   php artisan queue:work
   ```

2. If needed, split your tokens into multiple jobs. You can loop through your user tokens, dispatching jobs for each batch of 100 tokens.

---

### **4. Handling Firebase Token Limits**
- **Firebase Multicast Limit:** Firebase allows up to 500 tokens per `sendMulticast()` request. We are using `array_chunk($this->tokens, 100)` to send in batches of 100, but you can adjust this based on Firebase limits.
  
---

### **5. Running the Job in Production**
In production, ensure your **queue worker** is running continuously using a process manager like **Supervisor**.

#### Example Supervisor Configuration:
1. Install Supervisor:
   ```bash
   sudo apt-get install supervisor
   ```

2. Create a configuration file, e.g., `/etc/supervisor/conf.d/laravel-worker.conf`:
   ```conf
   [program:laravel-worker]
   process_name=%(program_name)s_%(process_num)02d
   command=php /path-to-your-project/artisan queue:work --sleep=3 --tries=3
   autostart=true
   autorestart=true
   user=your-username
   numprocs=1
   redirect_stderr=true
   stdout_logfile=/path-to-your-project/storage/logs/worker.log
   ```

3. Reload and start Supervisor:
   ```bash
   sudo supervisorctl reread
   sudo supervisorctl update
   sudo supervisorctl start laravel-worker:*
   ```

---

### **6. Monitoring and Debugging**
- **Failed Jobs:** If notifications fail, you can monitor the logs or use Laravel's failed jobs table.
  ```bash
  php artisan queue:failed-table
  php artisan migrate
  ```

- **Retry Failed Jobs:**
  ```bash
  php artisan queue:retry all
  ```

---

### **Summary**
- Create a job class to handle Firebase notifications in batches.
- Dispatch the job with an array of up to 100 device tokens.
- Use `queue:work` to process the jobs in the background.
- Use **Supervisor** or a similar process manager in production to keep the queue worker running.

This approach efficiently handles sending push notifications to 100 users at once in Laravel. Let me know if you need any further help!


            curl_close($ch);
        }
    }
}
```



#### Step 3: Dispatch the Job
From your controller, dispatch the job:

```php
use App\Jobs\SendPushNotification;

public function sendBatchNotification()
{
    $title = "Bulk Notification";
    $body = "This is a bulk push notification to 100 users.";
    
    // Array of 100 device tokens (replace with actual tokens)
    $tokens = [
        'TOKEN_1',
        'TOKEN_2',
        'TOKEN_3',
        // ... up to 100 tokens
    ];

    // Dispatch the job
    SendPushNotification::dispatch($title, $body, $tokens);

    return response()->json(['status' => 'Bulk notifications queued!']);
}
```

---

### **4. Monitor Notifications**
- Run the queue worker:
  ```bash
  php artisan queue:work
  ```

- Use **failed jobs table** to track errors:
  ```bash
  php artisan queue:failed-table
  php artisan migrate
  ```

---

### **5. Firebase Multicast Limits**
Firebase allows up to **500 device tokens** per `registration_ids` request. If sending to more than 100 tokens, adjust the `array_chunk` size in the helper or job code to a maximum of 500.

---

This method ensures notifications are sent in batches using **cURL** and Laravel’s job queue for efficient background processing. Let me know if you need further clarification!


#####################₹
