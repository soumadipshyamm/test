shammilomash@gmail.com

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;

class FirebaseController extends Controller
{
    // Dummy function to get access token, replace with actual implementation
    private function getAccessToken()
    {
        // This function should retrieve and return a valid access token
        // For example, it might involve calling a Google API with client credentials to get the token
        return 'YOUR_ACCESS_TOKEN_HERE'; // Replace with the actual access token retrieval logic
    }

    public function addFirebase($projectId)
    {
        $accessToken = $this->getAccessToken();
        $uri = 'https://firebase.googleapis.com/v1beta1/projects/' . $projectId . ':addFirebase';

        $client = new Client();

        try {
            $response = $client->post($uri, [
                'headers' => [
                    'Authorization' => 'Bearer ' . $accessToken,
                    'Content-Type' => 'application/json',
                ],
            ]);

            $body = $response->getBody();
            $data = json_decode($body, true);

            return response()->json($data);
        } catch (RequestException $e) {
            if ($e->hasResponse()) {
                $response = $e->getResponse();
                $body = $response->getBody();
                $data = json_decode($body, true);
                return response()->json([
                    'error' => $data,
                ], $response->getStatusCode());
            } else {
                return response()->json([
                    'error' => 'Request failed: ' . $e->getMessage(),
                ], 500);
            }
        }
    }
}







use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;

function getAccessToken() {
    // Dummy function to get access token, replace with actual implementation
    // For example, you might call Google API with client credentials to get the token
    return 'YOUR_ACCESS_TOKEN_HERE'; // Replace with the actual access token retrieval logic
}

function addFirebase($projectId) {
    $accessToken = getAccessToken();
    $uri = 'https://firebase.googleapis.com/v1beta1/projects/' . $projectId . ':addFirebase';

    $client = new Client();

    try {
        $response = $client->request('POST', $uri, [
            'headers' => [
                'Authorization' => 'Bearer ' . $accessToken,
                'Content-Type' => 'application/json',
            ],
        ]);

        $body = $response->getBody();
        $content = $body->getContents();
        $data = json_decode($content, true);

        // Output the response
        print_r($data);
    } catch (RequestException $e) {
        // Catch request exceptions
        if ($e->hasResponse()) {
            $response = $e->getResponse();
            $statusCode = $response->getStatusCode();
            $errorMessage = $response->getBody()->getContents();
            echo "HTTP error! status: $statusCode, message: $errorMessage";
        } else {
            echo "Request error: " . $e->getMessage();
        }
    } catch (\Exception $e) {
        // Catch any other exceptions
        echo "Error: " . $e->getMessage();
    }
}

// Usage example
addFirebase('your-project-id');




const fetch = require('node-fetch');

async function addFirebase(projectId) {
  const accessToken = getAccessToken();
  const uri = 'https://firebase.googleapis.com/v1beta1/projects/' + projectId + ':addFirebase';
  const options = {
    method: 'POST',
    // Use a manual access token here since explicit user access token is required.
    headers: {
      'Authorization': 'Bearer ' + accessToken,
    },
  };

  try {
    const rawResponse = await fetch(uri, options);
    const resp = await rawResponse.json();
    console.log(resp);
  } catch(err) {
    console.error(err['message']);
  }
}











composer require kreait/firebase-php

require_DIR_.'/vendor/autoload.php'; '/vendor/autoload.php'; // path to autoload.php

use Kreait\Firebase\Factory; use Kreait\Firebase\ServiceAccount;

// Replace this with the path to your service account key JSON file $serviceAccount = ServiceAccount::fromJsonFile(_DIR.'/path/to/erviceAccountkey.json');

$ firebase = (new Factory)

->withServiceAccount($serviceAccount)

->create();

$messaging = $firebase->getMessaging();

// Generate an access token

try {

$accessToken = $messaging->getAccessToken(); echo "Access token: " $accessToken, "\n"; } catch (Exception $e) {

echo "Error: " e->getMessage():

<?php



// Replace with the path to your downloaded service account JSON file ScredentialsFilePath = './testing-5587a-firebase-adminsdk-csoea-311bb88fb3.json';

require _DIR_.'/vendor/autoload.php';

$client = new \Google_Client();

$client->setAuthConfig($credentialsFilePath);

$client->addScope('https://www.googleapis.com/auth/firebase.messaging');

try {

$token = $client->fetchAccessTokenWithAssertion();

echo "Access Token: " . $token ['access_token']. PHP_EOL;

echo "Expires in: ". $token ['expires_in'). seconds" PHP_EOL;

} catch (Exception $e) {

echo "Error fetching access token: $e->getMessage(). PHP_EOL;
