<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Customer Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .container {
            max-width: 600px;
            margin-top: 20px;
            border: 1px solid #ccc;
            padding: 20px;
            border-radius: 8px;
        }
        .header {
            font-weight: bold;
            text-align: center;
            margin-bottom: 20px;
        }
        .section {
            margin-bottom: 15px;
        }
        .section label {
            font-weight: bold;
        }
        .btn-group button {
            width: 100%;
        }
        .custom-textarea {
            height: 150px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">Customer Management</div>

        <!-- Search Section -->
        <div class="section">
            <label for="search">Search for Name, Address, Phone Number, Location #:</label>
            <input type="text" id="search" class="form-control" placeholder="Enter search details">
        </div>

        <!-- Customer Info -->
        <div class="section">
            <label for="customer-info">Customer Name (Last Name, First Name):</label>
            <textarea id="customer-info" class="form-control custom-textarea" placeholder="Customer details here"></textarea>
        </div>

        <!-- Call Back Section -->
        <div class="section">
            <label>Call Back</label>
            <div class="row">
                <div class="col">
                    <label for="follow-up">Follow up:</label>
                    <input type="date" id="follow-up" class="form-control">
                </div>
                <div class="col">
                    <label for="time">Time:</label>
                    <input type="time" id="time" class="form-control">
                </div>
            </div>
        </div>

        <!-- Auto Text Section -->
        <div class="section">
            <label for="auto-text">Auto Text:</label>
            <textarea id="auto-text" class="form-control" placeholder="Custom auto text"></textarea>
        </div>

        <!-- Action Buttons -->
        <div class="section btn-group">
            <button class="btn btn-primary mb-2">Customer</button>
            <button class="btn btn-secondary mb-2">Inspections</button>
            <button class="btn btn-success mb-2">Schedule</button>
            <button class="btn btn-warning mb-2">Leader Board</button>
            <button class="btn btn-danger">Callbacks</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>



public function customerCreate(Request $request)
{
    // Validate the incoming request data
    $validator = Validator::make($request->all(), [
        'name' => 'required|string|max:255',
        'email' => 'required|email|max:255',
        'mobile_number' => 'required|string|max:15',
        'profile_address' => 'nullable|string|max:255',
        'zip_code' => 'nullable|string|max:10',
        'city' => 'nullable|string|max:100',
        'state' => 'nullable|string|max:100',
        'country' => 'nullable|string|max:100',
        'alternate_mobile_number' => 'nullable|string|max:15',
        'building_number' => 'nullable|string|max:10',
        'street' => 'nullable|string|max:255',
        'unit_number' => 'nullable|string|max:10',
        'office' => 'nullable|string|max:100',
        'referral_type' => 'nullable|string|max:50',
        'ac_no' => 'nullable|string|max:20',
        'billing_zip_code' => 'nullable|string|max:10',
        'billing_city' => 'nullable|string|max:100',
        'billing_state' => 'nullable|string|max:100',
        'billing_country' => 'nullable|string|max:100',
        'billing_building_number' => 'nullable|string|max:10',
        'billing_street' => 'nullable|string|max:255',
        'billing_unit_number' => 'nullable|string|max:10',
        'billing_office' => 'nullable|string|max:100',
        'billing_ac_no' => 'nullable|string|max:20',
        'billing_bank_name' => 'nullable|string|max:100',
        'billing_ifsc_code' => 'nullable|string|max:15',
    ]);

    if ($validator->fails()) {
        return $this->responseJson(false, 422, $validator->errors()->first(), "");
    }

    try {
        DB::beginTransaction();

        // Check if the user ID exists in the request
        $isUpdate = $request->has('id') && !is_null($request->id);

        // Prepare user data
        $userData = $request->merge(['user_type' => 5])->except(['_token', '_method', 'id']);
        $user = $isUpdate
            ? $this->User->update($userData, $request->id)
            : $this->User->create($userData);

        if (!$user) {
            throw new \Exception('User creation/update failed.');
        }

        // Prepare profile data
        $profileData = $request->merge(['user_id' => $user->id])->except(['_token', '_method', 'id']);
        $profile = $isUpdate
            ? $this->Profile->update($profileData, $request->id)
            : $this->Profile->create($profileData);

        if (!$profile) {
            throw new \Exception('Profile creation/update failed.');
        }

        // Check and handle billing information
        if ($this->hasBillingInfo($request)) {
            $billingData = $request->merge(['user_id' => $user->id])->except(['_token', '_method', 'id']);
            $billing = $isUpdate
                ? $this->Billing->update($billingData, $request->id)
                : $this->Billing->create($billingData);

            if (!$billing) {
                throw new \Exception('Billing information creation/update failed.');
            }
        }

        DB::commit();
        return $this->responseJson(true, 200, "User created/updated successfully", new UserResource($user));
    } catch (\Exception $e) {
        DB::rollBack();
        return $this->responseJson(false, 500, 'Operation failed: ' . $e->getMessage());
    }
}

/**
 * Helper function to check if billing information is provided.
 */
private function hasBillingInfo(Request $request)
{
    return $request->filled([
        'billing_building_number',
        'billing_unit_number',
        'billing_country',
        'billing_state',
        'billing_city',
        'billing_zip_code',
        'billing_ac_no',
        'billing_office',
    ]);
}







public function customerCreate(Request $request)
    {
        // Validate the incoming request data
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|email|max:255',
            'mobile_number' => 'required|string|max:15',
            'profile_address' => 'nullable|string|max:255',
            'zip_code' => 'nullable|string|max:10',
            'city' => 'nullable|string|max:100',
            'state' => 'nullable|string|max:100',
            'country' => 'nullable|string|max:100',
            'alternate_mobile_number' => 'nullable|string|max:15',
            'building_number' => 'nullable|string|max:10',
            'street' => 'nullable|string|max:255',
            'unit_number' => 'nullable|string|max:10',
            'office' => 'nullable|string|max:100',
            'referral_type' => 'nullable|string|max:50',
            'ac_no' => 'nullable|string|max:20',
            'billing_zip_code' => 'nullable|string|max:10',
            'billing_city' => 'nullable|string|max:100',
            'billing_state' => 'nullable|string|max:100',
            'billing_country' => 'nullable|string|max:100',
            'billing_building_number' => 'nullable|string|max:10',
            'billing_street' => 'nullable|string|max:255',
            'billing_unit_number' => 'nullable|string|max:10',
            'billing_office' => 'nullable|string|max:100',
            'billing_ac_no' => 'nullable|string|max:20',
            'billing_bank_name' => 'nullable|string|max:100',
            'billing_ifsc_code' => 'nullable|string|max:15',
        ]);
        if ($validator->fails()) {
            return $this->responseJson(false, 422, $validator->errors()->first(), "");
        }

        try {
            DB::beginTransaction();
            // Prepare data for user creation
            if ($request->has('id') && $request->id !== null) {
                $userData = $request->merge(['user_type' => 5])->except(['_token', '_method']);
                $user = $this->User->update($userData, $request->id);
            }else{
                $userData = $request->merge(['user_type' => 5])->except(['_token', '_method', 'id']);
                $user = $this->User->create($userData);
            }

            if (!$user) {
                throw new \Exception('User creation failed.');
            }

            if ($request->has('id') && $request->id !== null) {
            // Prepare data for profile creation
                $profileData = $request->except(['_token', '_method']);
                $profile = $this->Profile->update($profileData, $request->id);
            }else{
                $profileData = $request->merge(['user_id' => $user->id])->except(['_token', '_method', 'id']);
                $profile = $this->Profile->create($profileData);
            }

            // Check if billing information is provided
            if ($this->hasBillingInfo($request)) {
                if ($request->has('id') && $request->id !== null) {
                $billingData = $request->except(['_token', '_method']);
                $billing = $this->Billing->update($billingData, $request->id);
                }else{
                    $billingData = $request->merge(['user_id' => $user->id])->except(['_token', '_method', 'id']);
                    $billing = $this->Billing->create($billingData);
                }
                if (!$billing) {
                    throw new \Exception('Billing information creation failed.');
                }
            }

            DB::commit();
            return $this->responseJson(true, 200, "success", new UserResource($user));
        } catch (\Exception $e) {
            DB::rollBack();
            return $this->responseJson(false, 500, 'Creation failed: ' . $e->getMessage());
        }
    }
    // Helper function to check if billing information is provided
    private function hasBillingInfo(Request $request)
    {
        return $request->filled('billing_building_number') &&
            $request->filled('billing_unit_number') &&
            $request->filled('billing_country') &&
            $request->filled('billing_state') &&
            $request->filled('billing_city') &&
            $request->filled('billing_zip_code') &&
            $request->filled('billing_ac_no') &&
            $request->filled('billing_office');
    }
