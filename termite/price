
Here’s the updated version of your email:

---

**Subject:** Leave Request from March 3rd to March 7th  

Dear [Manager's Name],  

I hope you are doing well. I would like to formally request leave from March 3rd to March 7th as I will be attending my elder brother’s and childhood friend’s weddings. I will resume work on March 10th.

To ensure continuity in my absence, I kindly request that a resource be assigned to oversee my project. I will ensure a proper handover before my leave and remain available for any critical escalations if needed.

Please let me know if any further information is required. I appreciate your support and consideration.

Best regards,  
[Your Name]

---  

Let me know if this works for you or if you'd like any adjustments!








public function inspactionCreate(Request $request)
{
    // Convert start_datetime to Carbon instance
    $startDatetime = Carbon::parse($request->start_datetime);

    // If end_datetime is missing, set it to start_datetime + 1 hour
    $endDatetime = $request->end_datetime 
        ? Carbon::parse($request->end_datetime) 
        : $startDatetime->copy()->addHour();

    // Validate request data
    $validator = Validator::make([
        'customer_id' => $request->customer_id,
        'inspection_type_id' => $request->inspection_type_id,
        'inspoctor_id' => $request->inspoctor_id,
        'start_datetime' => $startDatetime,
        'end_datetime' => $endDatetime, // Ensured to be at least 1 hour after start
    ], [
        'customer_id' => 'required|exists:users,id',
        'inspection_type_id' => 'required',
        'inspoctor_id' => 'required|exists:users,id',
        'start_datetime' => 'required|date',
        'end_datetime' => 'required|date|after:start_datetime',
    ]);

    if ($validator->fails()) {
        return $this->responseJson(false, 422, $validator->errors()->first(), "");
    }

    // Check for conflicting inspection slots
    $findInspaction = $this->Inspaction->findByInspectionAlocation([
        'inspoctor_id' => $request->inspoctor_id,
        'start_datetime' => $startDatetime->format('Y-m-d H:i:s'),
        'end_datetime' => $endDatetime->format('Y-m-d H:i:s'),
    ]);

    DB::beginTransaction();
    try {
        if (!$findInspaction) {
            if ($request->has('id') && !is_null($request->id)) {
                $isUpdated = $this->Inspaction->updateInspaction([
                    'customer_id' => $request->customer_id,
                    'inspection_type_id' => $request->inspection_type_id,
                    'inspoctor_id' => $request->inspoctor_id,
                    'start_datetime' => $startDatetime->format('Y-m-d H:i:s'),
                    'end_datetime' => $endDatetime->format('Y-m-d H:i:s'),
                ], $request->id);

                $result = $isUpdated ? new InspactionResource($isUpdated) : [];
                $message = "Successfully updated Inspection.";
            } else {
                $isCreated = $this->Inspaction->createInspaction([
                    'customer_id' => $request->customer_id,
                    'inspection_type_id' => $request->inspection_type_id,
                    'inspoctor_id' => $request->inspoctor_id,
                    'start_datetime' => $startDatetime->format('Y-m-d H:i:s'),
                    'end_datetime' => $endDatetime->format('Y-m-d H:i:s'),
                ]);

                $result = $isCreated ? new InspactionResource($isCreated) : [];
                $message = "Successfully created Inspection.";
            }
        } else {
            $message = "There is already a scheduled appointment for this time.";
            $result = $findInspaction;
        }

        DB::commit();
        return $this->responseJson(true, 200, $message, $result);
    } catch (\Exception $e) {
        DB::rollBack();
        return $this->responseJson(false, 500, 'Booking creation failed: ' . $e->getMessage());
    }
}

public function inspactionCreate(Request $request)
{
    // Validate input data
    $validator = Validator::make($request->all(), [
        'customer_id' => 'required|exists:users,id',
        'inspection_type_id' => 'required|exists:inspection_types,id', // Assuming valid inspection types
        'inspoctor_id' => 'required|exists:users,id',
        'start_datetime' => 'required|date_format:Y-m-d H:i:s',
        'end_datetime' => 'required|date_format:Y-m-d H:i:s|after:start_datetime',
    ]);

    if ($validator->fails()) {
        return $this->responseJson(false, 422, $validator->errors()->first());
    }

    // Check for overlapping bookings
    $conflict = $this->Inspaction->findByInspectionAlocation($request->only(['inspoctor_id', 'start_datetime', 'end_datetime']));

    if ($conflict) {
        return $this->responseJson(false, 409, "There is already a scheduled appointment for this time.", $conflict);
    }

    DB::beginTransaction();
    try {
        // If ID exists, update; otherwise, create a new entry
        $inspection = $request->has('id') && $request->id 
            ? $this->Inspaction->updateInspaction($request->except(['_token']))
            : $this->Inspaction->createInspaction($request->except(['_token', 'id']));

        if (!$inspection) {
            throw new \Exception("Inspection could not be saved.");
        }

        DB::commit();
        return $this->responseJson(true, 200, "Successfully " . ($request->has('id') ? "updated" : "created") . " Inspection.", new InspactionResource($inspection));
    } catch (\Exception $e) {
        DB::rollBack();
        return $this->responseJson(false, 500, "Booking creation failed: " . $e->getMessage());
    }
}






public function inspactionCreate(Request $request)
    {
        $result=[];
        $message="";
        // dd($request->all());
        $validator = Validator::make($request->all(), [
            'customer_id' => 'required|exists:users,id',
            'inspection_type_id' => 'required',
            'inspoctor_id' => 'required|exists:users,id',
            'start_datetime' => 'required|date',
            'end_datetime' => 'required|date|after:start_datetime',
        ]);

        if ($validator->fails()) {
            return $this->responseJson(false, 422, $validator->errors()->first(), "");
        }
        $findInspaction = $this->Inspaction->findByInspectionAlocation($request->except(['_token']));
        // dd( $findInspaction);

        DB::beginTransaction();
        try {
            if(!$findInspaction){
                if ($request->has('id') && $request->id !== null) {
                    $isUpdated = $this->Inspaction->updateInspaction($request->except(['_token']), $request->id);
                    $result = $isUpdated ? new InspactionResource($isUpdated) : [];
                    $message = "Successfully updated Inspaction.";
                } else {
                        $isCreated = $this->Inspaction->createInspaction($request->except(['_token', 'id']));
                        $result = $isCreated ? new InspactionResource($isCreated) : [];
                        $message = "Successfully created Inspaction.";
                }
            }else{
                $message="There is already a scheduled appointment for this time";
                $result =$findInspaction;
            }
            DB::commit();
            return $this->responseJson(true, 200, $message, $result);
        } catch (\Exception $e) {
            // Rollback transaction in case of error
            DB::rollBack();
            return $this->responseJson(false, 500, 'Booking creation failed: ' . $e->getMessage());
        }
    }


use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        // Services Table (Base Table for All Services)
        Schema::create('services', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->text('description')->nullable();
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });

        // Pricing Plans Table (To Support Different Price Tiers)
        Schema::create('pricing_plans', function (Blueprint $table) {
            $table->id();
            $table->foreignId('service_id')->constrained()->onDelete('cascade');
            $table->decimal('initial_price', 10, 2)->nullable();
            $table->decimal('recurring_price', 10, 2)->nullable();
            $table->enum('recurring_type', ['monthly', 'annual', 'one-time'])->default('one-time');
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });

        // Standalone Options Table (Extra Services)
        Schema::create('standalone_options', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->text('description')->nullable();
            $table->decimal('price', 10, 2)->nullable();
            $table->enum('status', ['included', 'upon_request', 'waived'])->nullable();
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });

        // Users' Selected Services Table (Dynamic User-based Service Selection)
        Schema::create('user_services', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('pricing_plan_id')->constrained('pricing_plans')->onDelete('cascade');
            $table->boolean('is_selected')->default(false);
            $table->boolean('is_scheduled')->default(false);
            $table->date('scheduled_date')->nullable();
            $table->enum('status', ['pending', 'active', 'completed', 'canceled'])->default('pending');
            $table->timestamps();
        });

        // Users' Selected Standalone Options Table
        Schema::create('user_standalone_options', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('option_id')->constrained('standalone_options')->onDelete('cascade');
            $table->boolean('is_selected')->default(false);
            $table->boolean('is_scheduled')->default(false);
            $table->date('scheduled_date')->nullable();
            $table->enum('status', ['pending', 'active', 'completed', 'canceled'])->default('pending');
            $table->timestamps();
        });

        // Transactions Table (For Payments and Status Tracking)
        Schema::create('transactions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('service_id')->nullable()->constrained('services')->onDelete('set null');
            $table->foreignId('option_id')->nullable()->constrained('standalone_options')->onDelete('set null');
            $table->decimal('amount', 10, 2);
            $table->enum('payment_status', ['pending', 'paid', 'failed', 'refunded'])->default('pending');
            $table->string('payment_method')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('transactions');
        Schema::dropIfExists('user_standalone_options');
        Schema::dropIfExists('user_services');
        Schema::dropIfExists('standalone_options');
        Schema::dropIfExists('pricing_plans');
        Schema::dropIfExists('services');
    }
};









array:5 [ // app\Http\Controllers\User\CustomerController.php:326
  "_token" => "1Vt5Ps028DVNHOXR9pYuA7R1ffYHMglVJ7baWhcG"
  "uuid" => "931a38c1-ba79-4438-b048-fdb03597daa1"
  "servicePlans" => array:3 [
    "drywood_subterranean" => array:5 [
      "servicePlanCheckbox" => "drywood_subterranean"
      "initial_price" => "618"
      "reoccurring" => "Debitis dolorem sit"
      "renewal" => "month"
      "status" => "1"
    ]
    "drywood" => array:3 [
      "initial_price" => "805"
      "reoccurring" => "Reprehenderit possi"
      "renewal" => "month"
    ]
    "subterranean" => array:4 [
      "servicePlanCheckbox" => "subterranean"
      "initial_price" => "855"
      "reoccurring" => "Aut ipsam commodo cu"
      "renewal" => "month"
    ]
  ]
  "standalone_options" => array:9 [
    "fumigation" => array:2 [
      "type" => "fumigation"
      "initialPrice" => "189"
    ]
    "preventive" => array:1 [
      "initialPrice" => "244"
    ]
    "one_time_local" => array:2 [
      "type" => "one_time_local"
      "initialPrice" => "189"
    ]
    "wood_repairs" => array:2 [
      "initialPrice" => "595"
      "status" => "1"
    ]
    "tile_warranty" => array:4 [
      "type" => "tile_warranty"
      "initialPrice" => "967"
      "duration" => null
      "status" => "1"
    ]
    "insulation" => array:2 [
      "type" => "insulation"
      "initialPrice" => "678"
    ]
    "inspection_fee" => array:1 [
      "initialPrice" => "151"
    ]
    "other" => array:3 [
      "type" => "other"
      "initialPrice" => "104"
      "description" => "Excepturi sunt cumq"
    ]
    "discounts" => array:2 [
      "type" => "discounts"
      "initialPrice" => "606"
    ]
  ]
  "services_other_option" => array:7 [
    "option" => null
    "other" => null
    "office" => null
    "documents" => null
    "email_wdo_report" => "1"
    "email_pricing" => "1"
    "escrow_inspection" => "1"
  ]
]









array:3 [ // app\Http\Controllers\User\CustomerController.php:326
  "drywood_subterranean" => array:5 [
    "servicePlanCheckbox" => "drywood_subterranean"
    "initial_price" => "618"
    "reoccurring" => "Debitis dolorem sit"
    "renewal" => "month"
    "status" => "1"
  ]
  "drywood" => array:3 [
    "initial_price" => "805"
    "reoccurring" => "Reprehenderit possi"
    "renewal" => "month"
  ]
  "subterranean" => array:4 [
    "servicePlanCheckbox" => "subterranean"
    "initial_price" => "855"
    "reoccurring" => "Aut ipsam commodo cu"
    "renewal" => "month"
  ]
]
array:9 [ // app\Http\Controllers\User\CustomerController.php:326
  "fumigation" => array:2 [
    "type" => "fumigation"
    "initialPrice" => "189"
  ]
  "preventive" => array:1 [
    "initialPrice" => "244"
  ]
  "one_time_local" => array:2 [
    "type" => "one_time_local"
    "initialPrice" => "189"
  ]
  "wood_repairs" => array:2 [
    "initialPrice" => "595"
    "status" => "1"
  ]
  "tile_warranty" => array:4 [
    "type" => "tile_warranty"
    "initialPrice" => "967"
    "duration" => null
    "status" => "1"
  ]
  "insulation" => array:2 [
    "type" => "insulation"
    "initialPrice" => "678"
  ]
  "inspection_fee" => array:1 [
    "initialPrice" => "151"
  ]
  "other" => array:3 [
    "type" => "other"
    "initialPrice" => "104"
    "description" => "Excepturi sunt cumq"
  ]
  "discounts" => array:2 [
    "type" => "discounts"
    "initialPrice" => "606"
  ]
]
array:7 [ // app\Http\Controllers\User\CustomerController.php:326
  "option" => null
  "other" => null
  "office" => null
  "documents" => null
  "email_wdo_report" => "1"
  "email_pricing" => "1"
  "escrow_inspection" => "1"
]
