
$serviceMappings = [
    // Subscription Services (type 0)
    'drywood-and-subterranean-subscription' => 'drywood_and_subterranean',
    'drywood-only-subscription' => 'dry_wood',
    'subterranean-only' => 'subterranean',

    // One-Time Services (type 1)
    'fumigation' => 'fumigation',
    'tile-warranty' => 'tile_warranty',
    'fume-tile' => 'other_description',
    'preventive-treatment' => 'preventive',
    'one-time-local-treat' => 'one_time_local',
    'wood-repairs' => 'wood_repairs',
    'wdo-inspections' => 'inspection_fee',
    'insulation' => 'insulation',
    'bundle-discount' => 'discount_amount',
];

foreach ($combinedArray as $key => $subscription) {
    $serviceId = SubscriptionPlan::where('uuid', $subscription['service_uuid'])->first(['slug']);

    if (!$serviceId) {
        continue; // Skip iteration if service is not found
    }

    $slug = $serviceId->slug;

    if (isset($serviceMappings[$slug])) {
        $prefix = $serviceMappings[$slug];

        if ($subscription['type'] == 0) {
            // Subscription-based services
            $data["{$prefix}_service_plan_id"] = $datas['subscriptions']['service_uuid'];
            $data["{$prefix}_initial_price"] = $datas['subscriptions']['initial_price'];
            $data["{$prefix}_recurring_price"] = $datas['subscriptions']['renewal'];
            $data["{$prefix}_recurring_period"] = $datas['subscriptions']['reoccurring'];
        } elseif ($subscription['type'] == 1) {
            // One-time services
            $data["{$prefix}_id"] = $datas['subscriptions']['service_uuid'];
            $data["{$prefix}_price"] = $datas['subscriptions']['initial_price'];

            if ($slug === 'fume-tile') {
                $data["{$prefix}"] = $datas['subscriptions']['initial_price'];
            }
        }

        $data['status'] = $datas['subscriptions']['status'];
    }
}










// Mapping slugs to keys for easier assignment
$serviceMapping = [
    'drywood-and-subterranean-subscription' => [
        'key_prefix' => 'drywood_and_subterranean',
        'type' => 0
    ],
    'drywood-only-subscription' => [
        'key_prefix' => 'dry_wood',
        'type' => 0
    ],
    'subterranean-only' => [
        'key_prefix' => 'subterranean',
        'type' => 0
    ],
    'fumigation' => [
        'key' => 'fumigation',
        'type' => 1
    ],
    'tile-warranty' => [
        'key' => 'tile_warranty',
        'type' => 1
    ],
    'fume-tile' => [
        'key' => 'other_description',
        'type' => 1
    ],
    'preventive-treatment' => [
        'key' => 'preventive',
        'type' => 1
    ],
    'one-time-local-treat' => [
        'key' => 'one_time_local',
        'type' => 1
    ],
    'wood-repairs' => [
        'key' => 'wood_repairs',
        'type' => 1
    ],
    'wdo-inspections' => [
        'key' => 'inspection_fee',
        'type' => 1
    ],
    'insulation' => [
        'key' => 'insulation',
        'type' => 1
    ],
    'bundle-discount' => [
        'key' => 'discount_amount',
        'type' => 1
    ]
];

foreach ($combinedArray as $key => $subscription) {
    $serviceId = SubscriptionPlan::where('uuid', $subscription['service_uuid'])->first();

    if ($serviceId) {
        $slug = $serviceId->slug;
        
        // Check if the slug exists in the mapping array
        if (isset($serviceMapping[$slug])) {
            $serviceDetails = $serviceMapping[$slug];
            
            // Subscription type handling (0 for subscription services, 1 for one-time services)
            if ($subscription['type'] == $serviceDetails['type']) {
                $keyPrefix = $serviceDetails['key_prefix'] ?? $serviceDetails['key'];
                
                // For subscription services (type = 0)
                if ($subscription['type'] == 0) {
                    $data["{$keyPrefix}_service_plan_id"] = $datas['subscriptions']['service_uuid'];
                    $data["{$keyPrefix}_initial_price"] = $datas['subscriptions']['initial_price'];
                    $data["{$keyPrefix}_recurring_price"] = $datas['subscriptions']['renewal'];
                    $data["{$keyPrefix}_recurring_period"] = $datas['subscriptions']['reoccurring'];
                    $data['status'] = $datas['subscriptions']['status'];
                }
                
                // For one-time services (type = 1)
                if ($subscription['type'] == 1) {
                    $data["{$keyPrefix}_id"] = $datas['subscriptions']['service_uuid'];
                    $data["{$keyPrefix}_price"] = $datas['subscriptions']['initial_price'];
                    $data['status'] = $datas['subscriptions']['status'];
                }
            }
        }
    }
}









                foreach($combinedArray as $key => $subscription){
                $serviceId =SubscriptionPlan::where('uuid',$subscription['service_uuid'])->first();
                // $serviceId = uuidtoid($subscription['service_uuid'],'subscription_plans');
                // $data['customer_id'] = uuidtoid($datas['customer_uuid'],'users')??null;
                // $data['inspactor_id'] = auth()->user()->id??null;
                // $data['type'] = $datas['type']?? null;

                // dd($serviceId);
                if($subscription['type']==0 &&  $serviceId->slug =='drywood-and-subterranean-subscription'){
                // dd($serviceId);
                    $data['drywood_and_subterranean_service_plan_id']=$datas['subscriptions']['service_uuid'];
                    $data['drywood_and_subterranean_initial_price']=$datas['subscriptions']['initial_price'];
                    $data['drywood_and_subterranean_recurring_price']=$datas['subscriptions']['renewal'];
                    $data['drywood_and_subterranean_recurring_period']=$datas['subscriptions']['reoccurring'];
                    $data['status']=$datas['subscriptions']['status'];
                }
                if($subscription['type']==0 &&  $serviceId->slug =='drywood-only-subscription'){
                // dd($serviceId);
                    $data['dry_wood_service_plan_id']=$datas['subscriptions']['service_uuid'];
                    $data['dry_wood_initial_price']=$datas['subscriptions']['initial_price'];
                    $data['dry_wood_recurring_price']=$datas['subscriptions']['renewal'];
                    $data['dry_wood_recurring_period']=$datas['subscriptions']['reoccurring'];
                    $data['status']=$datas['subscriptions']['status'];
                }
                if($subscription['type']==0 &&  $serviceId->slug =='subterranean-only'){
                // dd($serviceId);
                    $data['subterranean_service_plan_id']=$datas['subscriptions']['service_uuid'];
                    $data['subterranean_initial_price']=$datas['subscriptions']['initial_price'];
                    $data['subterranean_recurring_price']=$datas['subscriptions']['renewal'];
                    $data['subterranean_recurring_period']=$datas['subscriptions']['reoccurring'];
                    $data['status']=$datas['subscriptions']['status'];
                }
                //one time service
                if($subscription['type']==1 &&  $serviceId->slug =='fumigation'){
                // dd($serviceId);
                    $data['fumigation_id']=$datas['subscriptions']['service_uuid'];
                    $data['fumigation_price']=$datas['subscriptions']['initial_price'];
                    $data['status']=$datas['subscriptions']['status'];
                }
                if($subscription['type']==1 &&  $serviceId->slug =='tile-warranty'){
                // dd($serviceId);
                    $data['tile_warranty_id']=$datas['subscriptions']['service_uuid'];
                    $data['tile_warranty_price']=$datas['subscriptions']['initial_price'];
                    $data['status']=$datas['subscriptions']['status'];
                }
                if($subscription['type']==1 &&  $serviceId->slug =='fume-tile'){
                // dd($serviceId);
                    $data['other_description_id']=$datas['subscriptions']['service_uuid'];
                    $data['other_description']=$datas['subscriptions']['initial_price'];
                    $data['other_price']=$datas['subscriptions']['initial_price'];
                    $data['status']=$datas['subscriptions']['status'];
                }
                if($subscription['type']==1 &&  $serviceId->slug =='preventive-treatment'){
                // dd($serviceId);
                    $data['preventive_id']=$datas['subscriptions']['service_uuid'];
                    $data['preventive_price']=$datas['subscriptions']['initial_price'];
                    $data['status']=$datas['subscriptions']['status'];
                }
                if($subscription['type']==1 &&  $serviceId->slug =='one-time-local-treat'){
                // dd($serviceId);
                    $data['one_time_local_id']=$datas['subscriptions']['service_uuid'];
                    $data['one_time_local_price']=$datas['subscriptions']['initial_price'];
                    $data['status']=$datas['subscriptions']['status'];
                }
                if($subscription['type']==1 &&  $serviceId->slug =='wood-repairs'){
                // dd($serviceId);
                    $data['wood_repairs_id']=$datas['subscriptions']['service_uuid'];
                    $data['wood_repairs_price']=$datas['subscriptions']['initial_price'];
                    $data['status']=$datas['subscriptions']['status'];
                }
                if($subscription['type']==1 &&  $serviceId->slug =='wdo-inspections'){
                // dd($serviceId);
                    $data['inspection_fee_id']=$datas['subscriptions']['service_uuid'];
                    $data['inspection_price']=$datas['subscriptions']['initial_price'];
                    $data['status']=$datas['subscriptions']['status'];
                }
                if($subscription['type']==1 &&  $serviceId->slug =='insulation'){
                // dd($serviceId);
                    $data['insulation_id']=$datas['subscriptions']['service_uuid'];
                    $data['insulation_price']=$datas['subscriptions']['initial_price'];
                    $data['status']=$datas['subscriptions']['status'];
                }
                if($subscription['type']==1 &&  $serviceId->slug =='bundle-discount'){
                // dd($serviceId);
                    $data['discount_amount_id']=$datas['subscriptions']['service_uuid'];
                    $data['discount_price']=$datas['subscriptions']['initial_price'];
                    $data['status']=$datas['subscriptions']['status'];
                }
            }











namespace App\Http\Controllers;

use App\Models\ServicePlan;
use Illuminate\Http\Request;

class ServicePlanController extends Controller
{
    public function store(Request $request)
    {
        // Validate request
        $validated = $request->validate([
            'customer_uuid' => 'required|uuid',
            'subscriptions' => 'nullable|array',
            'subscriptions.*.service_uuid' => 'required|uuid',
            'subscriptions.*.initial_price' => 'required|numeric',
            'subscriptions.*.status' => 'required|boolean',
            'subscriptions.*.reoccurring' => 'nullable|numeric',
            'subscriptions.*.renewal' => 'nullable|in:month,year',
            'subscriptions.*.type' => 'required|integer',

            'standalone_options' => 'nullable|array',
            'standalone_options.*.service_uuid' => 'required|uuid',
            'standalone_options.*.initial_price' => 'required|numeric',
            'standalone_options.*.status' => 'required|boolean',
            'standalone_options.*.type' => 'required|integer',
            'standalone_options.*.other_details' => 'nullable|string',
        ]);

        // Store data in the database
        $servicePlan = ServicePlan::create($validated);

        return response()->json([
            'message' => 'Service Plan created successfully',
            'data' => $servicePlan
        ], 201);
    }
}






array:4 [ // app\Services\Pricing\PricingService.php:47
  "customer_uuid" => "3f657489-3704-4afd-b829-99102a72f71f"
  "subscriptions" => array:3 [
    0 => array:6 [
      "service_uuid" => "615260bc-dfc0-4317-9010-032061f4ef26"
      "initial_price" => 100
      "status" => 1
      "reoccurring" => 50
      "renewal" => "month"
      "type" => 0
    ]
    1 => array:6 [
      "service_uuid" => "e6a60e90-8fa0-4975-b1e8-927c147771d3"
      "initial_price" => 200
      "status" => 0
      "reoccurring" => 0
      "renewal" => null
      "type" => 0
    ]
    2 => array:6 [
      "service_uuid" => "84bf19ea-e6a7-4545-acc9-198b2b6e73c7"
      "initial_price" => 200
      "status" => 0
      "reoccurring" => 0
      "renewal" => null
      "type" => 0
    ]
  ]
  "standalone_options" => array:9 [
    0 => array:4 [
      "service_uuid" => "631246b1-ed96-47ca-bbcc-d9b295a5b1db"
      "initial_price" => 200
      "status" => 1
      "type" => 1
    ]
    1 => array:4 [
      "service_uuid" => "db8aa8ef-d699-468f-a5da-dbd74d1c506b"
      "initial_price" => 200
      "status" => 1
      "type" => 1
    ]
    2 => array:5 [
      "service_uuid" => "9acce058-e6f5-442f-819b-cddd4772369a"
      "initial_price" => 200
      "other_details" => "wwwwwwwwwwwwww"
      "status" => 1
      "type" => 1
    ]
    3 => array:4 [
      "service_uuid" => "9acce058-e6f5-442f-819b-cddd4772369a"
      "initial_price" => 200
      "status" => 1
      "type" => 1
    ]
    4 => array:4 [
      "service_uuid" => "9acce058-e6f5-442f-819b-cddd4772369a"
      "initial_price" => 200
      "status" => 1
      "type" => 1
    ]
    5 => array:4 [
      "service_uuid" => "9acce058-e6f5-442f-819b-cddd4772369a"
      "initial_price" => 200
      "status" => 1
      "type" => 1
    ]
    6 => array:4 [
      "service_uuid" => "9acce058-e6f5-442f-819b-cddd4772369a"
      "initial_price" => 200
      "status" => 1
      "type" => 1
    ]
    7 => array:5 [
      "service_uuid" => "9acce058-e6f5-442f-819b-cddd4772369a"
      "initial_price" => 200
      "other_details" => "wwwwwwwwwwwwww"
      "status" => 1
      "type" => 1
    ]
    8 => array:4 [
      "service_uuid" => "9acce058-e6f5-442f-819b-cddd4772369a"
      "initial_price" => 200
      "status" => 1
      "type" => 1
    ]
  ]
]
  Schema::create('service_plans', function (Blueprint $table) {
            $table->id();
            $table->foreignId('customer_id')->nullable()->constrained('users')->cascadeOnDelete()->comment('Foreign key referencing the users table'); // User who owns the service
            $table->foreignId('inspactor_id')->nullable()->constrained('users')->cascadeOnDelete()->comment('Foreign key referencing the users table'); // User who owns the service

            $table->foreignId('drywood_and_subterranean_service_plan_id')->nullable()->constrained('subscription_plans')->cascadeOnDelete()->comment('Foreign key referencing the subscription_plans table'); // Subscription plan associated with the service
            // $table->string('drywood_and_subterranean_service_plan');
            $table->decimal('drywood_and_subterranean_initial_price', 8, 2);
            $table->decimal('drywood_and_subterranean_recurring_price', 8, 2);
            $table->enum('drywood_and_subterranean_recurring_period', ['month', 'year']);
            $table->boolean('status')->default(false);

            $table->foreignId('dry_wood_service_plan_id')->nullable()->constrained('subscription_plans')->cascadeOnDelete()->comment('Foreign key referencing the subscription_plans table'); // Subscription plan associated with the service
            // $table->string('dry_wood_service_plan');
            $table->decimal('dry_wood_initial_price', 8, 2);
            $table->decimal('dry_wood_recurring_price', 8, 2);
            $table->enum('dry_wood_recurring_period', ['month', 'year']);
            $table->boolean('status')->default(false);

            $table->foreignId('subterranean_service_plan_id')->nullable()->constrained('subscription_plans')->cascadeOnDelete()->comment('Foreign key referencing the subscription_plans table'); // Subscription plan associated with the service
            // $table->string('subterranean_service_plan');
            $table->decimal('subterranean_initial_price', 8, 2);
            $table->decimal('subterranean_recurring_price', 8, 2);
            $table->enum('subterranean_recurring_period', ['month', 'year']);
            $table->boolean('status')->default(false);

            $table->foreignId('fumigation_id')->nullable()->constrained('subscription_plans')->cascadeOnDelete()->comment('Foreign key referencing the subscription_plans table'); // Subscription plan associated with the service
            // $table->boolean('fumigation')->default(false);
            $table->decimal('fumigation_price', 8, 2)->nullable();
            $table->boolean('status')->default(false);

            $table->foreignId('preventive_id')->nullable()->constrained('subscription_plans')->cascadeOnDelete()->comment('Foreign key referencing the subscription_plans table'); // Subscription plan associated with the service
            // $table->boolean('preventive')->default(false);
            $table->decimal('preventive_price', 8, 2)->nullable();
            $table->boolean('status')->default(false);

            $table->foreignId('one_time_local_id')->nullable()->constrained('subscription_plans')->cascadeOnDelete()->comment('Foreign key referencing the subscription_plans table'); // Subscription plan associated with the service
            // $table->boolean('one_time_local')->default(false);
            $table->decimal('one_time_local_price', 8, 2)->nullable();
            $table->boolean('status')->default(false);

            $table->foreignId('wood_repairs_id')->nullable()->constrained('subscription_plans')->cascadeOnDelete()->comment('Foreign key referencing the subscription_plans table'); // Subscription plan associated with the service
            // $table->boolean('wood_repairs')->default(false);
            $table->decimal('wood_repairs_price', 8, 2)->nullable();
            $table->boolean('status')->default(false);

            $table->foreignId('tile_warranty_id')->nullable()->constrained('subscription_plans')->cascadeOnDelete()->comment('Foreign key referencing the subscription_plans table'); // Subscription plan associated with the service
            // $table->boolean('tile_warranty')->default(false);
            $table->decimal('tile_warranty_price', 8, 2)->nullable();
            $table->boolean('status')->default(false);

            $table->foreignId('insulation_id')->nullable()->constrained('subscription_plans')->cascadeOnDelete()->comment('Foreign key referencing the subscription_plans table'); // Subscription plan associated with the service
            // $table->boolean('insulation')->default(false);
            $table->decimal('tile_warranty_price', 8, 2)->nullable();
            $table->boolean('status')->default(false);

            $table->foreignId('inspection_fee_id')->nullable()->constrained('subscription_plans')->cascadeOnDelete()->comment('Foreign key referencing the subscription_plans table'); // Subscription plan associated with the service
            $table->decimal('inspection_price')->default(false);
            $table->boolean('status')->default(false);

            $table->foreignId('other_description_id')->nullable()->constrained('subscription_plans')->cascadeOnDelete()->comment('Foreign key referencing the subscription_plans table'); // Subscription plan associated with the service
            // $table->string('other_description')->nullable();
            $table->decimal('other_price', 8, 2)->nullable();
            $table->boolean('status')->default(false);

            $table->foreignId('discount_amount_id')->nullable()->constrained('subscription_plans')->cascadeOnDelete()->comment('Foreign key referencing the subscription_plans table'); // Subscription plan associated with the service
            $table->decimal('discount_price', 8, 2)->nullable();
            $table->boolean('status')->default(false);

            $table->timestamps();
        });
following respons and schema use in data insert laravel















use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateServicePlansTable extends Migration
{
    public function up()
    {
        Schema::create('service_plans', function (Blueprint $table) {
            $table->id();
            $table->string('customer_name');
            $table->string('drywood_and_subterranean_service_plan');
            $table->decimal('drywood_and_subterranean_initial_price', 8, 2);
            $table->decimal('drywood_and_subterranean_recurring_price', 8, 2);
            $table->enum('drywood_and_subterranean_recurring_period', ['Monthly', 'Annual']);
            $table->boolean('drywood_and_subterranean_schedule')->default(false);
            
            $table->string('dry_wood_service_plan');
            $table->decimal('dry_wood_initial_price', 8, 2);
            $table->decimal('dry_wood_recurring_price', 8, 2);
            $table->enum('dry_wood_recurring_period', ['Monthly', 'Annual']);
            $table->boolean('dry_wood_schedule')->default(false);
            
            $table->string('subterranean_service_plan');
            $table->decimal('subterranean_initial_price', 8, 2);
            $table->decimal('subterranean_recurring_price', 8, 2);
            $table->enum('subterranean_recurring_period', ['Monthly', 'Annual']);
            $table->boolean('subterranean_schedule')->default(false);
            
            $table->boolean('fumigation')->default(false);
            $table->decimal('fumigation_price', 8, 2)->nullable();
            $table->boolean('fumigation_schedule')->default(false);
            
            $table->boolean('preventive')->default(false);
            $table->decimal('preventive_price', 8, 2)->nullable();
            $table->boolean('preventive_schedule')->default(false);
            
            $table->boolean('one_time_local')->default(false);
            $table->decimal('one_time_local_price', 8, 2)->nullable();
            $table->boolean('one_time_local_schedule')->default(false);
            
            $table->boolean('wood_repairs')->default(false);
            $table->decimal('wood_repairs_price', 8, 2)->nullable();
            $table->boolean('wood_repairs_schedule')->default(false);
            
            $table->boolean('tile_warranty')->default(false);
            $table->decimal('tile_warranty_price', 8, 2)->nullable();
            $table->boolean('tile_warranty_schedule')->default(false);
            
            $table->boolean('insulation')->default(false);
            $table->boolean('insulation_schedule')->default(false);
            
            $table->boolean('inspection_fee')->default(false);
            $table->boolean('inspection_fee_waved')->default(false);
            
            $table->string('other_description')->nullable();
            $table->decimal('other_price', 8, 2)->nullable();
            $table->boolean('other_schedule')->default(false);
            
            $table->decimal('discount_amount', 8, 2)->nullable();
            $table->boolean('discount_schedule')->default(false);
            
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('service_plans');
    }
}
