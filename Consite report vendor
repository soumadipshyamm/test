
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\ValidationException;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Illuminate\Support\Str;

class VendorImport implements ToModel, WithHeadingRow
{
    public function model(array $row)
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        // Validate the incoming data
        $this->validateRow($row, $companyId);

        return new Vendor([
            'uuid' => Str::uuid(),
            'name' => $row['name'],
            'gst_no' => $row['gst_no'] ?? null,
            'type' => $row['type'],
            'address' => $row['address'] ?? null,
            'contact_person_name' => $row['contact_person_name'] ?? null,
            'phone' => $row['contact_person_phone'] ?? null, // Map 'contact_person_phone' to 'phone'
            'email' => $row['contact_person_email'] ?? null,
            'company_id' => $companyId,
        ]);
    }

    /**
     * Validate each row of data before saving.
     *
     * @param array $row
     * @param int $companyId
     * @throws ValidationException
     */
    private function validateRow(array $row, int $companyId): void
    {
        $validator = Validator::make($row, [
            'name' => [
                'required',
                'string',
                'max:255',
                function ($attribute, $value, $fail) use ($companyId) {
                    if (Vendor::where('company_id', $companyId)
                        ->where('name', $value)
                        ->exists()) {
                        $fail('The ' . $attribute . ' must be unique for the company.');
                    }
                },
            ],
            'type' => [
                'required',
                'string',
                'in:supplier,contractor,both',
                function ($attribute, $value, $fail) use ($row, $companyId) {
                    if (Vendor::where('company_id', $companyId)
                        ->where('name', $row['name'])
                        ->where('type', $value)
                        ->exists()) {
                        $fail('The combination of name and type must be unique.');
                    }
                },
            ],
            'gst_no' => 'nullable|string|max:15',
            'address' => 'nullable|string|max:500',
            'contact_person_name' => 'nullable|string|max:255',
            'contact_person_phone' => 'nullable|string|max:15', // Validate 'contact_person_phone'
            'contact_person_email' => 'nullable|email|max:255',
        ]);

        if ($validator->fails()) {
            throw new ValidationException($validator);
        }
    }
}







class VendorImport implements ToModel, WithHeadingRow
{

    public function model(array $row)
    {
        $authConpany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authConpany);
        $data = new Vendor([
            'uuid' => Str::uuid(),
            'name' => $row['name'],
            'gst_no' => $row['gst_no'],
            'type' => $row['type'],
            'address' => $row['address'],
            'contact_person_name' => $row['contact_person_name'],
            'phone' => $row['contact_person_phone'],
            'email' => $row['contact_person_email'],
            'company_id' => $companyId,
        ]);
        return $data;
    }
}
