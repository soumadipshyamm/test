
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithStyles;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Events\AfterSheet;

class ExportVendor implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents, WithMapping, WithStyles
{
    private const TYPE_DROPDOWN_OPTIONS = ['supplier', 'contractor', 'both'];

    public function collection()
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        $vendors = Vendor::where('company_id', $companyId)->get();

        return collect(VendorResource::collection($vendors)->resolve());
    }

    public function headings(): array
    {
        return [
            'SlNo',
            'Uuid', // Hidden column
            'Name',
            'Type',
            'Gst No',
            'Address',
            'Contact Person Name',
            'Contact Person Phone',
            'Contact Person Email',
        ];
    }

    public function map($vendor): array
    {
        static $slNo = 1;

        return [
            $slNo++, // Auto-increment serial number
            $vendor['uuid'], // Hidden column
            $vendor['name'],
            $this->validateType($vendor['type']), // Ensure valid type
            $vendor['gst_no'],
            $vendor['address'],
            $vendor['contact_person_name'],
            $vendor['contact_person_phone'],
            $vendor['contact_person_email'],
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();
                $lastRow = $sheet->getHighestRow();

                // Hide UUID column (Column B)
                $sheet->getColumnDimension('B')->setVisible(false);

                // Apply dropdown to Column D (Type)
                $this->applyDropdown($sheet, 'D', 2, $lastRow, self::TYPE_DROPDOWN_OPTIONS);

                // Freeze header row
                $sheet->freezePane('A2');

                // Style the header row
                $sheet->getStyle('A1:I1')->applyFromArray([
                    'font' => ['bold' => true],
                    'alignment' => ['horizontal' => 'center'],
                ]);
            },
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
        ];
    }

    private function applyDropdown(Worksheet $sheet, string $column, int $startRow, int $endRow, array $options)
    {
        // Prepare dropdown options as a comma-separated string
        $dropdownOptions = sprintf('"%s"', implode(',', $options));

        for ($row = $startRow; $row <= $endRow; $row++) {
            $cell = "{$column}{$row}";
            $validation = $sheet->getCell($cell)->getDataValidation();
            $validation->setType(DataValidation::TYPE_LIST);
            $validation->setErrorStyle(DataValidation::STYLE_STOP);
            $validation->setAllowBlank(false);
            $validation->setShowInputMessage(true);
            $validation->setShowErrorMessage(true);
            $validation->setFormula1($dropdownOptions); // Assign options
            $sheet->getCell($cell)->setDataValidation($validation); // Apply validation
        }
    }

    private function validateType(?string $type): string
    {
        return in_array($type, self::TYPE_DROPDOWN_OPTIONS) ? $type : 'supplier';
    }
}









use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithStyles;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Events\AfterSheet;

class ExportVendor implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents, WithMapping, WithStyles
{
    private const TYPE_DROPDOWN_OPTIONS = ['supplier', 'contractor', 'both'];

    public function collection()
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        $vendors = Vendor::where('company_id', $companyId)->get();

        // Return the vendors as a Laravel collection
        return collect(VendorResource::collection($vendors)->resolve());
    }

    public function headings(): array
    {
        return [
            'SlNo',
            'Uuid', // Hidden column
            'Name',
            'Type',
            'Gst No',
            'Address',
            'Contact Person Name',
            'Contact Person Phone',
            'Contact Person Email',
        ];
    }

    public function map($vendor): array
    {
        static $slNo = 1;

        // Ensure 'type' is valid or set a default
        $type = in_array($vendor['type'], self::TYPE_DROPDOWN_OPTIONS) ? $vendor['type'] : 'supplier';

        return [
            $slNo++, // Auto-incremented serial number
            $vendor['uuid'], // Hidden column
            $vendor['name'],
            $type, // Default or validated type
            $vendor['gst_no'],
            $vendor['address'],
            $vendor['contact_person_name'],
            $vendor['contact_person_phone'],
            $vendor['contact_person_email'],
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();

                // Get the last data row dynamically
                $lastRow = $sheet->getHighestRow();

                // Hide the UUID column (Column B)
                $sheet->getColumnDimension('B')->setVisible(false);

                // Apply dropdown to Column D (Type) for all data rows
                $this->addDropdownValidation($sheet, 'D', 2, $lastRow, self::TYPE_DROPDOWN_OPTIONS);

                // Freeze header row
                $sheet->freezePane('A2');

                // Apply styles to the header row
                $sheet->getStyle('A1:I1')->applyFromArray([
                    'font' => ['bold' => true],
                    'alignment' => ['horizontal' => 'center'],
                ]);
            },
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
        ];
    }

    /**
     * Add dropdown validation to a column for a specified range.
     *
     * @param Worksheet $sheet
     * @param string $column
     * @param int $startRow
     * @param int $endRow
     * @param array $options
     */
    private function addDropdownValidation(Worksheet $sheet, string $column, int $startRow, int $endRow, array $options)
    {
        for ($row = $startRow; $row <= $endRow; $row++) {
            $validation = $sheet->getCell("{$column}{$row}")->getDataValidation();
            $validation->setType(DataValidation::TYPE_LIST);
            $validation->setErrorStyle(DataValidation::STYLE_STOP);
            $validation->setAllowBlank(false);
            $validation->setShowInputMessage(true);
            $validation->setShowErrorMessage(true);
            $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
            $sheet->getCell("{$column}{$row}")->setDataValidation($validation);
        }
    }
}











Call to a member function all() on array


 public function export()

    {

        return Excel::download(new ExportVendor, 'vendors.xlsx');

    }


class ExportVendor implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents, WithMapping, WithStyles
{
        public function collection()
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        $vendors = Vendor::where('company_id', $companyId)->get();

        // Use VendorResource collection to transform data
        return VendorResource::collection($vendors);
    }

    public function headings(): array
    {
        return [
            'SlNo',
            'Uuid', // Hidden column
            'Name',
            'Type',
            'Gst No',
            'Address',
            'Contact Person Name',
            'Contact Person Phone',
            'Contact Person Email',
        ];
    }

    public function map($vendor): array
    {
        static $slNo = 1;

        // Ensure 'type' is valid or set a default
        // $type = in_array($vendor['type']);

        return [
            $slNo++, // Auto-incremented serial number
            $vendor['uuid'], // Hidden column
            $vendor['name'],
            $vendor['type'], // Default or validated type
            $vendor['gst_no'],
            $vendor['address'],
            $vendor['contact_person_name'],
            $vendor['contact_person_phone'],
            $vendor['contact_person_email'],
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();

                // Get the last data row dynamically
                $lastRow = $sheet->getHighestRow();

                // Hide the UUID column (Column B)
                $sheet->getColumnDimension('B')->setVisible(false);

                // Apply dropdown to Column D (Type) for all data rows
                $this->addDropdownValidation($sheet, 'D',$lastRow, ['supplier', 'contractor', 'both']);

                // Freeze header row
                $sheet->freezePane('A2');

                // Apply styles to the header row
                $sheet->getStyle('A1:I1')->applyFromArray([
                    'font' => ['bold' => true],
                    'alignment' => ['horizontal' => 'center'],
                ]);
            },
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
        ];
    }

    /**
     * Add dropdown validation to a column for a specified range.
     *
     * @param Worksheet $sheet
     * @param string $column
     * @param int $startRow
     * @param int $endRow
     */
    private function addDropdownValidation(Worksheet $sheet, string $column,  int $endRow, $options)
    {
        for ($row = 2; $row <= $endRow; $row++) {
            $validation = $sheet->getCell("{$column}{$row}")->getDataValidation();
            $validation->setType(DataValidation::TYPE_LIST);
            $validation->setErrorStyle(DataValidation::STYLE_STOP);
            $validation->setAllowBlank(false);
            $validation->setShowInputMessage(true);
            $validation->setShowErrorMessage(true);
            $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
            // $sheet->getCell("{$column}{$row}")->setDataValidation($validation);
        }
    }
}










use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithStyles;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use Illuminate\Support\Facades\Auth;

class ExportVendor implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents, WithMapping, WithStyles
{
    // Define the dropdown options as a constant
    private const TYPE_DROPDOWN_OPTIONS = ['supplier', 'contractor', 'both'];

    public function collection()
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        $vendors = Vendor::where('company_id', $companyId)->get();

        // Use VendorResource collection to transform data
        return VendorResource::collection($vendors)->resolve();
    }

    public function headings(): array
    {
        return [
            'SlNo', 
            'Uuid', // Hidden column
            'Name',
            'Type',
            'Gst No',
            'Address',
            'Contact Person Name',
            'Contact Person Phone',
            'Contact Person Email',
        ];
    }

    public function map($vendor): array
    {
        static $slNo = 1;

        // Ensure 'type' is valid or set a default
        $type = in_array($vendor['type'], self::TYPE_DROPDOWN_OPTIONS) ? $vendor['type'] : 'supplier';

        return [
            $slNo++, // Auto-incremented serial number
            $vendor['uuid'], // Hidden column
            $vendor['name'], 
            $type, // Default or validated type
            $vendor['gst_no'], 
            $vendor['address'], 
            $vendor['contact_person_name'], 
            $vendor['contact_person_phone'], 
            $vendor['contact_person_email'],
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();

                // Get the last data row dynamically
                $lastRow = $sheet->getHighestRow();

                // Hide the UUID column (Column B)
                $sheet->getColumnDimension('B')->setVisible(false);

                // Apply dropdown to Column D (Type) for all data rows
                $this->addDropdownValidation($sheet, 'D', 2, $lastRow);

                // Freeze header row
                $sheet->freezePane('A2');

                // Apply styles to the header row
                $sheet->getStyle('A1:I1')->applyFromArray([
                    'font' => ['bold' => true],
                    'alignment' => ['horizontal' => 'center'],
                ]);
            },
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true]],
        ];
    }

    /**
     * Add dropdown validation to a column for a specified range.
     *
     * @param Worksheet $sheet
     * @param string $column
     * @param int $startRow
     * @param int $endRow
     */
    private function addDropdownValidation(Worksheet $sheet, string $column, int $startRow, int $endRow)
    {
        for ($row = $startRow; $row <= $endRow; $row++) {
            $validation = $sheet->getCell("{$column}{$row}")->getDataValidation();
            $validation->setType(DataValidation::TYPE_LIST);
            $validation->setErrorStyle(DataValidation::STYLE_STOP);
            $validation->setAllowBlank(false);
            $validation->setShowInputMessage(true);
            $validation->setShowErrorMessage(true);
            $validation->setFormula1('"' . implode(',', self::TYPE_DROPDOWN_OPTIONS) . '"');
            $sheet->getCell("{$column}{$row}")->setDataValidation($validation);
        }
    }
}









use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithColumnFormatting;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithCustomStartCell;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use Illuminate\Support\Facades\Auth;

class ExportVendor implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents, WithMapping
{
    public function collection()
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        $vendor = Vendor::where('company_id', $companyId)->get();

        return $vendor;
    }

    public function headings(): array
    {
        return [
            'SlNo',
            'Uuid', // This will be hidden
            'Name',
            'Type',
            'Gst No',
            'Address',
            'Contact Person Name',
            'Contact Person Phone',
            'Contact Person Email',
        ];
    }

    public function map($vendor): array
    {
        static $slNo = 1; // Serial number counter
        return [
            $slNo++, // Column A: SlNo
            $vendor->uuid, // Column B: Uuid (hidden later)
            $vendor->name, // Column C: Name
            $vendor->type, // Column D: Type
            $vendor->gst_no, // Column E: Gst No
            $vendor->address, // Column F: Address
            $vendor->contact_person_name, // Column G: Contact Person Name
            $vendor->contact_person_phone, // Column H: Contact Person Phone
            $vendor->contact_person_email, // Column I: Contact Person Email
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();

                // Hide Column B (Uuid)
                $sheet->getColumnDimension('B')->setVisible(false);

                // Add dropdown for Column D (Type)
                $validation = $sheet->getCell('D2')->getDataValidation();
                $validation->setType(DataValidation::TYPE_LIST);
                $validation->setErrorStyle(DataValidation::STYLE_STOP);
                $validation->setAllowBlank(true);
                $validation->setShowInputMessage(true);
                $validation->setShowErrorMessage(true);
                $validation->setFormula1('"supplier,contractor,both"');

                // Apply dropdown to the entire column D (rows 2 to 1000 for example)
                foreach (range(2, 1000) as $row) {
                    $sheet->getCell("D{$row}")->setDataValidation(clone $validation);
                }

                // Freeze the first row (header)
                $sheet->freezePane('A2');

                // Make header row bold
                $sheet->getStyle('A1:I1')->getFont()->setBold(true);
            },
        ];
    }
}






class ExportVendor  implements FromCollection, WithHeadings, ShouldAutoSize
{

    public function collection()
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        $vendor = Vendor::where('company_id',$companyId)->get();
        $collection = VendorResource::collection($vendor);
        return collect($collection);
    }

    public function headings(): array
    {
        return [
            '#',
            'Uuid',
            'Name',
            'Type',
            'Gst No',
            'Address',
            'Contact Person Name',
            'Contact Person Phone',
            'Contact Person Email',
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true], 'freeze' => true],
        ];
    }
}
