


***************************************************************************************************************8



***************************************************************************************************************8
***************************************************************************************************************8
***************************************************************************************************************8
***************************************************************************************************************8

####################################
<div class="date-nav">
    <button class="ch-btn prev"><i class="fa-solid fa-chevron-left"></i></button>
    <input type="text" id="datePicker" class="form-control" 
           value="{{ \Carbon\Carbon::parse($date)->format('d M Y') }}">
    <button class="ch-btn next"><i class="fa-solid fa-chevron-right"></i></button>
</div>
<div id="dataDisplay">
    <!-- This section will display data fetched via AJAX -->
    Loading data...
</div>

$(document).ready(function () {
    // Initialize date picker
    $("#datePicker").datepicker({
        dateFormat: "dd M yy", // Format for the displayed date
        onSelect: function (dateText) {
            fetchData(dateText); // Fetch data when a date is selected
        }
    });

    // Function to fetch data for a specific date
    function fetchData(date) {
        $.ajax({
            url: '/ajax/get-data-by-date',
            type: 'GET',
            data: { date: date },
            success: function (response) {
                $('#dataDisplay').html(response); // Update data display
            },
            error: function (xhr) {
                console.error("Error fetching data:", xhr);
                $('#dataDisplay').html('<p class="text-danger">Failed to load data.</p>');
            }
        });
    }

    // Adjust date when buttons are clicked
    function adjustDate(days) {
        let currentDate = $("#datePicker").datepicker("getDate");
        currentDate.setDate(currentDate.getDate() + days);
        let formattedDate = $.datepicker.formatDate("dd M yy", currentDate);
        $("#datePicker").datepicker("setDate", formattedDate); // Update the picker
        fetchData(formattedDate); // Fetch data for the new date
    }

    // Previous date button
    $(".prev").on("click", function () {
        adjustDate(-1);
    });

    // Next date button
    $(".next").on("click", function () {
        adjustDate(1);
    });

    // Fetch initial data for the current date
    fetchData($("#datePicker").val());
});


public function getDataByDate(Request $request)
{
    $date = \Carbon\Carbon::createFromFormat('d M Y', $request->input('date'))->toDateString();
    $data = MyModel::whereDate('created_at', $date)->get();

    return view('partials.data-display', compact('data'))->render();
}


@if($data->isEmpty())
    <p>No data available for the selected date.</p>
@else
    <ul>
        @foreach($data as $item)
            <li>{{ $item->name }} - {{ $item->created_at }}</li>
        @endforeach
    </ul>
@endif

####################################
***************************************************************************************************************8

<div class="date-picker-wrapper">
    <button id="prevDate" class="btn btn-secondary">Previous</button>
    <input type="date" id="datePicker" class="form-control" value="{{ now()->format('Y-m-d') }}">
    <button id="nextDate" class="btn btn-secondary">Next</button>
</div>

$(document).ready(function () {
    const datePicker = $('#datePicker');

    // Function to fetch data for a specific date
    function fetchData(date) {
        $.ajax({
            url: '/ajax/get-data-by-date', // Laravel route for AJAX
            type: 'GET',
            data: { date: date },
            success: function (response) {
                // Update the data display section with the response
                $('#dataDisplay').html(response);
            },
            error: function (xhr) {
                console.error("Error fetching data:", xhr);
                $('#dataDisplay').html('<p class="text-danger">Failed to load data.</p>');
            }
        });
    }

    // Fetch initial data for the current date
    fetchData(datePicker.val());

    // Adjust date when buttons are clicked
    function adjustDate(days) {
        let currentDate = new Date(datePicker.val());
        currentDate.setDate(currentDate.getDate() + days);
        let newDate = currentDate.toISOString().split('T')[0];
        datePicker.val(newDate);
        fetchData(newDate); // Fetch data for the new date
    }

    // Previous date button click
    $('#prevDate').on('click', function () {
        adjustDate(-1);
    });

    // Next date button click
    $('#nextDate').on('click', function () {
        adjustDate(1);
    });

    // Fetch data when the date picker value changes
    datePicker.on('change', function () {
        fetchData($(this).val());
    });
});


public function getDataByDate(Request $request)
{
    $date = $request->input('date');
    // Fetch data based on the date (replace this with your actual data fetching logic)
    $data = MyModel::whereDate('created_at', $date)->get();

    // Return a view or JSON data
    return view('partials.data-display', compact('data'))->render();
}


@if($data->isEmpty())
    <p>No data available for the selected date.</p>
@else
    <ul>
        @foreach($data as $item)
            <li>{{ $item->name }} - {{ $item->created_at }}</li>
        @endforeach
    </ul>
@endif

***************************************************************************************************************8
 <script>
            $(document).ready(function() {
                call_calendar();
            })

            function call_calendar() {
                var calendar = $('#full_calendar').fullCalendar({
                    defaultView: 'month',
                    editable: true,
                    header: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'month,agendaWeek,agendaDay'
                    },
                    events: [
                        @foreach ($datas as $key => $event)
                            {
                                title: '{{ date('h:i A', strtotime($event['insp_start_datetime'])) ?? 'Event ' . ($key + 1) }}', // Use a title from the event data or a default
                                start: '{{ date('Y-m-d', strtotime($event['insp_start_datetime'])) }}',
                                // start: '{{ \Carbon\Carbon::parse($event['insp_start_datetime'])->format('Y-m-d') }}',
                            },
                        @endforeach
                    ],

                    dayClick: function(date, jsEvent, view) {
                        var formattedDate = date.format(); // Format the date to a string
                        var url = "{{ route('schedule.appointment.list', ':date') }}"; // Use placeholder
                        url = url.replace(':date', formattedDate); // Replace placeholder with actual date
                        window.location.href = url; // Redirect to the constructed URL
                    }
                });
            }
        </script>
***************************************************************************************************************8
<div class="date-nav">
                    <button class="ch-btn prev"><i class="fa-solid fa-chevron-left"></i></button>
                    <span>{{ \Carbon\Carbon::parse($date)->format('d M Y') }}</span>
                    <button class="ch-btn next"><i class="fa-solid fa-chevron-right"></i></button>
                </div>
***************************************************************************************************************8



$(document).on("click", ".appoinementDetails", function(e) {
    e.preventDefault();
    let appoinementId = $(this).data('uuid');
    
    $.ajax({
        url: APP_URL + `/ajax/get-appoinement-details`,
        type: "GET",
        data: {
            uuid: appoinementId
        },
        success: function(response) {
            if (response) {
                const data = response.data;
                
                // Common elements to both conditions
                $('#listAppoinementDetailsModal').modal('show');
                $('#inspectionId').val(data.uuid);
                $('#inspectionType').val(data.inspection_type_id).change();
                $('#insp_customer_name').text(data.customers.name);
                $('#insp_customer_phone').text(data.customers.mobile_number);
                $('#insp_customer_time').text(
                    `${new Date(data.insp_start_datetime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })} - ${new Date(data.insp_end_datetime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })}`
                );
                $('#insp_customer_date').text(new Date(data.insp_start_datetime).toLocaleDateString());
                $('.referral_remove').attr('data-uuid', data.uuid);

                // Check for is_active status
                if (data.is_active !== 1 && data.is_active !== 4) {
                    // Inspection is not complete or rejected
                    $('.inspection-complete, .inspection-complete-checkbox, #referral-remove, .re-schedule, .cancel_inspection').show();
                    $('.appointment-status').removeClass().addClass('appointment-status chip-unknown').text('Unknown Status');
                } else {
                    // Handle status cases
                    let appointmentStatus = '';
                    let statusClass = '';
                    
                    switch (data.is_active) {
                        case 0:
                            appointmentStatus = 'Pending';
                            statusClass = 'chip-pending';
                            break;
                        case 1:
                            appointmentStatus = 'Complete';
                            statusClass = 'chip-completed';
                            break;
                        case 2:
                            appointmentStatus = 'Cancelled';
                            statusClass = 'chip-cancelled';
                            break;
                        case 3:
                            appointmentStatus = 'Rescheduled';
                            statusClass = 'chip-reschedule';
                            break;
                        case 4:
                            appointmentStatus = 'Rejected';
                            statusClass = 'chip-rejected';
                            break;
                        default:
                            appointmentStatus = 'Unknown Status';
                            statusClass = 'chip-unknown';
                    }

                    $('.appointment-status').removeClass().addClass(`appointment-status ${statusClass}`).text(appointmentStatus);
                    $('.inspection-complete, .inspection-complete-checkbox, #referral-remove, .re-schedule, .cancel_inspection').hide();
                }
            }
        },
        error: function(xhr) {
            console.error("Error fetching appointment details:", xhr);
        }
    });
});



*********************************************************************************************************



  $(document).on("click", ".appoinementDetails", function(e) {
            e.preventDefault();
            let appoinementId = $(this).data('uuid');
            // alert(appoinementId);
            $.ajax({
                url: APP_URL + `/ajax/get-appoinement-details`,
                type: "GET",
                data: {
                    uuid: appoinementId
                },
                success: function(response) {
                    console.log(response.data);
                    if (response) {
                        if (response.data.is_active !== 1 && response.data.is_active !== 4) {
                            //0:pending,1:complete,2:cancle,3:reschedule,4:reject
                            $('#listAppoinementDetailsModal').modal('show');
                            $('#inspectionId').val(response.data.uuid);
                            $('#inspectionType').val(response.data.inspection_type_id).change();
                            $('#insp_customer_name').text(response.data.customers.name);
                            $('#insp_customer_phone').text(response.data.customers.mobile_number);
                            $('#insp_customer_time').text(new Date(response.data.insp_start_datetime)
                                .toLocaleTimeString([], {
                                    hour: '2-digit',
                                    minute: '2-digit',
                                    hour12: true // Change to 24-hour format
                                }) + ' - ' + new Date(response.data.insp_end_datetime)
                                .toLocaleTimeString([], {
                                    hour: '2-digit',
                                    minute: '2-digit',
                                    hour12: true // Change to 24-hour format
                                }));
                            $('#insp_customer_date').text(new Date(response.data.insp_start_datetime)
                                .toLocaleDateString());
                            $('.referral_remove').attr('data-uuid', response.data
                                .uuid); // Ensure data-uuid is set
                            // $('.referral_remove').attr(response.data.customers.address);
                        } else {
                            $('#listAppoinementDetailsModal').modal('show');
                            $('#inspectionId').val(response.data.uuid);
                            $('#inspectionType').val(response.data.inspection_type_id).change();
                            $('#insp_customer_name').text(response.data.customers.name);
                            $('#insp_customer_phone').text(response.data.customers.mobile_number);
                            $('#insp_customer_time').text(new Date(response.data.insp_start_datetime)
                                .toLocaleTimeString([], {
                                    hour: '2-digit',
                                    minute: '2-digit',
                                    hour12: true // Change to 24-hour format
                                }) + ' - ' + new Date(response.data.insp_end_datetime)
                                .toLocaleTimeString([], {
                                    hour: '2-digit',
                                    minute: '2-digit',
                                    hour12: true // Change to 24-hour format
                                }));
                            $('#insp_customer_date').text(new Date(response.data.insp_start_datetime)
                                .toLocaleDateString());

                            let appointmentStatus = '';
                            switch (response.data.is_active) {
                                case 0:
                                    appointmentStatus = 'Pending';
                                    $('.appoyment-status').addClass('chip-pending').text(
                                        appointmentStatus);
                                    break;
                                case 1:
                                    appointmentStatus = 'Complete';
                                    $('.appoyment-status').addClass('chip-completed').text(
                                        appointmentStatus);
                                    break;
                                case 2:
                                    appointmentStatus = 'Cancelled';
                                    $('.appoyment-status').addClass('chip-cancelled').text(
                                        appointmentStatus);
                                    break;
                                case 3:
                                    appointmentStatus = 'Rescheduled';
                                    $('.appoyment-status').addClass('chip-reschedule').text(
                                        appointmentStatus);
                                    break;
                                default:
                                    appointmentStatus = 'Unknown Status';
                                    $('.appoyment-status').addClass('chip-unknown').text(
                                        appointmentStatus);
                            }
                            $('.inspection-complete').hide();
                            $('.inspection-complete-checkbox').hide();
                            $('#referral-remove').hide();
                            $('.re-schedule').hide();
                            $('.cancel_inspection').hide();
                        }
                    }
                },
                // whereDate(['insp_start_datetime' => $date])
                error: function(xhr) {
                    console.error("Error fetching customer details:", xhr);
                }
            });
        });
