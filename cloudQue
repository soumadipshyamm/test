   public static function calculateDistance($lat1, $lon1, $lat2, $lon2)
    {
        $earthRadius = 6371; // Radius of the earth in kilometers

        $latDiff = deg2rad($lat2 - $lat1);
        $lonDiff = deg2rad($lon2 - $lon1);

        $a = sin($latDiff / 2) * sin($latDiff / 2) +
             cos(deg2rad($lat1)) * cos(deg2rad($lat2)) *
             sin($lonDiff / 2) * sin($lonDiff / 2);

        $c = 2 * atan2(sqrt($a), sqrt(1 - $a));

        $distance = $earthRadius * $c; // Distance in kilometers

        return $distance;
    }

************************************************************************

public static function calculateDistance($lat1, $lon1, $lat2, $lon2)
    {
        $earthRadius = 6371; // Radius of the earth in kilometers

        $latDiff = deg2rad($lat2 - $lat1);
        $lonDiff = deg2rad($lon2 - $lon1);

        $a = sin($latDiff / 2) * sin($latDiff / 2) +
             cos(deg2rad($lat1)) * cos(deg2rad($lat2)) *
             sin($lonDiff / 2) * sin($lonDiff / 2);

        $c = 2 * atan2(sqrt($a), sqrt(1 - $a));

        $distance = $earthRadius * $c; // Distance in kilometers

        return $distance;
    }

 public function search(Request $request)
    {
        $userLat = $request->input('user_lat'); // User's latitude
        $userLong = $request->input('user_long'); // User's longitude
        $query = $request->input('query');
        
        // Search clinics and calculate distances
        $clinics = Clinic::select('*')
                         ->where('name', 'like', "%$query%")
                         ->orWhere('location', 'like', "%$query%")
                         ->get();

        // Calculate distances
        foreach ($clinics as $clinic) {
            $clinic->distance = Location::calculateDistance($userLat, $userLong, $clinic->lat, $clinic->lng);
        }

        return view('search-results', compact('clinics'));
    }
*********************************************************************

public function filterData(Request $request)
    {
        // Retrieve filter criteria from request
        $type = $request->input('type');
        $location = $request->input('location');
        // Add other criteria here...

        // Filter users
        $filteredUsers = User::where('type', $type)
            ->where('location', $location)
            // Add other filters as needed
            ->get();

        // Filter clinics
        $filteredClinics = Clinic::where('type', $type)
            ->where('location', $location)
            // Add other filters as needed
            ->get();

        // Alternatively, if you want to filter based on a relationship, you can use whereHas

        // Filter users based on a relationship
        $filteredUsers = User::whereHas('clinics', function ($query) use ($type, $location) {
            $query->where('type', $type)
                ->where('location', $location);
            // Add other filters as needed
        })->get();

        // Filter clinics based on a relationship
        $filteredClinics = Clinic::whereHas('users', function ($query) use ($type, $location) {
            $query->where('type', $type)
                ->where('location', $location);
            // Add other filters as needed
        })->get();

        // Return filtered data
        return response()->json([
            'users' => $filteredUsers,
            'clinics' => $filteredClinics,
        ]);
    }
