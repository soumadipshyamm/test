







class ActivitesExport implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    protected $selects;
    protected $rowCount;
    protected $columnCount;
    protected $projectId;
    protected $subprojects;

    public function __construct($projectId,$subprojects)
    {
        $this->projectId = $projectId;
        $this->subprojects = $subprojects;
        $status = getUnit();

        $this->selects = [
            ['columns_name' => 'H', 'options' => $status],
        ];

        $this->rowCount = 2; // Number of rows for the dropdown
        $this->columnCount = 5; // Number of columns to be auto-sized
    }

    public function collection()
    {
        $authCompanyId = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompanyId);
        $project_id=$this->projectId;
        $subproject_id=$this->subprojects;
        $labours = Activities::with('units', 'project', 'subproject')
            ->where('company_id', $companyId);
            if(!empty($project_id) && !is_null($project_id) ){
                $labours->where('project_id', $project_id);

                if(!empty($subproject_id) && !is_null($subproject_id) ){
                    $labours->where('subproject_id', $subproject_id);
                }
            }
            $labours= $labours->get();
            // dd($labours);
        return collect(ActivitesExportResources::collection($labours));
    }

    public function headings(): array
    {
        return [
            '#',
            'UUID',
            'Project',
            'Subproject',
            'Type',
            'SL No',
            'Activities',
            'Units',
            'Qty',
            'Rate',
            'Amount',
            'Start Date',
            'End Date'
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $startRow = 2; // Starting row for data validation

                foreach ($this->selects as $select) {
                    $dropColumn = $select['columns_name'];
                    $options = $select['options'];

                    $validation = $event->sheet->getCell("{$dropColumn}2")->getDataValidation();
                    $this->configureDataValidation($validation, $options);

                    for ($i = 3; $i <= $this->rowCount; $i++) {
                        $event->sheet->getCell("{$dropColumn}{$i}")->setDataValidation(clone $validation);
                    }
                }

                for ($i = 1; $i <= $this->columnCount; $i++) {
                    $column = Coordinate::stringFromColumnIndex($i);
                    $event->sheet->getColumnDimension($column)->setAutoSize(true);
                }

                $this->applyTextWrapping($event, 'H', $startRow);
            },
        ];
    }

    private function configureDataValidation($validation, $options)
    {
        $validation->setType(DataValidation::TYPE_LIST);
        $validation->setErrorStyle(DataValidation::STYLE_INFORMATION);
        $validation->setAllowBlank(false);
        $validation->setShowInputMessage(true);
        $validation->setShowErrorMessage(true);
        $validation->setShowDropDown(true);
        $validation->setErrorTitle('Input Error');
        $validation->setError('Value is not in the list.');
        $validation->setPromptTitle('Pick from list');
        $validation->setPrompt('Please pick a value from the drop-down list.');
        $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
    }

    private function applyTextWrapping($event, $column, $startRow, $endRow = null)
    {
        $endRow = $endRow ?? $event->sheet->getDelegate()->getHighestRow();

        $event->sheet->getDelegate()->getColumnDimension($column)->setWidth(50);
        for ($row = $startRow; $row <= $endRow; $row++) {
            $cell = $column . $row;
            $event->sheet->getDelegate()->getStyle($cell)->getAlignment()->setWrapText(true);
        }
    }
}







class ActivitiesImport implements ToModel, WithHeadingRow
{
    protected $project;
    protected $subproject;
    protected $companyId;
    protected $tmpcachekey;

    public function __construct($project, $subproject, $companyId, $tmpcachekey)
    {
        $this->project = $project;
        $this->subproject = $subproject;
        $this->companyId = $companyId;
        $this->tmpcachekey = $tmpcachekey;
    }

    public function model(array $row)
    {
        Log::info('Excel import process started', $row);

        // Validate the row structure
        if (!$this->isValidSlNo($row)) {
            $this->cacheInvalidRow($row);
            return null;
        }

        $companyId = $this->companyId;
        $parentId = $this->calculateParentId($row['sl_no']);

        // Check if the same data already exists
        $existingActivity = Activities::where('project_id', $this->project)
            ->when($this->subproject, function ($query) {
                $query->where('subproject_id', $this->subproject);
            })
            ->where('id', $row['id'] ?? null) // Assuming 'id' is present in the row
            ->where('company_id', $companyId)
            ->first();

        if ($existingActivity) {
            $this->updateExistingActivity($existingActivity, $row);
            return null;
        }

        // Create new activity
        $data = new Activities([
            'uuid' => Str::uuid(),
            'project_id' => $this->project,
            'subproject_id' => $this->subproject,
            'type' => $parentId === null ? 'heading' : 'activity',
            'sl_no' => $row['sl_no'],
            'parent_id' => $parentId,
            'activities' => $row['activities'],
            'unit_id' => $this->getUnitId($row['units']),
            'qty' => $row['qty'],
            'rate' => $row['rate'],
            'amount' => $row['qty'] * $row['rate'],
            'start_date' => $row['start_date'],
            'end_date' => $row['end_date'],
            'company_id' => $companyId,
        ]);

        $this->logExportedData($data);
        return $data;
    }

    protected function isValidSlNo(array $row)
    {
        $slNoParts = explode('.', $row['sl_no']);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1 || $slNoCount === null) {
            return true;
        } elseif ($slNoCount === 2) {
            return $this->checkSlNo($slNoParts[0]);
        } elseif ($slNoCount === 3) {
            $slNoCombined = $slNoParts[0] . '.' . $slNoParts[1];
            return $this->checkSlNo($slNoCombined);
        }

        return false;
    }

    protected function calculateParentId($slNo)
    {
        $slNoParts = explode('.', $slNo);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1 || $slNoCount === null) {
            return null;
        } elseif ($slNoCount === 2) {
            return $this->getParentId($slNoParts[0]);
        } elseif ($slNoCount === 3) {
            $slNoCombined = $slNoParts[0] . '.' . $slNoParts[1];
            return $this->getParentId($slNoCombined);
        }

        return null;
    }

    protected function getParentId($slNoParts)
    {
        return Activities::where('sl_no', $slNoParts)
            ->where('company_id', $this->companyId)
            ->value('id'); // Directly fetch ID
    }

    protected function checkSlNo($slNoParts)
    {
        return Activities::where('sl_no', $slNoParts)
            ->where('company_id', $this->companyId)
            ->exists(); // Returns true/false
    }

    protected function getUnitId($unitName)
    {
        $unitId = nametoid($unitName, 'units');

        if ($unitId === false) {
            $unitId = createunit($unitName, $this->companyId);
        }

        return $unitId;
    }

    protected function updateExistingActivity($existingActivity, $row)
    {
        $shouldUpdate = (
            $existingActivity->unit_id !== $this->getUnitId($row['units']) ||
            $existingActivity->qty !== $row['qty'] ||
            $existingActivity->rate !== $row['rate'] ||
            $existingActivity->amount !== $row['qty'] * $row['rate']
        );

        if ($shouldUpdate) {
            $existingActivity->update([
                'unit_id' => $this->getUnitId($row['units']),
                'qty' => $row['qty'],
                'rate' => $row['rate'],
                'amount' => $row['qty'] * $row['rate'],
            ]);
        }
    }

    protected function cacheInvalidRow($row)
    {
        $invalidRows = Cache::get($this->tmpcachekey, []);
        $invalidRows[] = $row;
        Cache::put($this->tmpcachekey, $invalidRows);
    }

    protected function logExportedData($data)
    {
        Log::info('Exported Data:', $data->toArray());
    }
}



class ActivitesImport implements ToModel, WithHeadingRow
{
    protected $project;
    protected $subproject;
    protected $companyId;
    protected $tmpcachekey;

    public function __construct($project, $subproject, $companyId, $tmpcachekey)
    {
        $this->project = $project;
        $this->subproject = $subproject;
        $this->companyId = $companyId;
        $this->tmpcachekey = $tmpcachekey;
    }
    public function model(array $row)
    {
        Log::info('Excel import process started', $row);

        $companyId = $this->companyId;

        // Validate the row structure
        if ($this->isValidSlNo($row, $companyId)) {
            $parentId = $this->calculateParentId($row['sl_no'], $companyId);
            // dd($row);
            // Check if the same data already exists
            $activitId=$row[""];
            $existingActivity = Activities::where('project_id', $this->project);
                if($this->subproject){
                    $existingActivity=$existingActivity->where('subproject_id', $this->subproject);
                }
                // ->where('uuid', $row['uuid'])
                $existingActivity= $existingActivity->where('id', $activitId)
                ->where('company_id', $companyId)
                ->first();

                // dd($existingActivity);
            // If data exists, compare and update if different
            if ($existingActivity) {
                // dd($existingActivity);
                $shouldUpdate = (
                    $existingActivity->unit_id !== $this->getUnitId($row['units'], $companyId) ||
                    $existingActivity->qty !== $row['qty'] ||
                    $existingActivity->rate !== $row['rate'] ||
                    $existingActivity->amount !== $row['qty'] * $row['rate']
                );
                if ($shouldUpdate) {
                    $existingActivity->update([
                        'unit_id' => $this->getUnitId($row['units'], $companyId),
                        'qty' => $row['qty'],
                        'rate' => $row['rate'],
                        'amount' => $row['qty'] * $row['rate'],
                    ]);
                }else{
                    $data= new Activities([
                        'uuid' => Str::uuid(),
                        'project_id' => $this->project,
                        'subproject_id' => $this->subproject,
                        'type' => $parentId === null ? 'heading' : 'activites',
                        'sl_no' => $row['sl_no'],
                        'parent_id' => $parentId,
                        'activities' => $row['activities'],
                        'unit_id' => $this->getUnitId($row['unit_id'], $companyId),
                        'qty' => $row['qty'],
                        'rate' => $row['rate'],
                        'amount' => $row['qty'] * $row['rate'],
                        'start_date' => $row['start_date'],
                        'end_date' => $row['end_date'],
                        'company_id' => $companyId,
                    ]);
                    $this->logExportedData($data);
                                return $data;
                }
            }

        } else {
            // Cache invalid rows
            $arr = Cache::get($this->tmpcachekey, []);
            $arr[] = $row;
            Cache::put($this->tmpcachekey, $arr);
        }
    }

    protected function isValidSlNo(array $row, $companyId)
    {
        $slNoParts = explode('.', $row['sl_no']);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1 || $slNoCount === null) {
            return true;
        } elseif ($slNoCount === 2) {
            return $this->getCheckSlNo($slNoParts[0], $companyId);
        } elseif ($slNoCount === 3) {
            $slNoCombined = $slNoParts[0] . '.' . $slNoParts[1];
            return $this->getCheckSlNo($slNoCombined, $companyId);
        }

        return false;
    }

    protected function calculateParentId($slNo, $companyId)
    {
        $slNoParts = explode('.', $slNo);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1 || $slNoCount === null) {
            return null;
        } elseif ($slNoCount === 2) {
            return $this->getCheckParentId($slNoParts[0], $companyId);
        } elseif ($slNoCount === 3) {
            $slNoCombined = $slNoParts[0] . '.' . $slNoParts[1];
            return $this->getCheckParentId($slNoCombined, $companyId);
        }

        return null;
    }

    protected function getCheckParentId($slNoParts, $companyId)
    {
        $data = Activities::where('sl_no', $slNoParts)
            ->where('company_id', $companyId)
            ->orderBy('id', 'DESC')
            ->first();

        return $data ? $data->id : null;
    }

    protected function getCheckSlNo($slNoParts, $companyId)
    {
        $data = Activities::where('sl_no', $slNoParts)
            ->where('company_id', $companyId)
            ->orderBy('id', 'DESC')
            ->first();

        return $data !== null;
    }

    protected function getUnitId($unitName, $companyId)
    {
        $unitId = nametoid($unitName, 'units');

        if ($unitId === false) {
            $unitId = createunit($unitName, $companyId);
        }

        return $unitId;
    }
    protected function logExportedData($data)
    {
        Log::info('Exported Data:', [
            'uuid' => $data->uuid,
            'project_id' => $data->project_id,
            'subproject_id' => $data->subproject_id,
            'type' => $data->type,
            'sl_no' => $data->sl_no,
            'activities' => $data->activities,
            'unit_id' => $data->unit_id,
            'qty' => $data->qty,
            'rate' => $data->rate,
            'amount' => $data->amount,
            'start_date' => $data->start_date,
            'end_date' => $data->end_date,
            'company_id' => $data->company_id,
        ]);
    }
}
