public function teamsAdd(Request $request)
{
    $authCompany = Auth::guard('company-api')->user()->company_id;

    // Validate input dynamically based on update or create
    $validationRules = $this->getValidationRules($request->updateId);
    $validatedData = Validator::make($request->all(), $validationRules);

    if ($validatedData->fails()) {
        return $this->responseJson(false, 422, $validatedData->errors()->first(), []);
    }

    DB::beginTransaction();

    try {
        $message = '';
        $result = null;

        if ($request->updateId) {
            // Update the user
            $result = $this->updateUser($request);
            $message = 'User Updated Successfully';
        } else {
            // Create a new user
            $result = $this->createUser($request, $authCompany);
            $message = 'User Created Successfully';
        }

        // Commit transaction if successful
        DB::commit();

        return $this->responseJson(true, 201, $message, $result);
    } catch (\Exception $e) {
        // Rollback transaction on failure
        DB::rollBack();

        logger($e->getMessage() . ' on ' . $e->getFile() . ' in ' . $e->getLine());
        return $this->responseJson(false, 500, 'An error occurred. Please try again.', []);
    }
}

/**
 * Generate validation rules dynamically.
 */
private function getValidationRules($updateId = null)
{
    $rules = [
        'company_user_role' => 'required',
        'name' => 'required',
        'email' => ['required', 'email', Rule::unique('company_users', 'email')->ignore($updateId)],
        'phone' => 'required',
        'address' => 'required',
        'img' => 'sometimes|mimes:jpeg,jpg,png',
    ];

    if ($updateId) {
        $rules['password'] = 'nullable';
    } else {
        $rules['password'] = 'required|min:8';
    }

    return $rules;
}

/**
 * Handle user creation logic.
 */
private function createUser($request, $authCompany)
{
    return CompanyUser::create([
        'uuid' => Str::uuid(),
        'name' => $request->name,
        'phone' => $request->phone,
        'email' => $request->email,
        'password' => Hash::make($request->password),
        'dob' => $request->dob,
        'address' => $request->address,
        'designation' => $request->designation,
        'aadhar_no' => $request->aadhar_no,
        'pan_no' => $request->pan_no,
        'company_id' => $authCompany,
        'company_role_id' => $request->company_user_role,
        'reporting_person' => $request->reporting_person,
        'profile_images' => $this->handleImageUpload($request->file('img'), 'profile_image'),
    ]);
}

/**
 * Handle user update logic.
 */
private function updateUser($request)
{
    $id = $request->updateId;
    $fetchUserId = CompanyUser::findOrFail($id);

    $dataToUpdate = [
        'name' => $request->name,
        'phone' => $request->phone,
        'country' => $request->country,
        'state' => $request->state,
        'city' => $request->city,
        'dob' => $request->dob,
        'address' => $request->address,
        'designation' => $request->designation,
        'aadhar_no' => $request->aadhar_no,
        'pan_no' => $request->pan_no,
        'company_role_id' => $request->company_user_role,
        'reporting_person' => $request->reporting_person,
    ];

    // If password is provided, hash it
    if ($request->filled('password')) {
        $dataToUpdate['password'] = Hash::make($request->password);
    }

    // Handle image upload if exists
    if ($request->hasFile('img')) {
        $this->deleteExistingImage($fetchUserId->profile_images);
        $dataToUpdate['profile_images'] = $this->handleImageUpload($request->file('img'), 'profile_image');
    }

    $fetchUserId->update($dataToUpdate);

    return $fetchUserId;
}

/**
 * Handle image upload.
 */
private function handleImageUpload($image, $type)
{
    if ($image) {
        return getImgUpload($image, $type);
    }
    return null;
}

/**
 * Delete existing image.
 */
private function deleteExistingImage($imagePath)
{
    if ($imagePath) {
        deleteFile(null, 'company_users', 'profile_images', $imagePath);
    }
}
