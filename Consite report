
protected static function generateUniqueNumber($length)
{
    $prefix = 'L'; // Define the prefix
    $nextNumber = null;
    
    // Loop until a unique code is generated
    do {
        // Fetch the last generated code that matches the prefix
        $lastCode = static::where('code', 'like', "{$prefix}%")
            ->orderBy('code', 'desc')
            ->value('code');
        
        if ($lastCode) {
            // Extract the numeric part of the last code and increment it
            $lastNumber = intval(substr($lastCode, strlen($prefix)));
            $nextNumber = str_pad($lastNumber + 1, $length, '0', STR_PAD_LEFT);
        } else {
            // Start from 1 if no records exist
            $nextNumber = str_pad(1, $length, '0', STR_PAD_LEFT);
        }

        // Check if the generated code already exists
        $existingCode = static::where('code', $prefix . $nextNumber)->exists();
    } while ($existingCode); // If code exists, regenerate a new one

    // Return the unique code
    return $prefix . $nextNumber;
}





SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry 'L000111' for key 'labours_code_unique'



protected static function generateUniqueNumber($length)
{
    $prefix = 'L'; // Define the prefix
    // Fetch the last generated code that matches the prefix
    $lastCode = static::where('code', 'like', "{$prefix}%")
        ->orderBy('code', 'desc')
        ->value('code');

    if ($lastCode) {
        // Extract the numeric part of the last code and increment it
        $lastNumber = intval(substr($lastCode, strlen($prefix)));
        $nextNumber = str_pad($lastNumber + 1, $length, '0', STR_PAD_LEFT);
    } else {
        // Start from 1 if no records exist
        $nextNumber = str_pad(1, $length, '0', STR_PAD_LEFT);
    }
    // Return the unique code
    return $prefix . $nextNumber;
}


***************************************************************************************************************************
*************************************Activitie**************************************************************************************
***************************************************************************************************************************

namespace App\Exports;

use App\Models\Activities;
use App\Http\Resources\ActivitesExportResources;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;

class ActivitesExport implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    protected $projects;       // Selected project ID
    protected $subprojects;    // Selected subproject ID
    protected $units;          // Dropdown options for units
    protected $rowCount;       // Number of rows to apply formatting rules

    public function __construct($projects, $subprojects)
    {
        $this->projects = $projects;           // Assign selected project
        $this->subprojects = $subprojects;     // Assign selected subproject
        $this->units = getUnit();              // Fetch unit options dynamically
        $this->rowCount = 100;                 // Set maximum rows for the sheet
    }

    /**
     * Collect the data to be exported.
     */
    public function collection()
    {
        $authCompanyId = Auth::guard('company')->user()->id; // Get authenticated company user
        $companyId = searchCompanyId($authCompanyId);        // Search for the actual company ID

        $activities = Activities::with('units', 'project', 'subproject') // Fetch related models
            ->where('company_id', $companyId);

        // Filter by project if selected
        if (!empty($this->projects)) {
            $activities->where('project_id', $this->projects);

            // Further filter by subproject if selected
            if (!empty($this->subprojects)) {
                $activities->where('subproject_id', $this->subprojects);
            }
        }

        // Fetch the activities and add serial numbers (#) to the data
        $data = ActivitesExportResources::collection($activities->get());
        return collect($data->map(function ($item, $index) {
            $item['#'] = $index + 1; // Add serial number starting from 1
            return $item;
        }));
    }

    /**
     * Define the column headings for the export.
     */
    public function headings(): array
    {
        return [
            '#',          // A - Serial number
            'UUID',       // B - Hidden
            'Project',    // C - Hidden
            'Subproject', // D - Hidden
            'Type',       // E
            'SL No',      // F
            'Activities', // G
            'Units',      // H
            'Qty',        // I
            'Rate',       // J
            'Amount',     // K
            'Start Date(dd-mm-yyyy)', // L
            'End Date(dd-mm-yyyy)',   // M
        ];
    }

    /**
     * Register events for formatting and applying rules to the sheet.
     */
    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                // Hide columns B, C, and D
                $this->hideColumns($event, ['B', 'C', 'D']);

                // Apply dropdown validation for "Type" (E) and "Units" (H)
                $this->applyDropdownValidation($event, 'E', ['heading', 'activities']);
                $this->applyDropdownValidation($event, 'H', $this->units);

                // Apply formula for Amount (K = I * J)
                $this->applyCalculationFormula($event, 'K', 'I', 'J');

                // Apply date format for Start Date (L) and End Date (M)
                $this->applyDateFormat($event, 'L');
                $this->applyDateFormat($event, 'M');

                // Apply auto-sizing for all columns
                $this->autoSizeColumns($event, 13); // Total 13 columns
            },
        ];
    }

    /**
     * Hide specified columns.
     */
    private function hideColumns($event, $columns)
    {
        foreach ($columns as $column) {
            $event->sheet->getDelegate()->getColumnDimension($column)->setVisible(false);
        }
    }

    /**
     * Apply dropdown validation to a column.
     */
    private function applyDropdownValidation($event, $column, $options)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $validation = $event->sheet->getCell("{$column}{$row}")->getDataValidation();
            $validation->setType(DataValidation::TYPE_LIST);
            $validation->setErrorStyle(DataValidation::STYLE_STOP);
            $validation->setAllowBlank(false);
            $validation->setShowDropDown(true);
            $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
        }
    }

    /**
     * Apply calculation formula (e.g., K = I * J) to a column.
     */
    private function applyCalculationFormula($event, $resultColumn, $qtyColumn, $rateColumn)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $qtyCell = "{$qtyColumn}{$row}";
            $rateCell = "{$rateColumn}{$row}";
            $resultCell = "{$resultColumn}{$row}";

            // Set the formula for the cell
            $event->sheet->getDelegate()
                ->setCellValue($resultCell, "={$qtyCell}*{$rateCell}");
        }
    }

    /**
     * Apply date format to a column.
     */
    private function applyDateFormat($event, $column)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $cell = "{$column}{$row}";
            $event->sheet->getDelegate()->getStyle($cell)->getNumberFormat()
                ->setFormatCode('dd-mm-yyyy');
        }
    }

    /**
     * Auto-size all columns up to the given column count.
     */
    private function autoSizeColumns($event, $columnCount)
    {
        for ($i = 1; $i <= $columnCount; $i++) {
            $column = Coordinate::stringFromColumnIndex($i);
            $event->sheet->getColumnDimension($column)->setAutoSize(true);
        }
    }
}









namespace App\Exports;

use App\Models\Activities;
use App\Http\Resources\ActivitesExportResources;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;

class ActivitesExport implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    protected $projects;
    protected $subprojects;
    protected $units;
    protected $rowCount;

    public function __construct($projects, $subprojects)
    {
        $this->projects = $projects;
        $this->subprojects = $subprojects;
        $this->units = getUnit(); // Fetch unit options dynamically
        $this->rowCount = 100; // Maximum number of rows
    }

    public function collection()
    {
        $authCompanyId = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompanyId);

        $activities = Activities::with('units', 'project', 'subproject')
            ->where('company_id', $companyId);

        if (!empty($this->projects)) {
            $activities->where('project_id', $this->projects);

            if (!empty($this->subprojects)) {
                $activities->where('subproject_id', $this->subprojects);
            }
        }

        $data = ActivitesExportResources::collection($activities->get());

        // Add serial numbers to the data
        return collect($data->map(function ($item, $index) {
            $item['#'] = $index + 1; // Add serial number starting from 1
            return $item;
        }));
    }

    public function headings(): array
    {
        return [
            '#',          // A
            'UUID',       // B (Hidden)
            'Project',    // C (Hidden)
            'Subproject', // D (Hidden)
            'Type',       // E
            'SL No',      // F
            'Activities', // G
            'Units',      // H
            'Qty',        // I
            'Rate',       // J
            'Amount',     // K
            'Start Date(dd-mm-yyyy)', // L
            'End Date(dd-mm-yyyy)',   // M
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                // Hide columns B, C, D
                $this->hideColumns($event, ['B', 'C', 'D']);

                // Dropdown validation for "Type" (E) and "Units" (H)
                $this->applyDropdownValidation($event, 'E', ['heading', 'activities']);
                $this->applyDropdownValidation($event, 'H', $this->units);

                // Formula for Amount (K = I * J)
                $this->applyCalculationFormula($event, 'K', 'I', 'J');

                // Apply auto-sizing and formatting
                $this->autoSizeColumns($event, 13); // Total 13 columns
            },
        ];
    }

    private function hideColumns($event, $columns)
    {
        foreach ($columns as $column) {
            $event->sheet->getDelegate()->getColumnDimension($column)->setVisible(false);
        }
    }

    private function applyDropdownValidation($event, $column, $options)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $validation = $event->sheet->getCell("{$column}{$row}")->getDataValidation();
            $validation->setType(DataValidation::TYPE_LIST);
            $validation->setErrorStyle(DataValidation::STYLE_STOP);
            $validation->setAllowBlank(false);
            $validation->setShowDropDown(true);
            $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
        }
    }

    private function applyCalculationFormula($event, $resultColumn, $qtyColumn, $rateColumn)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $qtyCell = "{$qtyColumn}{$row}";
            $rateCell = "{$rateColumn}{$row}";
            $resultCell = "{$resultColumn}{$row}";

            $event->sheet->getDelegate()
                ->setCellValue($resultCell, "={$qtyCell}*{$rateCell}");
        }
    }

    private function autoSizeColumns($event, $columnCount)
    {
        for ($i = 1; $i <= $columnCount; $i++) {
            $column = Coordinate::stringFromColumnIndex($i);
            $event->sheet->getColumnDimension($column)->setAutoSize(true);
        }
    }
}





class ActivitesExport implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    protected $projects;
    protected $subprojects;
    protected $units;
    protected $rowCount;

    public function __construct($projects, $subprojects)
    {
        $this->projects = $projects;
        $this->subprojects = $subprojects;

        // Dropdown options for Units and Type
        // $this->units = getUnit(); // Fetch unit options dynamically
        // $this->typeOptions = ['heading', 'activities'];

        $this->rowCount = 100; // Maximum number of rows for applying rules
    }

    public function collection()
    {
        $authCompanyId = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompanyId);

        $activities = Activities::with('units', 'project', 'subproject')
            ->where('company_id', $companyId);

        if (!empty($this->projects)) {
            $activities->where('project_id', $this->projects);

            if (!empty($this->subprojects)) {
                $activities->where('subproject_id', $this->subprojects);
            }
        }

        return collect(ActivitesExportResources::collection($activities->get()));
    }

    public function headings(): array
    {
        return [
            '#',          // A
            'UUID',       // B
            'Project',    // C
            'Subproject', // D
            'Type',       // E
            'SL No',      // F
            'Activities', // G
            'Units',      // H
            'Qty',        // I
            'Rate',       // J
            'Amount',     // K
            'Start Date(dd-mm-yyyy)', // L
            'End Date(dd-mm-yyyy)',   // M
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                // Read-only columns
                $this->setReadOnlyColumns($event, ['B', 'C', 'D']);


                // Dropdown validation for "Type" (E) and "Units" (H)
                $this->applyDropdownValidation($event, 'E', ['heading', 'activities']);
                $this->applyDropdownValidation($event, 'H', $this->units); // Units

                // Formula for Amount (K = I * J)
                $this->applyCalculationFormula($event, 'K', 'I', 'J');

                // Apply auto-sizing and formatting
                $this->autoSizeColumns($event, 13); // Total 13 columns


            },
        ];
    }

    private function setReadOnlyColumns($event, $columns)
    {
        foreach ($columns as $column) {
            for ($row = 2; $row <= $this->rowCount; $row++) {
                $cell = "{$column}{$row}";
                $event->sheet->getDelegate()->getStyle($cell)->getProtection()->setLocked(true);
            }
        }
    }

    private function applyDropdownValidation($event, $column, $options)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $validation = $event->sheet->getCell("{$column}{$row}")->getDataValidation();
            $validation->setType(DataValidation::TYPE_LIST);
            $validation->setErrorStyle(DataValidation::STYLE_STOP);
            $validation->setAllowBlank(false);
            $validation->setShowDropDown(true);
            $validation->setFormula1(sprintf('"%s"', implode(',', is_array($options) ? $options : (array)$options)));
        }
    }

    private function applyCalculationFormula($event, $resultColumn, $qtyColumn, $rateColumn)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $qtyCell = "{$qtyColumn}{$row}";
            $rateCell = "{$rateColumn}{$row}";
            $resultCell = "{$resultColumn}{$row}";

            $event->sheet->getDelegate()
                ->setCellValue($resultCell, "={$qtyCell}*{$rateCell}");
        }
    }

    private function autoSizeColumns($event, $columnCount)
    {
        for ($i = 1; $i <= $columnCount; $i++) {
            $column = Coordinate::stringFromColumnIndex($i);
            $event->sheet->getColumnDimension($column)->setAutoSize(true);
        }
    }
}




class ActivitiesImport implements ToModel, WithHeadingRow
{
    protected $project;
    protected $subproject;
    protected $companyId;
    protected $tmpcachekey;

    public function __construct($project, $subproject, $companyId, $tmpcachekey)
    {
        $this->project = $project;
        $this->subproject = $subproject;
        $this->companyId = $companyId;
        $this->tmpcachekey = $tmpcachekey;
    }

    public function model(array $row)
    {
        Log::info('Excel import process started', $row);

        $companyId = $this->companyId;

        // Null row checking
        if ($this->isNullRow($row)) {
            $this->cacheInvalidRow($row, 'Row is null or contains invalid data');
            return null;
        }

        // Validate the row structure
        if (!$this->isValidSlNo($row, $companyId)) {
            $this->cacheInvalidRow($row, 'Invalid SL No structure');
            return null;
        }

        $parentId = $this->calculateParentId($row['sl_no'], $companyId);

        // Check if the activity already exists
        $existingActivityQuery = Activities::where('project_id', $this->project)
            ->where('company_id', $companyId);

        if ($this->subproject) {
            $existingActivityQuery->where('subproject_id', $this->subproject);
        }

        $existingActivity = $existingActivityQuery->where('id', $row['id'] ?? null)->first();

        if ($existingActivity) {
            $this->updateActivityIfNeeded($existingActivity, $row, $companyId);
        } else {
            return $this->createNewActivity($row, $parentId, $companyId);
        }
    }

    protected function isNullRow(array $row)
    {
        // Check if all required fields are null or empty
        $requiredFields = ['sl_no', 'activities', 'units', 'qty', 'rate', 'start_date', 'end_date'];
        foreach ($requiredFields as $field) {
            if (!isset($row[$field]) || trim($row[$field]) === '') {
                return true;
            }
        }
        return false;
    }

    protected function cacheInvalidRow(array $row, $reason)
    {
        $cachedData = Cache::get($this->tmpcachekey, []);
        $cachedData[] = [
            'row' => $row,
            'reason' => $reason,
        ];
        Cache::put($this->tmpcachekey, $cachedData);
    }

    protected function updateActivityIfNeeded($existingActivity, $row, $companyId)
    {
        $shouldUpdate = (
            $existingActivity->unit_id !== $this->getUnitId($row['units'], $companyId) ||
            $existingActivity->qty != $row['qty'] ||
            $existingActivity->rate != $row['rate'] ||
            $existingActivity->amount != ($row['qty'] * $row['rate'])
        );

        if ($shouldUpdate) {
            $existingActivity->update([
                'unit_id' => $this->getUnitId($row['units'], $companyId),
                'qty' => $row['qty'],
                'rate' => $row['rate'],
                'amount' => $row['qty'] * $row['rate'],
            ]);
            Log::info("Activity updated: {$existingActivity->id}");
        }
    }

    protected function createNewActivity($row, $parentId, $companyId)
    {
        $data = new Activities([
            'uuid' => Str::uuid(),
            'project_id' => $this->project,
            'subproject_id' => $this->subproject,
            'type' => $parentId === null ? 'heading' : 'activities',
            'sl_no' => $row['sl_no'],
            'parent_id' => $parentId,
            'activities' => $row['activities'],
            'unit_id' => $this->getUnitId($row['units'], $companyId),
            'qty' => $row['qty'],
            'rate' => $row['rate'],
            'amount' => $row['qty'] * $row['rate'],
            'start_date' => $row['start_date'],
            'end_date' => $row['end_date'],
            'company_id' => $companyId,
        ]);

        $this->logExportedData($data);

        return $data;
    }

    protected function isValidSlNo(array $row, $companyId)
    {
        $slNoParts = explode('.', $row['sl_no']);
        $slNoCount = count($slNoParts);

        switch ($slNoCount) {
            case 1:
                return true;
            case 2:
                return $this->getCheckSlNo($slNoParts[0], $companyId);
            case 3:
                $slNoCombined = "{$slNoParts[0]}.{$slNoParts[1]}";
                return $this->getCheckSlNo($slNoCombined, $companyId);
            default:
                return false;
        }
    }

    protected function calculateParentId($slNo, $companyId)
    {
        $slNoParts = explode('.', $slNo);
        $slNoCount = count($slNoParts);

        switch ($slNoCount) {
            case 1:
                return null;
            case 2:
                return $this->getCheckParentId($slNoParts[0], $companyId);
            case 3:
                $slNoCombined = "{$slNoParts[0]}.{$slNoParts[1]}";
                return $this->getCheckParentId($slNoCombined, $companyId);
            default:
                return null;
        }
    }

    protected function getCheckParentId($slNoParts, $companyId)
    {
        $data = Activities::where('sl_no', $slNoParts)
            ->where('company_id', $companyId)
            ->latest('id')
            ->first();

        return $data ? $data->id : null;
    }

    protected function getCheckSlNo($slNoParts, $companyId)
    {
        return Activities::where('sl_no', $slNoParts)
            ->where('company_id', $companyId)
            ->exists();
    }

    protected function getUnitId($unitName, $companyId)
    {
        $unitId = nametoid($unitName, 'units');

        return $unitId !== false ? $unitId : createunit($unitName, $companyId);
    }

    protected function logExportedData($data)
    {
        Log::info('Exported Data:', $data->toArray());
    }
}




namespace App\Exports;

use App\Models\Activities;
use App\Http\Resources\ActivitesExportResources;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;

class ActivitesExport implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    protected $unitOptions;
    protected $rowCount;

    public function __construct($projectId, $subprojects)
    {
        $this->projectId = $projectId;
        $this->subprojects = $subprojects;

        // Dropdown options for Units and Type
        $this->unitOptions = getUnit(); // Fetch unit options dynamically
        $this->typeOptions = ['heading', 'activities'];

        $this->rowCount = 100; // Maximum number of rows for applying rules
    }

    public function collection()
    {
        $authCompanyId = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompanyId);

        $activities = Activities::with('units', 'project', 'subproject')
            ->where('company_id', $companyId);

        if (!empty($this->projectId)) {
            $activities->where('project_id', $this->projectId);

            if (!empty($this->subprojects)) {
                $activities->where('subproject_id', $this->subprojects);
            }
        }

        return collect(ActivitesExportResources::collection($activities->get()));
    }

    public function headings(): array
    {
        return [
            '#',          // A
            'UUID',       // B
            'Project',    // C
            'Subproject', // D
            'Type',       // E
            'SL No',      // F
            'Activities', // G
            'Units',      // H
            'Qty',        // I
            'Rate',       // J
            'Amount',     // K
            'Start Date', // L
            'End Date',   // M
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                // Read-only columns
                $this->setReadOnlyColumns($event, ['A', 'B', 'C', 'D']);

                // Dropdown validation for "Type" (E) and "Units" (H)
                $this->applyDropdownValidation($event, 'E', $this->typeOptions);
                $this->applyDropdownValidation($event, 'H', $this->unitOptions);

                // Formula for Amount (K = I * J)
                $this->applyCalculationFormula($event, 'K', 'I', 'J');

                // Apply auto-sizing and formatting
                $this->autoSizeColumns($event, 13); // Total 13 columns
            },
        ];
    }

    private function setReadOnlyColumns($event, $columns)
    {
        foreach ($columns as $column) {
            for ($row = 2; $row <= $this->rowCount; $row++) {
                $cell = "{$column}{$row}";
                $event->sheet->getDelegate()->getStyle($cell)->getProtection()->setLocked(true);
            }
        }
    }

    private function applyDropdownValidation($event, $column, $options)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $validation = $event->sheet->getCell("{$column}{$row}")->getDataValidation();
            $validation->setType(DataValidation::TYPE_LIST);
            $validation->setErrorStyle(DataValidation::STYLE_STOP);
            $validation->setAllowBlank(false);
            $validation->setShowDropDown(true);
            $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
        }
    }

    private function applyCalculationFormula($event, $resultColumn, $qtyColumn, $rateColumn)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $qtyCell = "{$qtyColumn}{$row}";
            $rateCell = "{$rateColumn}{$row}";
            $resultCell = "{$resultColumn}{$row}";

            $event->sheet->getDelegate()
                ->setCellValue($resultCell, "={$qtyCell}*{$rateCell}");
        }
    }

    private function autoSizeColumns($event, $columnCount)
    {
        for ($i = 1; $i <= $columnCount; $i++) {
            $column = Coordinate::stringFromColumnIndex($i);
            $event->sheet->getColumnDimension($column)->setAutoSize(true);
        }
    }
}





use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;
use PhpOffice\PhpSpreadsheet\Style\Alignment;

class ActivitesExport implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    protected $projects;
    protected $subprojects;
    protected $units;
    protected $rowCount;

    public function __construct($projects, $subprojects)
    {
        $this->projects = $projects; // Project dropdown values
        $this->subprojects = $subprojects; // Subproject dropdown values per project
        $this->units = getUnit(); // Unit dropdown values
        $this->rowCount = 100; // Maximum rows for dropdowns and calculations
    }

    public function collection()
    {
        return collect([]); // Empty collection, dropdowns apply for all rows
    }

    public function headings(): array
    {
        return [
            '#',
            'UUID',
            'Project',
            'Subproject',
            'Type',
            'SL No',
            'Activities',
            'Units',
            'Qty',
            'Rate',
            'Amount',
            'Start Date',
            'End Date',
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();

                // Apply dropdowns
                $this->applyDropdown($sheet, 'C', $this->projects); // Project
                $this->applyDependentDropdown($sheet, 'D', $this->projects, $this->subprojects); // Subproject
                $this->applyDropdown($sheet, 'E', ['heading', 'activities']); // Type
                $this->applyDropdown($sheet, 'H', $this->units); // Units

                // Apply calculation (I * J = K)
                $this->applyCalculation($sheet, 'K', 'I', 'J');

                // Format columns
                $this->autoSizeColumns($sheet);
                $this->applyTextWrapping($sheet, 'H', 2); // Wrap text for units column
            },
        ];
    }

    private function applyDropdown($sheet, $column, $options)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $validation = $sheet->getCell("{$column}{$row}")->getDataValidation();
            $this->configureDropdownValidation($validation, $options);
        }
    }

    private function applyDependentDropdown($sheet, $column, $projects, $subprojects)
    {
        foreach ($projects as $projectKey => $projectName) {
            $subprojectOptions = $subprojects[$projectKey] ?? [];

            for ($row = 2; $row <= $this->rowCount; $row++) {
                $validation = $sheet->getCell("{$column}{$row}")->getDataValidation();
                $this->configureDropdownValidation($validation, $subprojectOptions);
            }
        }
    }

    private function applyCalculation($sheet, $targetColumn, $qtyColumn, $rateColumn)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $formula = "={$qtyColumn}{$row}*{$rateColumn}{$row}";
            $sheet->setCellValue("{$targetColumn}{$row}", $formula);
        }
    }

    private function configureDropdownValidation($validation, $options)
    {
        $validation->setType(DataValidation::TYPE_LIST);
        $validation->setErrorStyle(DataValidation::STYLE_INFORMATION);
        $validation->setAllowBlank(false);
        $validation->setShowInputMessage(true);
        $validation->setShowErrorMessage(true);
        $validation->setShowDropDown(true);
        $validation->setErrorTitle('Invalid Input');
        $validation->setError('The value is not in the dropdown list.');
        $validation->setPromptTitle('Pick from list');
        $validation->setPrompt('Please select a value from the dropdown.');
        $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
    }

    private function autoSizeColumns($sheet)
    {
        $columnCount = count($this->headings());
        for ($i = 1; $i <= $columnCount; $i++) {
            $column = Coordinate::stringFromColumnIndex($i);
            $sheet->getColumnDimension($column)->setAutoSize(true);
        }
    }

    private function applyTextWrapping($sheet, $column, $startRow, $endRow = null)
    {
        $endRow = $endRow ?? $sheet->getHighestRow();

        $sheet->getColumnDimension($column)->setWidth(50); // Adjust column width for wrapping
        for ($row = $startRow; $row <= $endRow; $row++) {
            $sheet->getStyle("{$column}{$row}")->getAlignment()->setWrapText(true);
        }
    }
}







class ActivitesExport implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    protected $selects;
    protected $rowCount;
    protected $columnCount;
    protected $projectId;
    protected $subprojects;

    public function __construct($projectId,$subprojects)
    {
        $this->projectId = $projectId;
        $this->subprojects = $subprojects;
        $status = getUnit();

        $this->selects = [
            ['columns_name' => 'H', 'options' => $status],
        ];

        $this->rowCount = 2; // Number of rows for the dropdown
        $this->columnCount = 5; // Number of columns to be auto-sized
    }

    public function collection()
    {
        $authCompanyId = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompanyId);
        $project_id=$this->projectId;
        $subproject_id=$this->subprojects;
        $labours = Activities::with('units', 'project', 'subproject')
            ->where('company_id', $companyId);
            if(!empty($project_id) && !is_null($project_id) ){
                $labours->where('project_id', $project_id);

                if(!empty($subproject_id) && !is_null($subproject_id) ){
                    $labours->where('subproject_id', $subproject_id);
                }
            }
            $labours= $labours->get();
            // dd($labours);
        return collect(ActivitesExportResources::collection($labours));
    }

    public function headings(): array
    {
        return [
            '#',
            'UUID',
            'Project',
            'Subproject',
            'Type',
            'SL No',
            'Activities',
            'Units',
            'Qty',
            'Rate',
            'Amount',
            'Start Date',
            'End Date'
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $startRow = 2; // Starting row for data validation

                foreach ($this->selects as $select) {
                    $dropColumn = $select['columns_name'];
                    $options = $select['options'];

                    $validation = $event->sheet->getCell("{$dropColumn}2")->getDataValidation();
                    $this->configureDataValidation($validation, $options);

                    for ($i = 3; $i <= $this->rowCount; $i++) {
                        $event->sheet->getCell("{$dropColumn}{$i}")->setDataValidation(clone $validation);
                    }
                }

                for ($i = 1; $i <= $this->columnCount; $i++) {
                    $column = Coordinate::stringFromColumnIndex($i);
                    $event->sheet->getColumnDimension($column)->setAutoSize(true);
                }

                $this->applyTextWrapping($event, 'H', $startRow);
            },
        ];
    }

    private function configureDataValidation($validation, $options)
    {
        $validation->setType(DataValidation::TYPE_LIST);
        $validation->setErrorStyle(DataValidation::STYLE_INFORMATION);
        $validation->setAllowBlank(false);
        $validation->setShowInputMessage(true);
        $validation->setShowErrorMessage(true);
        $validation->setShowDropDown(true);
        $validation->setErrorTitle('Input Error');
        $validation->setError('Value is not in the list.');
        $validation->setPromptTitle('Pick from list');
        $validation->setPrompt('Please pick a value from the drop-down list.');
        $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
    }

    private function applyTextWrapping($event, $column, $startRow, $endRow = null)
    {
        $endRow = $endRow ?? $event->sheet->getDelegate()->getHighestRow();

        $event->sheet->getDelegate()->getColumnDimension($column)->setWidth(50);
        for ($row = $startRow; $row <= $endRow; $row++) {
            $cell = $column . $row;
            $event->sheet->getDelegate()->getStyle($cell)->getAlignment()->setWrapText(true);
        }
    }
}







class ActivitiesImport implements ToModel, WithHeadingRow
{
    protected $project;
    protected $subproject;
    protected $companyId;
    protected $tmpcachekey;

    public function __construct($project, $subproject, $companyId, $tmpcachekey)
    {
        $this->project = $project;
        $this->subproject = $subproject;
        $this->companyId = $companyId;
        $this->tmpcachekey = $tmpcachekey;
    }

    public function model(array $row)
    {
        Log::info('Excel import process started', $row);

        // Validate the row structure
        if (!$this->isValidSlNo($row)) {
            $this->cacheInvalidRow($row);
            return null;
        }

        $companyId = $this->companyId;
        $parentId = $this->calculateParentId($row['sl_no']);

        // Check if the same data already exists
        $existingActivity = Activities::where('project_id', $this->project)
            ->when($this->subproject, function ($query) {
                $query->where('subproject_id', $this->subproject);
            })
            ->where('id', $row['id'] ?? null) // Assuming 'id' is present in the row
            ->where('company_id', $companyId)
            ->first();

        if ($existingActivity) {
            $this->updateExistingActivity($existingActivity, $row);
            return null;
        }

        // Create new activity
        $data = new Activities([
            'uuid' => Str::uuid(),
            'project_id' => $this->project,
            'subproject_id' => $this->subproject,
            'type' => $parentId === null ? 'heading' : 'activity',
            'sl_no' => $row['sl_no'],
            'parent_id' => $parentId,
            'activities' => $row['activities'],
            'unit_id' => $this->getUnitId($row['units']),
            'qty' => $row['qty'],
            'rate' => $row['rate'],
            'amount' => $row['qty'] * $row['rate'],
            'start_date' => $row['start_date'],
            'end_date' => $row['end_date'],
            'company_id' => $companyId,
        ]);

        $this->logExportedData($data);
        return $data;
    }

    protected function isValidSlNo(array $row)
    {
        $slNoParts = explode('.', $row['sl_no']);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1 || $slNoCount === null) {
            return true;
        } elseif ($slNoCount === 2) {
            return $this->checkSlNo($slNoParts[0]);
        } elseif ($slNoCount === 3) {
            $slNoCombined = $slNoParts[0] . '.' . $slNoParts[1];
            return $this->checkSlNo($slNoCombined);
        }

        return false;
    }

    protected function calculateParentId($slNo)
    {
        $slNoParts = explode('.', $slNo);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1 || $slNoCount === null) {
            return null;
        } elseif ($slNoCount === 2) {
            return $this->getParentId($slNoParts[0]);
        } elseif ($slNoCount === 3) {
            $slNoCombined = $slNoParts[0] . '.' . $slNoParts[1];
            return $this->getParentId($slNoCombined);
        }

        return null;
    }

    protected function getParentId($slNoParts)
    {
        return Activities::where('sl_no', $slNoParts)
            ->where('company_id', $this->companyId)
            ->value('id'); // Directly fetch ID
    }

    protected function checkSlNo($slNoParts)
    {
        return Activities::where('sl_no', $slNoParts)
            ->where('company_id', $this->companyId)
            ->exists(); // Returns true/false
    }

    protected function getUnitId($unitName)
    {
        $unitId = nametoid($unitName, 'units');

        if ($unitId === false) {
            $unitId = createunit($unitName, $this->companyId);
        }

        return $unitId;
    }

    protected function updateExistingActivity($existingActivity, $row)
    {
        $shouldUpdate = (
            $existingActivity->unit_id !== $this->getUnitId($row['units']) ||
            $existingActivity->qty !== $row['qty'] ||
            $existingActivity->rate !== $row['rate'] ||
            $existingActivity->amount !== $row['qty'] * $row['rate']
        );

        if ($shouldUpdate) {
            $existingActivity->update([
                'unit_id' => $this->getUnitId($row['units']),
                'qty' => $row['qty'],
                'rate' => $row['rate'],
                'amount' => $row['qty'] * $row['rate'],
            ]);
        }
    }

    protected function cacheInvalidRow($row)
    {
        $invalidRows = Cache::get($this->tmpcachekey, []);
        $invalidRows[] = $row;
        Cache::put($this->tmpcachekey, $invalidRows);
    }

    protected function logExportedData($data)
    {
        Log::info('Exported Data:', $data->toArray());
    }
}



class ActivitesImport implements ToModel, WithHeadingRow
{
    protected $project;
    protected $subproject;
    protected $companyId;
    protected $tmpcachekey;

    public function __construct($project, $subproject, $companyId, $tmpcachekey)
    {
        $this->project = $project;
        $this->subproject = $subproject;
        $this->companyId = $companyId;
        $this->tmpcachekey = $tmpcachekey;
    }
    public function model(array $row)
    {
        Log::info('Excel import process started', $row);

        $companyId = $this->companyId;

        // Validate the row structure
        if ($this->isValidSlNo($row, $companyId)) {
            $parentId = $this->calculateParentId($row['sl_no'], $companyId);
            // dd($row);
            // Check if the same data already exists
            $activitId=$row[""];
            $existingActivity = Activities::where('project_id', $this->project);
                if($this->subproject){
                    $existingActivity=$existingActivity->where('subproject_id', $this->subproject);
                }
                // ->where('uuid', $row['uuid'])
                $existingActivity= $existingActivity->where('id', $activitId)
                ->where('company_id', $companyId)
                ->first();

                // dd($existingActivity);
            // If data exists, compare and update if different
            if ($existingActivity) {
                // dd($existingActivity);
                $shouldUpdate = (
                    $existingActivity->unit_id !== $this->getUnitId($row['units'], $companyId) ||
                    $existingActivity->qty !== $row['qty'] ||
                    $existingActivity->rate !== $row['rate'] ||
                    $existingActivity->amount !== $row['qty'] * $row['rate']
                );
                if ($shouldUpdate) {
                    $existingActivity->update([
                        'unit_id' => $this->getUnitId($row['units'], $companyId),
                        'qty' => $row['qty'],
                        'rate' => $row['rate'],
                        'amount' => $row['qty'] * $row['rate'],
                    ]);
                }else{
                    $data= new Activities([
                        'uuid' => Str::uuid(),
                        'project_id' => $this->project,
                        'subproject_id' => $this->subproject,
                        'type' => $parentId === null ? 'heading' : 'activites',
                        'sl_no' => $row['sl_no'],
                        'parent_id' => $parentId,
                        'activities' => $row['activities'],
                        'unit_id' => $this->getUnitId($row['unit_id'], $companyId),
                        'qty' => $row['qty'],
                        'rate' => $row['rate'],
                        'amount' => $row['qty'] * $row['rate'],
                        'start_date' => $row['start_date'],
                        'end_date' => $row['end_date'],
                        'company_id' => $companyId,
                    ]);
                    $this->logExportedData($data);
                                return $data;
                }
            }

        } else {
            // Cache invalid rows
            $arr = Cache::get($this->tmpcachekey, []);
            $arr[] = $row;
            Cache::put($this->tmpcachekey, $arr);
        }
    }

    protected function isValidSlNo(array $row, $companyId)
    {
        $slNoParts = explode('.', $row['sl_no']);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1 || $slNoCount === null) {
            return true;
        } elseif ($slNoCount === 2) {
            return $this->getCheckSlNo($slNoParts[0], $companyId);
        } elseif ($slNoCount === 3) {
            $slNoCombined = $slNoParts[0] . '.' . $slNoParts[1];
            return $this->getCheckSlNo($slNoCombined, $companyId);
        }

        return false;
    }

    protected function calculateParentId($slNo, $companyId)
    {
        $slNoParts = explode('.', $slNo);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1 || $slNoCount === null) {
            return null;
        } elseif ($slNoCount === 2) {
            return $this->getCheckParentId($slNoParts[0], $companyId);
        } elseif ($slNoCount === 3) {
            $slNoCombined = $slNoParts[0] . '.' . $slNoParts[1];
            return $this->getCheckParentId($slNoCombined, $companyId);
        }

        return null;
    }

    protected function getCheckParentId($slNoParts, $companyId)
    {
        $data = Activities::where('sl_no', $slNoParts)
            ->where('company_id', $companyId)
            ->orderBy('id', 'DESC')
            ->first();

        return $data ? $data->id : null;
    }

    protected function getCheckSlNo($slNoParts, $companyId)
    {
        $data = Activities::where('sl_no', $slNoParts)
            ->where('company_id', $companyId)
            ->orderBy('id', 'DESC')
            ->first();

        return $data !== null;
    }

    protected function getUnitId($unitName, $companyId)
    {
        $unitId = nametoid($unitName, 'units');

        if ($unitId === false) {
            $unitId = createunit($unitName, $companyId);
        }

        return $unitId;
    }
    protected function logExportedData($data)
    {
        Log::info('Exported Data:', [
            'uuid' => $data->uuid,
            'project_id' => $data->project_id,
            'subproject_id' => $data->subproject_id,
            'type' => $data->type,
            'sl_no' => $data->sl_no,
            'activities' => $data->activities,
            'unit_id' => $data->unit_id,
            'qty' => $data->qty,
            'rate' => $data->rate,
            'amount' => $data->amount,
            'start_date' => $data->start_date,
            'end_date' => $data->end_date,
            'company_id' => $data->company_id,
        ]);
    }
}
