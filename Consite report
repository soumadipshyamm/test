












public function import(Request $request)
    {
        $authConpany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authConpany);
        $checkAdditionalFeatures = fetchDataActivities($companyId, $request->project);
        $isSubscription = checkSubscriptionPermission($companyId, 'activities');
        if (count($checkAdditionalFeatures) < $isSubscription->is_subscription) {
            try {
                $file = $request->file('file');
                $project = $request->project;
                $subproject = $request->subproject;
                $tmpcachekey = 'tmpcachekey';
                Cache::put($tmpcachekey, []);
                $datatImport = Excel::import(new ActivitesImport($project, $subproject, $companyId, $tmpcachekey), $file);
                $importedData =  Cache::get($tmpcachekey);
                if (count($importedData) == 0) {
                    return redirect()->route('company.activities.list')->with('success', 'Import Data Uploaded Successfully');
                } else {
                    return redirect()->route('company.activities.nonImportData');
                }
            } catch (\Exception $e) {
                // Log the error message
                Log::error('Error importing Excel file: ' . $e->getMessage());
                return redirect()->back()->with('error', 'Error importing Excel file');
            }
        } else {
            return redirect()
                ->back()
                // ->route('company.subscription.list')
                ->with('expired', true);
        }
    }




****************************************************************************************************************************************************

<?php

namespace App\Exports;

use App\Models\Activities;
use App\Http\Resources\ActivitesExportResources;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;

class ActivitesExport implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    protected $selects;
    protected $rowCount;
    protected $columnCount;
    protected $projectId;

    public function __construct($projectId)
    {
        $this->projectId = $projectId;
        $status = getUnit();

        $this->selects = [
            ['columns_name' => 'F', 'options' => $status],
        ];

        $this->rowCount = 2; // Number of rows for the dropdown
        $this->columnCount = 5; // Number of columns to be auto-sized
    }

    public function collection()
    {
        $authCompanyId = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompanyId);

        $labours = Activities::with('units', 'project', 'subproject')
            ->where('company_id', $companyId)
            ->where('project_id', $this->projectId)
            ->get();

        return collect(ActivitesExportResources::collection($labours));
    }

    public function headings(): array
    {
        return [
            '#',
            'UUID',
            'Project',
            'Subproject',
            'Type',
            'SL No',
            'Activities',
            'Units',
            'Qty',
            'Rate',
            'Amount',
            'Start Date',
            'End Date'
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $startRow = 2; // Starting row for data validation

                foreach ($this->selects as $select) {
                    $dropColumn = $select['columns_name'];
                    $options = $select['options'];

                    $validation = $event->sheet->getCell("{$dropColumn}2")->getDataValidation();
                    $this->configureDataValidation($validation, $options);

                    for ($i = 3; $i <= $this->rowCount; $i++) {
                        $event->sheet->getCell("{$dropColumn}{$i}")->setDataValidation(clone $validation);
                    }
                }

                for ($i = 1; $i <= $this->columnCount; $i++) {
                    $column = Coordinate::stringFromColumnIndex($i);
                    $event->sheet->getColumnDimension($column)->setAutoSize(true);
                }

                $this->applyTextWrapping($event, 'H', $startRow);
            },
        ];
    }

    private function configureDataValidation($validation, $options)
    {
        $validation->setType(DataValidation::TYPE_LIST);
        $validation->setErrorStyle(DataValidation::STYLE_INFORMATION);
        $validation->setAllowBlank(false);
        $validation->setShowInputMessage(true);
        $validation->setShowErrorMessage(true);
        $validation->setShowDropDown(true);
        $validation->setErrorTitle('Input Error');
        $validation->setError('Value is not in the list.');
        $validation->setPromptTitle('Pick from list');
        $validation->setPrompt('Please pick a value from the drop-down list.');
        $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
    }

    private function applyTextWrapping($event, $column, $startRow, $endRow = null)
    {
        $endRow = $endRow ?? $event->sheet->getDelegate()->getHighestRow();

        $event->sheet->getDelegate()->getColumnDimension($column)->setWidth(50);
        for ($row = $startRow; $row <= $endRow; $row++) {
            $cell = $column . $row;
            $event->sheet->getDelegate()->getStyle($cell)->getAlignment()->setWrapText(true);
        }
    }
}
