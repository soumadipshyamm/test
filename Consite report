class ActivitesImport implements ToModel, WithHeadingRow
{
    protected $project;
    protected $subproject;
    protected $companyId;
    protected $tmpcachekey;

    public function __construct($project, $subproject, $companyId, $tmpcachekey)
    {
        $this->project = $project;
        $this->subproject = $subproject;
        $this->companyId = $companyId;
        $this->tmpcachekey = $tmpcachekey;
    }
    public function model(array $row)
    {
        Log::info('Excel import process started', $row);

        $companyId = $this->companyId;

        // Validate the row structure
        if ($this->isValidSlNo($row, $companyId)) {
            $parentId = $this->calculateParentId($row['sl_no'], $companyId);
            // dd($row);
            // Check if the same data already exists
            $activitId=$row[""];
            $existingActivity = Activities::where('project_id', $this->project);
                if($this->subproject){
                    $existingActivity=$existingActivity->where('subproject_id', $this->subproject);
                }
                // ->where('uuid', $row['uuid'])
                $existingActivity= $existingActivity->where('id', $activitId)
                ->where('company_id', $companyId)
                ->first();

                // dd($existingActivity);
            // If data exists, compare and update if different
            if ($existingActivity) {
                // dd($existingActivity);
                $shouldUpdate = (
                    $existingActivity->unit_id !== $this->getUnitId($row['units'], $companyId) ||
                    $existingActivity->qty !== $row['qty'] ||
                    $existingActivity->rate !== $row['rate'] ||
                    $existingActivity->amount !== $row['qty'] * $row['rate']
                );
                if ($shouldUpdate) {
                    $existingActivity->update([
                        'unit_id' => $this->getUnitId($row['units'], $companyId),
                        'qty' => $row['qty'],
                        'rate' => $row['rate'],
                        'amount' => $row['qty'] * $row['rate'],
                    ]);
                }else{
                    $data= new Activities([
                        'uuid' => Str::uuid(),
                        'project_id' => $this->project,
                        'subproject_id' => $this->subproject,
                        'type' => $parentId === null ? 'heading' : 'activites',
                        'sl_no' => $row['sl_no'],
                        'parent_id' => $parentId,
                        'activities' => $row['activities'],
                        'unit_id' => $this->getUnitId($row['unit_id'], $companyId),
                        'qty' => $row['qty'],
                        'rate' => $row['rate'],
                        'amount' => $row['qty'] * $row['rate'],
                        'start_date' => $row['start_date'],
                        'end_date' => $row['end_date'],
                        'company_id' => $companyId,
                    ]);
                    $this->logExportedData($data);
                                return $data;
                }
            }

        } else {
            // Cache invalid rows
            $arr = Cache::get($this->tmpcachekey, []);
            $arr[] = $row;
            Cache::put($this->tmpcachekey, $arr);
        }
    }

    protected function isValidSlNo(array $row, $companyId)
    {
        $slNoParts = explode('.', $row['sl_no']);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1 || $slNoCount === null) {
            return true;
        } elseif ($slNoCount === 2) {
            return $this->getCheckSlNo($slNoParts[0], $companyId);
        } elseif ($slNoCount === 3) {
            $slNoCombined = $slNoParts[0] . '.' . $slNoParts[1];
            return $this->getCheckSlNo($slNoCombined, $companyId);
        }

        return false;
    }

    protected function calculateParentId($slNo, $companyId)
    {
        $slNoParts = explode('.', $slNo);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1 || $slNoCount === null) {
            return null;
        } elseif ($slNoCount === 2) {
            return $this->getCheckParentId($slNoParts[0], $companyId);
        } elseif ($slNoCount === 3) {
            $slNoCombined = $slNoParts[0] . '.' . $slNoParts[1];
            return $this->getCheckParentId($slNoCombined, $companyId);
        }

        return null;
    }

    protected function getCheckParentId($slNoParts, $companyId)
    {
        $data = Activities::where('sl_no', $slNoParts)
            ->where('company_id', $companyId)
            ->orderBy('id', 'DESC')
            ->first();

        return $data ? $data->id : null;
    }

    protected function getCheckSlNo($slNoParts, $companyId)
    {
        $data = Activities::where('sl_no', $slNoParts)
            ->where('company_id', $companyId)
            ->orderBy('id', 'DESC')
            ->first();

        return $data !== null;
    }

    protected function getUnitId($unitName, $companyId)
    {
        $unitId = nametoid($unitName, 'units');

        if ($unitId === false) {
            $unitId = createunit($unitName, $companyId);
        }

        return $unitId;
    }
    protected function logExportedData($data)
    {
        Log::info('Exported Data:', [
            'uuid' => $data->uuid,
            'project_id' => $data->project_id,
            'subproject_id' => $data->subproject_id,
            'type' => $data->type,
            'sl_no' => $data->sl_no,
            'activities' => $data->activities,
            'unit_id' => $data->unit_id,
            'qty' => $data->qty,
            'rate' => $data->rate,
            'amount' => $data->amount,
            'start_date' => $data->start_date,
            'end_date' => $data->end_date,
            'company_id' => $data->company_id,
        ]);
    }
}
