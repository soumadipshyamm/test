\

<?php

namespace App\Imports;

use App\Models\Activities;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\WithHeadingRow;

class ActivitesImport implements ToModel, WithHeadingRow
{
    protected $project;
    protected $subproject;
    protected $companyId;
    protected $cacheKey;

    public function __construct($project, $subproject, $companyId, $cacheKey)
    {
        $this->project = $project;
        $this->subproject = $subproject;
        $this->companyId = $companyId;
        $this->cacheKey = $cacheKey;
    }

    public function model(array $row)
    {
        // Log each row for debugging
        Log::info('Processing row for import', $row);

        if (!$this->isValidRow($row)) {
            $this->cacheInvalidRow($row);
            return null;
        }

        $parentId = $this->determineParentId($row['sl_no']);

        // Check for existing data
        $existingActivity = $this->findExistingActivity($row['sl_no']);
        $unitId = $this->resolveUnitId($row['unit_id']);

        if ($existingActivity) {
            $this->updateIfChanged($existingActivity, $row, $unitId);
            return null;
        }

        // Create new activity
        return $this->createNewActivity($row, $unitId, $parentId);
    }

    /**
     * Validate row structure and required fields.
     */
    protected function isValidRow(array $row): bool
    {
        return isset($row['sl_no'], $row['activities'], $row['unit_id'], $row['qty'], $row['rate']);
    }

    /**
     * Cache invalid rows for further processing or debugging.
     */
    protected function cacheInvalidRow(array $row): void
    {
        $invalidRows = Cache::get($this->cacheKey, []);
        $invalidRows[] = $row;
        Cache::put($this->cacheKey, $invalidRows);
    }

    /**
     * Determine the parent ID based on the SL No.
     */
    protected function determineParentId(string $slNo): ?int
    {
        $slNoParts = explode('.', $slNo);
        $slNoKey = count($slNoParts) === 3
            ? implode('.', array_slice($slNoParts, 0, 2))
            : $slNoParts[0];

        return $this->getParentIdFromSlNo($slNoKey);
    }

    /**
     * Find an existing activity by SL No.
     */
    protected function findExistingActivity(string $slNo): ?Activities
    {
        return Activities::where('project_id', $this->project)
            ->where('subproject_id', $this->subproject)
            ->where('sl_no', $slNo)
            ->where('company_id', $this->companyId)
            ->first();
    }

    /**
     * Update an activity if any relevant fields have changed.
     */
    protected function updateIfChanged(Activities $activity, array $row, int $unitId): void
    {
        $updatedData = [
            'unit_id' => $unitId,
            'qty' => $row['qty'],
            'rate' => $row['rate'],
            'amount' => $row['qty'] * $row['rate'],
        ];

        if (!$this->isDataUnchanged($activity, $updatedData)) {
            $activity->update($updatedData);
        }
    }

    /**
     * Check if the given data matches the existing activity.
     */
    protected function isDataUnchanged(Activities $activity, array $data): bool
    {
        return $activity->unit_id == $data['unit_id'] &&
               $activity->qty == $data['qty'] &&
               $activity->rate == $data['rate'] &&
               $activity->amount == $data['amount'];
    }

    /**
     * Create a new activity record.
     */
    protected function createNewActivity(array $row, int $unitId, ?int $parentId): Activities
    {
        return new Activities([
            'uuid' => Str::uuid(),
            'project_id' => $this->project,
            'subproject_id' => $this->subproject,
            'type' => $parentId === null ? 'heading' : 'activities',
            'sl_no' => $row['sl_no'],
            'parent_id' => $parentId,
            'activities' => $row['activities'],
            'unit_id' => $unitId,
            'qty' => $row['qty'],
            'rate' => $row['rate'],
            'amount' => $row['qty'] * $row['rate'],
            'start_date' => $row['start_date'],
            'end_date' => $row['end_date'],
            'company_id' => $this->companyId,
        ]);
    }

    /**
     * Resolve or create the unit ID from the unit name.
     */
    protected function resolveUnitId(string $unitName): int
    {
        $unitId = nametoid($unitName, 'units');
        return $unitId !== false ? $unitId : createunit($unitName, $this->companyId);
    }

    /**
     * Get parent ID from SL No.
     */
    protected function getParentIdFromSlNo(string $slNo): ?int
    {
        $activity = Activities::where('sl_no', $slNo)
            ->where('company_id', $this->companyId)
            ->orderBy('id', 'desc')
            ->first();

        return $activity ? $activity->id : null;
    }
}












<?php

namespace App\Imports;

use App\Models\Activities;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\WithHeadingRow;

class ActivitesImport implements ToModel, WithHeadingRow
{
    protected $project;
    protected $subproject;
    protected $companyId;
    protected $tmpcachekey;

    public function __construct($project, $subproject, $companyId, $tmpcachekey)
    {
        $this->project = $project;
        $this->subproject = $subproject;
        $this->companyId = $companyId;
        $this->tmpcachekey = $tmpcachekey;
    }

    public function model(array $row)
    {
        Log::info('Excel import process started', $row);

        $companyId = $this->companyId;

        // Validate the row structure
        if ($this->isValidSlNo($row, $companyId)) {
            $parentId = $this->calculateParentId($row['sl_no'], $companyId);

            // Check if the same data already exists
            $existingActivity = Activities::where('project_id', $this->project)
                ->where('subproject_id', $this->subproject)
                ->where('sl_no', $row['sl_no'])
                ->where('company_id', $companyId)
                ->first();

            // If data exists, compare and update if different
            if ($existingActivity) {
                $shouldUpdate = (
                    $existingActivity->unit_id !== $this->getUnitId($row['unit_id'], $companyId) ||
                    $existingActivity->qty !== $row['qty'] ||
                    $existingActivity->rate !== $row['rate'] ||
                    $existingActivity->amount !== $row['qty'] * $row['rate']
                );

                if ($shouldUpdate) {
                    $existingActivity->update([
                        'unit_id' => $this->getUnitId($row['unit_id'], $companyId),
                        'qty' => $row['qty'],
                        'rate' => $row['rate'],
                        'amount' => $row['qty'] * $row['rate'],
                    ]);
                }

                // Skip creating a new entry
                return null;
            }

            // Create a new activity if it doesn't exist
            return new Activities([
                'uuid' => Str::uuid(),
                'project_id' => $this->project,
                'subproject_id' => $this->subproject,
                'type' => $parentId === null ? 'heading' : 'activites',
                'sl_no' => $row['sl_no'],
                'parent_id' => $parentId,
                'activities' => $row['activities'],
                'unit_id' => $this->getUnitId($row['unit_id'], $companyId),
                'qty' => $row['qty'],
                'rate' => $row['rate'],
                'amount' => $row['qty'] * $row['rate'],
                'start_date' => $row['start_date'],
                'end_date' => $row['end_date'],
                'company_id' => $companyId,
            ]);
        } else {
            // Cache invalid rows
            $arr = Cache::get($this->tmpcachekey, []);
            $arr[] = $row;
            Cache::put($this->tmpcachekey, $arr);
        }
    }

    protected function isValidSlNo(array $row, $companyId)
    {
        $slNoParts = explode('.', $row['sl_no']);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1 || $slNoCount === null) {
            return true;
        } elseif ($slNoCount === 2) {
            return $this->getCheckSlNo($slNoParts[0], $companyId);
        } elseif ($slNoCount === 3) {
            $slNoCombined = $slNoParts[0] . '.' . $slNoParts[1];
            return $this->getCheckSlNo($slNoCombined, $companyId);
        }

        return false;
    }

    protected function calculateParentId($slNo, $companyId)
    {
        $slNoParts = explode('.', $slNo);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1 || $slNoCount === null) {
            return null;
        } elseif ($slNoCount === 2) {
            return $this->getCheckParentId($slNoParts[0], $companyId);
        } elseif ($slNoCount === 3) {
            $slNoCombined = $slNoParts[0] . '.' . $slNoParts[1];
            return $this->getCheckParentId($slNoCombined, $companyId);
        }

        return null;
    }

    protected function getCheckParentId($slNoParts, $companyId)
    {
        $data = Activities::where('sl_no', $slNoParts)
            ->where('company_id', $companyId)
            ->orderBy('id', 'DESC')
            ->first();

        return $data ? $data->id : null;
    }

    protected function getCheckSlNo($slNoParts, $companyId)
    {
        $data = Activities::where('sl_no', $slNoParts)
            ->where('company_id', $companyId)
            ->orderBy('id', 'DESC')
            ->first();

        return $data !== null;
    }

    protected function getUnitId($unitName, $companyId)
    {
        $unitId = nametoid($unitName, 'units');

        if ($unitId === false) {
            $unitId = createunit($unitName, $companyId);
        }

        return $unitId;
    }
}





<?php

namespace App\Imports;

use App\Models\Activities;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\WithHeadingRow;

class ActivitesImport implements ToModel, WithHeadingRow
{
    protected $project;
    protected $subproject;
    protected $companyId;
    protected $tmpCacheKey;

    public function __construct($project, $subproject, $companyId, $tmpCacheKey)
    {
        $this->project = $project;
        $this->subproject = $subproject;
        $this->companyId = $companyId;
        $this->tmpCacheKey = $tmpCacheKey;
    }

    public function model(array $row)
    {
        Log::info('Excel import row: ', $row);

        if ($this->isValidSlNo($row, $this->companyId)) {
            $parentId = $this->calculateParentId($row['sl_no'], $this->companyId);

            $data = new Activities([
                'uuid' => Str::uuid(),
                'project_id' => $this->project,
                'subproject_id' => $this->subproject,
                'type' => $parentId === null ? 'heading' : 'activities',
                'sl_no' => $row['sl_no'],
                'parent_id' => $parentId,
                'activities' => $row['activities'],
                'unit_id' => $this->getUnitId($row['unit_id'], $this->companyId),
                'qty' => $row['qty'],
                'rate' => $row['rate'],
                'amount' => $row['qty'] * $row['rate'],
                'start_date' => $row['start_date'],
                'end_date' => $row['end_date'],
                'company_id' => $this->companyId,
            ]);

            $this->logExportedData($data);
            return $data;
        } else {
            $cachedData = Cache::get($this->tmpCacheKey, []);
            $cachedData[] = $row;
            Cache::put($this->tmpCacheKey, $cachedData);
        }
    }

    protected function isValidSlNo(array $row, $companyId)
    {
        $slNoParts = explode('.', $row['sl_no']);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1) {
            return true;
        } elseif ($slNoCount === 2 || $slNoCount === 3) {
            $slNoCombined = $slNoCount === 2 ? $slNoParts[0] : $slNoParts[0] . '.' . $slNoParts[1];
            return $this->getCheckSlNo($slNoCombined, $companyId);
        }

        return false;
    }

    protected function calculateParentId($slNo, $companyId)
    {
        $slNoParts = explode('.', $slNo);
        $slNoCount = count($slNoParts);

        if ($slNoCount === 1) {
            return null;
        } elseif ($slNoCount === 2 || $slNoCount === 3) {
            $slNoCombined = $slNoCount === 2 ? $slNoParts[0] : $slNoParts[0] . '.' . $slNoParts[1];
            return $this->getCheckParentId($slNoCombined, $companyId);
        }

        return null;
    }

    protected function getCheckParentId($slNoParts, $companyId)
    {
        $data = Activities::where('sl_no', $slNoParts)
            ->where('company_id', $companyId)
            ->orderBy('id', 'DESC')
            ->first();

        return $data?->id;
    }

    protected function getCheckSlNo($slNoParts, $companyId)
    {
        $data = Activities::where('sl_no', $slNoParts)
            ->where('company_id', $companyId)
            ->orderBy('id', 'DESC')
            ->first();

        return $data !== null;
    }

    protected function getUnitId($unitName, $companyId)
    {
        $unitId = nametoid($unitName, 'units');

        if ($unitId === false) {
            $unitId = createunit($unitName, $companyId);
        }

        return $unitId;
    }

    protected function logExportedData($data)
    {
        Log::info('Exported Data:', [
            'uuid' => $data->uuid,
            'project_id' => $data->project_id,
            'subproject_id' => $data->subproject_id,
            'type' => $data->type,
            'sl_no' => $data->sl_no,
            'activities' => $data->activities,
            'unit_id' => $data->unit_id,
            'qty' => $data->qty,
            'rate' => $data->rate,
            'amount' => $data->amount,
            'start_date' => $data->start_date,
            'end_date' => $data->end_date,
            'company_id' => $data->company_id,
        ]);
    }
}








********************************Controller 

class ActivitiesController extends Controller
{
    public function import(Request $request)
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        $additionalFeatures = fetchDataActivities($companyId, $request->project);
        $subscription = checkSubscriptionPermission($companyId, 'activities');

        if (count($additionalFeatures) < $subscription->is_subscription) {
            try {
                $file = $request->file('file');
                $project = $request->project;
                $subproject = $request->subproject;
                $cacheKey = 'tmpcachekey';

                Cache::put($cacheKey, []);

                Excel::import(new ActivitesImport($project, $subproject, $companyId, $cacheKey), $file);
                $importedData = Cache::get($cacheKey);

                if (empty($importedData)) {
                    return redirect()->route('company.activities.list')
                        ->with('success', 'Import Data Uploaded Successfully');
                } else {
                    return redirect()->route('company.activities.nonImportData');
                }
            } catch (\Exception $e) {
                Log::error('Error importing Excel file: ' . $e->getMessage());

                return redirect()->back()
                    ->with('error', 'Error importing Excel file');
            }
        } else {
            return redirect()->back()
                ->with('expired', true);
        }
    }
}




****************************************************************************************************************************************************

<?php

namespace App\Exports;

use App\Models\Activities;
use App\Http\Resources\ActivitesExportResources;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;

class ActivitesExport implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    protected $selects;
    protected $rowCount;
    protected $columnCount;
    protected $projectId;

    public function __construct($projectId)
    {
        $this->projectId = $projectId;
        $status = getUnit();

        $this->selects = [
            ['columns_name' => 'F', 'options' => $status],
        ];

        $this->rowCount = 2; // Number of rows for the dropdown
        $this->columnCount = 5; // Number of columns to be auto-sized
    }

    public function collection()
    {
        $authCompanyId = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompanyId);

        $labours = Activities::with('units', 'project', 'subproject')
            ->where('company_id', $companyId)
            ->where('project_id', $this->projectId)
            ->get();

        return collect(ActivitesExportResources::collection($labours));
    }

    public function headings(): array
    {
        return [
            '#',
            'UUID',
            'Project',
            'Subproject',
            'Type',
            'SL No',
            'Activities',
            'Units',
            'Qty',
            'Rate',
            'Amount',
            'Start Date',
            'End Date'
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $startRow = 2; // Starting row for data validation

                foreach ($this->selects as $select) {
                    $dropColumn = $select['columns_name'];
                    $options = $select['options'];

                    $validation = $event->sheet->getCell("{$dropColumn}2")->getDataValidation();
                    $this->configureDataValidation($validation, $options);

                    for ($i = 3; $i <= $this->rowCount; $i++) {
                        $event->sheet->getCell("{$dropColumn}{$i}")->setDataValidation(clone $validation);
                    }
                }

                for ($i = 1; $i <= $this->columnCount; $i++) {
                    $column = Coordinate::stringFromColumnIndex($i);
                    $event->sheet->getColumnDimension($column)->setAutoSize(true);
                }

                $this->applyTextWrapping($event, 'H', $startRow);
            },
        ];
    }

    private function configureDataValidation($validation, $options)
    {
        $validation->setType(DataValidation::TYPE_LIST);
        $validation->setErrorStyle(DataValidation::STYLE_INFORMATION);
        $validation->setAllowBlank(false);
        $validation->setShowInputMessage(true);
        $validation->setShowErrorMessage(true);
        $validation->setShowDropDown(true);
        $validation->setErrorTitle('Input Error');
        $validation->setError('Value is not in the list.');
        $validation->setPromptTitle('Pick from list');
        $validation->setPrompt('Please pick a value from the drop-down list.');
        $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
    }

    private function applyTextWrapping($event, $column, $startRow, $endRow = null)
    {
        $endRow = $endRow ?? $event->sheet->getDelegate()->getHighestRow();

        $event->sheet->getDelegate()->getColumnDimension($column)->setWidth(50);
        for ($row = $startRow; $row <= $endRow; $row++) {
            $cell = $column . $row;
            $event->sheet->getDelegate()->getStyle($cell)->getAlignment()->setWrapText(true);
        }
    }
}
