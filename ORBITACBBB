


use Carbon\Carbon;

function getBaseFareFromTimeSlot(array $fares): ?string
{
    $now = Carbon::now()->format('H:i:s');
    $fallback = null;

    foreach ($fares as $fare) {
        $start = $fare['start'];
        $end = $fare['end'];

        if ($now >= $start && $now <= $end) {
            return $fare['base_fare']; // Exact match
        }

        // Check if it's a fallback candidate (past start time)
        if ($start <= $now) {
            $fallback = $fare;
        }
    }

    return $fallback['base_fare'] ?? null; // Return fallback if any, otherwise null
}




array:2 [ // app\Helpers\Utilities.php:1818
  0 => array:16 [
    "id" => 13
    "uuid" => "5eeb62e7-f293-40eb-a28e-a3c5cdd77aad"
    "category_id" => 30
    "zone_id" => null
    "rate_per_km" => 10.0
    "start" => "00:00:00"
    "end" => "23:59:00"

    "base_fare" => "30"
    "rate_per_minute" => "0"
    "waiting_charge" => "0"
    "toll_mcd_charge" => "0"
  ]
  1 => array:16 [
    "id" => 18
    "uuid" => "d47c58ce-172e-437c-9da1-8d3a8acac839"
    "category_id" => 30
    "zone_id" => null
    "rate_per_km" => 12.0
    "start" => "05:00:00"
    "end" => "23:59:00"

    "base_fare" => "30"
    "rate_per_minute" => "12"
    "waiting_charge" => "12"
    "toll_mcd_charge" => "12"
  ]
]
filter a current time between start, end if do not match a current time  check  before time   and return base_fare

















Website: https://adminapp.caborbit.com/login
userId : super.admin@orbitcab.com
Password : secret
 
Customer : https://wormhole.app/l3lqx1#XuIvkyvHXPihstM4SMMmDQ
Driver : https://i.diawi.com/4uMSQT








 public function acceptOrRejectBooking(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'uuid' => 'required|uuid|exists:bookings,uuid',
            'is_accepted' => 'required',
        ]);
        if ($validator->fails()) {
            return $this->responseJson(false, 422, $validator->errors()->first(), "");
        }
        $id = uuidtoid($request->uuid, 'bookings');
        $bookings = Booking::where('id', $id)->first();
        if (!$bookings) {
            return $this->responseJson(false, 404, __('Booking not found'), []);
        }
        // Check if the booking is already accepted
        if ($bookings->driver_id != null && $request->is_accepted == 2 && in_array($bookings->status, [1, 2, 3])) {
            return $this->responseJson(false, 403, __('Already Accepted'), []);
        }
        // dd($bookings->driver_id == null  && $bookings->status == 7 && $bookings->is_accepted == 1);
        // Check if the booking is canceled by the customer
        if ($bookings->driver_id == null && $bookings->is_accepted == 1 &&  $bookings->status == 7) {
            return $this->responseJson(false, 403, __('This Booking Is Canceled By Customer'), []);
        }
        $fcmTokens = $bookings->users?->device_token;
        $verificationCode = rand(1000, 9999);
        DB::beginTransaction();
        // try {
        if ($request->is_accepted == 2) {
            $bookings->update([
                'is_accepted' => $request->is_accepted,
                'page_no' => 1,
                'verification_code' => $verificationCode,
                'driver_id' => auth()->user()->id,
            ]);
        }

        $bookings->bookingDrivers()->updateOrCreate(['booking_id' => $id], [
            'booking_id' => $id,
            'user_id' => auth()->user()->id,
            'status' => $request->is_accepted // is_accepted: 2, cancel ride: 3 for driver end
        ]);

        BookingRequestDriver::where('driver_id', auth()->user()->id)->where('booking_id',$bookings->id)->update([
            'status' => 1
        ]);
        BookingRequestDriver::where('driver_id', '!=', auth()->user()->id)->where('booking_id',$bookings->id)->update([
            'status' => 2
        ]);
        BookingLog::create([
            'booking_id' => $bookings->id,
            'user_id' => auth()->user()->id,
            'status' => 3, // on the way to ride
            'comment' => "Your cab is on the way"
        ]);
        if ($bookings->is_accepted == 2) {
            $plate_no = $bookings?->driver?->vehicles?->first()->plate_no ?? '';
            DB::commit();
            $requestparamVendor = (object)[
                'body' => 'Your Vehicle No: ' . $plate_no,
                'title' => 'Your cab is on the way',
                'image' => asset('app-assets/images/Group.png'),
                'data' => 'Your Vehicle No: ' . $plate_no,
            ];
            $this->sendNotification($requestparamVendor, $fcmTokens);
            $cancelledRequests = BookingRequestDriver::where(['booking_id' => $bookings->id, 'status' => 2])->get();
            info("****************************************");
            info( $cancelledRequests);
        //    dd($cancelledRequests);
            if ($cancelledRequests) {
                // cancelledRequests($cancelledRequests);
                foreach ($cancelledRequests as $cancelledRequest) {
                    $requestparamVendor2 = (object)array(
                        'body' => ' Request Cancelled',
                        'title' =>  ' Request Cancelled',
                        'image' => ''
                    );
                    $fcmTokens2 = $cancelledRequest?->driver?->device_token;
                    $this->sendNotification($requestparamVendor2, $fcmTokens2);
                }
                $data = [
                    'type' => 'bookingaccepted',
                    'title' => __('Booking Accepted'),
                    'message' => __('Booking accepted by ') . auth()->user()->full_name,
                ];
                $bookings->users->notify(new AllNotification($data));
            }
            return $this->responseJson(true, 200, __('Booking Accepted Successfully'), new BookingResource($bookings));
        } else {
            DB::commit();
            $data = [
                'type' => 'bookingrejected',
                'title' => __('Booking Rejected'),
                'message' => __('Booking rejected by ') . auth()->user()->full_name,
            ];
            $bookings->users->notify(new AllNotification($data));
            return $this->responseJson(true, 200, __('Booking Rejected Successfully'), new BookingResource($bookings));
        }
        // } catch (\Throwable $th) {
        //     DB::rollBack();
        //     logger($th->getMessage() . 'on' . $th->getFile() . 'in' . $th->getLine());
        //     return $this->responseJson(false, 500, 'Something Went Wrong');
        // }
    }









public function cancelBooking(Request $request)
{
    $validator = Validator::make($request->all(), [
        'uuid' => 'required|uuid|exists:bookings,uuid',
        'status' => 'required|integer',
    ]);

    if ($validator->fails()) {
        return $this->responseJson(false, 422, $validator->errors()->first(), "");
    }

    DB::beginTransaction();
    try {
        $id = uuidtoid($request->uuid, 'bookings');
        $booking = Booking::with('driver')->where('id', $id)->firstOrFail(); // Fetch booking with driver relation

        // Update booking status
        $booking->update([
            'status' => 7,
            'reason_id' => $request->reason_id,
            'description' => $request->description ?? null,
        ]);

        // Update or create booking driver record
        $booking->bookingDrivers()->updateOrCreate(
            ['booking_id' => $id],
            ['user_id' => auth()->user()->id, 'status' => $request->status]
        );

        // Log the cancellation
        createBookingLogs($id, auth()->user()->id, 7, __('Ride has been cancelled by customer'));

        // Send notification if driver is assigned & accepted
        if ($request->type == 1 && $booking->driver_id && $booking->is_accepted == 2) {
            $this->sendNotification((object)[
                'body' => __('Your Ride Has Been Canceled'),
                'title' => __('Ride Canceled'),
                'data' => new BookingResource($booking),
                'image' => 'https://example.com/path/to/image.jpg',
            ], $booking->driver?->device_token);
        }

        // Handle cancellation for booking request drivers
        if ($request->type == 2) {
            BookingRequestDriver::where('booking_id', $id)->update(['status' => 2]);

            BookingRequestDriver::where('booking_id', $id)->where('status', 2)->each(function ($cancelledRequest) {
                $this->sendNotification((object)[
                    'body' => __('Ride Has Been Canceled'),
                    'title' => __('Ride Canceled'),
                    'data' => 'Ride Canceled',
                    'image' => '',
                ], $cancelledRequest->driver?->device_token);
            });
        }

        DB::commit();
        return $this->responseJson(true, 200, __('Ride Canceled Successfully'), []);

    } catch (\Exception $e) {
        DB::rollBack();
        logger()->error("Error: {$e->getMessage()} | File: {$e->getFile()} | Line: {$e->getLine()}");
        return $this->responseJson(false, 500, __('Something Went Wrong'));
    }
}













public function cancelBooking(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'uuid' => 'required|uuid|exists:bookings,uuid',
            'status' => 'required',
            // 'type' => 'required',
        ]);
        if ($validator->fails()) {
            return $this->responseJson(false, 422, $validator->errors()->first(), "");
        }

        DB::beginTransaction();
        // try {
        $id = uuidtoid($request->uuid, 'bookings');
        $bookings = Booking::where('id', $id)->first();
        $fcmTokens = $bookings->driver?->device_token;
    
        Booking::where('id', $id)->update([
            'status' => 7,
            'reason_id' => $request->reason_id,
            'description' => $request->description ?? null,
        ]);
        $booking = $bookings->bookingDrivers()->updateOrCreate(['booking_id' => $id], [
            'booking_id' => $id,
            'user_id' => auth()->user()->id,
            'status' => $request->status
        ]);
        createBookingLogs($id, auth()->user()->id, 7, __('Ride has been cancelled by customer'));
        DB::commit();
        if ($request->type == 1 && $bookings->driver_id !== null && $bookings->is_accepted == 2) {
            $requestparamVendor = (object)[
                'body' => 'Your Ride Has Been Canceled',
                'title' => __('Ride Canceled'),
                'data' => new BookingResource($bookings),
                'image' => 'https://example.com/path/to/image.jpg',
            ];
            $this->sendNotification($requestparamVendor, $fcmTokens);
        } 

        if($request->type == 2){
            BookingRequestDriver::where('booking_id', $id)->update([
                'status' => 2
            ]);

            $cancelledRequests = BookingRequestDriver::where('status', 2)->where('booking_id', $id)->get();
            foreach ($cancelledRequests as $cancelledRequest) {
                $requestparamVendor2 =(object)[
                    'body' => 'Ride Has Been Canceled',
                    'title' =>  __('Ride Canceled'),
                    'data' => 'Ride Canceled',
                    'image' => ''
                ];                
                    $fcmTokens2 = $cancelledRequest?->driver?->device_token;
                    $this->sendNotification($requestparamVendor2, $fcmTokens2);
                }
        }
        
        return $this->responseJson(true, 200, __('Ride Canceled Successfully'), []);
    }









public function bookinglist(Request $request)
    {
        $radius = $request->input('radius', getSiteSetting("search_radius")); // Default 10km
        // Fetch bookings filtered by conditions
        $filtered = Booking::whereNull('driver_id')
            ->where('is_accepted', 1)
            ->whereIn('status', [0, 1])
            ->whereBetween('created_at', [Carbon::now()->subMinutes(1)->format('Y-m-d H:i:s'), Carbon::now()->format('Y-m-d H:i:s')])
            ->orderByDesc('id')
            ->get();
           
        foreach ($filtered as $key => $value) {
            $latitude = json_decode($value->from_address)->lat;
            $longitude =  json_decode($value->from_address)->long;
            if ($value) {
                $ongoingStatuses = [1, 2, 3, 4];
                $driversWithOngoingBookings = Booking::whereIn('status', $ongoingStatuses)
                ->pluck('driver_id')
                ->filter(function ($driverId) {
                    return $driverId !== 0 && $driverId !== null;
                })
                ->unique()
                ->values();
                // Fetch nearby drivers within the radius and with approved documents
                $nearbyDrivers = User::where('id', auth()->user()->id)
                    ->where('is_online', 1) // Only fetch drivers who are online
                    ->whereNotIn('id', $driversWithOngoingBookings)
                    ->whereHas('documents', function ($query) {
                        // Check for specific documents and ensure they are approved
                        $query->whereIn('document_type', [
                            'vehicle_documents',
                            'noc_document',
                            'rc_document_front',
                            'rc_document_back',
                            'aadhar_document_front',
                            'aadhar_document_back',
                            'licence_document_front',
                            'licence_document_back',
                            'pan_card'
                        ])->where('status', 1);
                    })
                    ->selectRaw("id, latitude, longitude, ( 6371 * acos( cos( radians(?) ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians(?) ) + sin( radians(?) ) * sin( radians( latitude ) ) ) ) AS distance", [$latitude, $longitude, $latitude])
                    ->having('distance', '<=', $radius)
                    ->whereHas('vehicle', function ($q) use ($filtered) {
                        $q->where('category_id', $filtered->category_id);
                    })
                    // Check within the given radius
                    ->orderBy("distance")
                    ->latest()->get();
                if ($nearbyDrivers->isNotEmpty()) {
                    return $this->responseJson(true, 200, __('Booking and Nearby Drivers Fetched Successfully'), BookingResource::collection($filtered));
                }
            }
        }
        return $this->responseJson(false, 200, __('No Bookings Found !!'), []);
    }




public function bookinglist(Request $request)
{
    try {
        $radius = $request->input('radius', getSiteSetting("search_radius")); // Default search radius

        // Fetch unassigned bookings created within the last minute
        $filteredBookings = Booking::whereNull('driver_id')
            ->where('is_accepted', 1)
            ->whereIn('status', [0, 1])
            ->whereBetween('created_at', [Carbon::now()->subMinute(), Carbon::now()])
            ->orderByDesc('id')
            ->get();

        if ($filteredBookings->isEmpty()) {
            return $this->responseJson(false, 200, __('No Bookings Found !!'), []);
        }

        // Get all drivers with ongoing bookings (status: 1, 2, 3, 4)
        $ongoingDrivers = Booking::whereIn('status', [1, 2, 3, 4])
            ->pluck('driver_id')
            ->filter()
            ->unique()
            ->values()
            ->toArray();

        // Fetch online and available drivers (excluding busy ones)
        $availableDrivers = User::where('id', auth()->user()->id)
            ->where('is_online', 1)
            ->whereNotIn('id', $ongoingDrivers)
            ->whereHas('documents', function ($query) {
                $query->whereIn('document_type', [
                    'vehicle_documents', 'noc_document', 'rc_document_front', 'rc_document_back',
                    'aadhar_document_front', 'aadhar_document_back', 'licence_document_front',
                    'licence_document_back', 'pan_card'
                ])->where('status', 1);
            })
            ->get(['id', 'latitude', 'longitude']);

        if ($availableDrivers->isEmpty()) {
            return $this->responseJson(false, 200, __('No Available Drivers'), []);
        }

        // Prepare final booking list with nearby drivers
        $matchingBookings = collect();
        foreach ($filteredBookings as $booking) {
            $latitude = json_decode($booking->from_address)->lat;
            $longitude = json_decode($booking->from_address)->long;

            // Filter drivers within radius and matching category
            $nearbyDrivers = $availableDrivers->filter(function ($driver) use ($latitude, $longitude, $radius, $booking) {
                $distance = getFareLocCulateDistance($latitude, $longitude, $driver->latitude, $driver->longitude);
                return $distance <= $radius && $driver->vehicle->category_id == $booking->category_id;
            });

            if ($nearbyDrivers->isNotEmpty()) {
                $matchingBookings->push($booking);
            }
        }

        if ($matchingBookings->isEmpty()) {
            return $this->responseJson(false, 200, __('No Suitable Bookings Found'), []);
        }

        return $this->responseJson(true, 200, __('Booking and Nearby Drivers Fetched Successfully'), BookingResource::collection($matchingBookings));

    } catch (\Exception $e) {
        logger()->error("Error: {$e->getMessage()} | File: {$e->getFile()} | Line: {$e->getLine()}");
        return $this->responseJson(false, 500, __('Something Went Wrong'));
    }
}











public function bookinglist(Request $request)
{
    try {
        $radius = $request->input('radius', getSiteSetting("search_radius")); // Default search radius

        // Fetch all relevant bookings (unassigned and ongoing)
        $allBookings = Booking::where(function ($query) {
                $query->whereNull('driver_id')
                      ->where('is_accepted', 1)
                      ->whereIn('status', [0, 1])
                      ->whereBetween('created_at', [Carbon::now()->subMinute(), Carbon::now()]);
            })
            ->orWhereIn('status', [1, 2, 3, 4]) // Ongoing bookings
            ->orderByDesc('id')
            ->get();

        if ($allBookings->isEmpty()) {
            return $this->responseJson(false, 200, __('No Bookings Found !!'), []);
        }

        // Separate new bookings and drivers with ongoing bookings
        $filteredBookings = $allBookings->whereNull('driver_id');
        $ongoingDrivers = $allBookings->whereNotNull('driver_id')->pluck('driver_id')->unique()->values()->toArray();

        if ($filteredBookings->isEmpty()) {
            return $this->responseJson(false, 200, __('No Available Bookings'), []);
        }

        // Fetch online and available drivers (excluding those with ongoing bookings)
        $availableDrivers = User::where('id', auth()->user()->id)
            ->where('is_online', 1)
            ->whereNotIn('id', $ongoingDrivers)
            ->whereHas('documents', function ($query) {
                $query->whereIn('document_type', [
                    'vehicle_documents', 'noc_document', 'rc_document_front', 'rc_document_back',
                    'aadhar_document_front', 'aadhar_document_back', 'licence_document_front',
                    'licence_document_back', 'pan_card'
                ])->where('status', 1);
            })
            ->get(['id', 'latitude', 'longitude']);

        if ($availableDrivers->isEmpty()) {
            return $this->responseJson(false, 200, __('No Available Drivers'), []);
        }

        // Prepare final booking list with nearby drivers
        $matchingBookings = collect();
        foreach ($filteredBookings as $booking) {
            $latitude = json_decode($booking->from_address)->lat;
            $longitude = json_decode($booking->from_address)->long;

            // Filter drivers within radius and matching category
            $nearbyDrivers = $availableDrivers->filter(function ($driver) use ($latitude, $longitude, $radius, $booking) {
                $distance = getFareLocCulateDistance($latitude, $longitude, $driver->latitude, $driver->longitude);
                return $distance <= $radius && $driver->vehicle->category_id == $booking->category_id;
            });

            if ($nearbyDrivers->isNotEmpty()) {
                $matchingBookings->push($booking);
            }
        }

        if ($matchingBookings->isEmpty()) {
            return $this->responseJson(false, 200, __('No Suitable Bookings Found'), []);
        }

        return $this->responseJson(true, 200, __('Booking and Nearby Drivers Fetched Successfully'), BookingResource::collection($matchingBookings));

    } catch (\Exception $e) {
        logger()->error("Error: {$e->getMessage()} | File: {$e->getFile()} | Line: {$e->getLine()}");
        return $this->responseJson(false, 500, __('Something Went Wrong'));
    }
}














public function getFareByLocation(Request $request)
{
    try {
        // Fetch online drivers
        $driversOnlineList = $this->userService->findUserByRole([
            'is_online' => true,
            'is_blocked' => false
        ], 'driver');

        // Extract driver IDs
        $driverIds = $driversOnlineList->pluck('id')->toArray();
        if (empty($driverIds)) {
            return $this->responseJson(false, 200, __('No Online Drivers Available'), []);
        }

        // Fetch drivers with ongoing bookings (status 1,2,3,4 and is_accept = 2)
        $busyDriverIds = Booking::whereIn('status', [1, 2, 3, 4])
            ->where('is_accept', 2)
            ->pluck('driver_id')
            ->toArray();

        // Exclude busy drivers
        $availableDriverIds = array_diff($driverIds, $busyDriverIds);

        if (empty($availableDriverIds)) {
            return $this->responseJson(false, 200, __('No Available Drivers'), []);
        }

        // Fetch vehicles with active categories and fares
        $vehicles = Vehicle::with([
            'category.fares' => function ($query) {
                $query->where('is_active', 1);
            },
            'user:id,latitude,longitude'
        ])
        ->whereIn('user_id', $availableDriverIds)
        ->where('is_primary', 1)
        ->whereHas('category', function ($query) {
            $query->where('is_active', 1)->whereHas('fares', function ($fareQuery) {
                $fareQuery->where('is_active', 1);
            });
        })
        ->select(['id', 'user_id', 'category_id'])
        ->orderByDesc('id')
        ->get();

        if ($vehicles->isEmpty()) {
            return $this->responseJson(false, 200, __('No Vehicles Available'), []);
        }

        // Calculate trip distance and duration
        $distances = calculateDistances($request->pickup, $request->drop);
        $totalDistanceKm = $distances['distance'] ?? 0;
        $totalDurationMin = $distances['duration'] ?? 0;

        // Get current location if provided
        $currentLat = $request->input('lat');
        $currentLng = $request->input('lng');

        // Calculate distance from current location to each vehicle
        if ($currentLat && $currentLng) {
            foreach ($vehicles as $vehicle) {
                if ($vehicle->user) {
                    $vehicle->distance = getFareLocCulateDistance($currentLat, $currentLng, $vehicle->user->latitude, $vehicle->user->longitude);
                }
            }
        }

        // Group vehicles by category
        $groupedVehicles = $vehicles->groupBy('category_id');

        // Find nearest vehicle per category and calculate fare
        $nearestVehicles = $groupedVehicles->map(function ($vehicles) use ($totalDistanceKm, $totalDurationMin, $distances) {
            $nearestVehicle = $vehicles->sortBy('distance')->first();

            if ($nearestVehicle) {
                $fareDetails = $nearestVehicle->category->fares->first();
                if ($fareDetails) {
                    $totalFare = (double)($fareDetails->base_fare ?? 0) +
                                 ((double)($fareDetails->rate_per_km ?? 0) * $totalDistanceKm) +
                                 ((double)($fareDetails->rate_per_minute ?? 0) * $totalDurationMin);

                    $nearestVehicle->total_fare = round($totalFare, 2);
                    $nearestVehicle->distance = $distances;
                }
            }

            return $nearestVehicle;
        })->filter(); // Remove null values

        return $this->responseJson(true, 200, __('Vehicle Found Successfully'), VehicleNewResource::collection($nearestVehicles));

    } catch (\Exception $e) {
        logger()->error("Error: {$e->getMessage()} | File: {$e->getFile()} | Line: {$e->getLine()}");
        return $this->responseJson(false, 500, __('Something Went Wrong'));
    }
}











public function getFareByLocation(Request $request)
    {
        try {
            // Fetch online drivers
            $driversOnlineList = $this->userService->findUserByRole([
                'is_online' => true,
                'is_blocked' => false
            ], 'driver');
    
            // Extract driver IDs
            $driverIds = $driversOnlineList->pluck('id')->toArray();
            if (empty($driverIds)) {
                return $this->responseJson(false, 200, __('No Online Drivers Available'), []);
            }
    
            // Fetch vehicles with active categories and fares
            $vehicles = Vehicle::with([
                'category.fares' => function ($query) {
                    $query->where('is_active', 1);
                },
                'user:id,latitude,longitude' // Fetching only required user fields
            ])
            ->whereIn('user_id', $driverIds)
            ->where('is_primary', 1)
            ->whereHas('category', function ($query) {
                $query->where('is_active', 1)->whereHas('fares', function ($fareQuery) {
                    $fareQuery->where('is_active', 1);
                });
            })
            ->select(['id', 'user_id', 'category_id']) // Fetching only necessary fields
            ->orderByDesc('id')
            ->get();
    
            if ($vehicles->isEmpty()) {
                return $this->responseJson(false, 200, __('No Vehicles Available'), []);
            }
        // Calculate trip distance and duration
            $distances = calculateDistances($request->pickup, $request->drop);
            $totalDistanceKm = $distances['distance'] ?? 0;
            $totalDurationMin = $distances['duration'] ?? 0;
    
            // Get current location if provided
            $currentLat = $request->input('lat');
            $currentLng = $request->input('lng');
    
            // Calculate distance from current location to each vehicle
            if ($currentLat && $currentLng) {
                foreach ($vehicles as $vehicle) {
                    if ($vehicle->user) {
                        $vehicle->distance = getFareLocCulateDistance($currentLat, $currentLng, $vehicle->user->latitude, $vehicle->user->longitude);
                    }
                }
            }
    
            // Group vehicles by category
            $groupedVehicles = $vehicles->groupBy('category_id');
    
            // Find nearest vehicle per category and calculate fare
            $nearestVehicles = $groupedVehicles->map(function ($vehicles) use ($totalDistanceKm, $totalDurationMin, $distances) {
                $nearestVehicle = $vehicles->sortBy('distance')->first(); // Get the nearest vehicle
    
                if ($nearestVehicle) {
                    $fareDetails = $nearestVehicle->category->fares->first();
                    if ($fareDetails) {
                        $totalFare = (double)($fareDetails->base_fare ?? 0) +
                                     ((double)($fareDetails->rate_per_km ?? 0) * $totalDistanceKm) +
                                     ((double)($fareDetails->rate_per_minute ?? 0) * $totalDurationMin);
    
                        $nearestVehicle->total_fare = round($totalFare, 2);
                        $nearestVehicle->distance = $distances;
                    }
                }
    
                return $nearestVehicle;
            })->filter(); // Remove null values
    
            return $this->responseJson(true, 200, __('Vehicle Found Successfully'), VehicleNewResource::collection($nearestVehicles));
    
        } catch (\Exception $e) {
            logger()->error("Error: {$e->getMessage()} | File: {$e->getFile()} | Line: {$e->getLine()}");
            return $this->responseJson(false, 500, __('Something Went Wrong'));
        }
    }
