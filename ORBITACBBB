  public function bookinglist(Request $request)
    {
        $radius = $request->input('radius', getSiteSetting("search_radius")); // Default 10km
        // Fetch bookings filtered by conditions
        $filtered = Booking::whereNull('driver_id')
            ->where('is_accepted', 1)
            ->whereIn('status', [0, 1])
            ->whereBetween('created_at', [Carbon::now()->subMinutes(1)->format('Y-m-d H:i:s'), Carbon::now()->format('Y-m-d H:i:s')])
            ->orderByDesc('id')
            ->get();
           
        foreach ($filtered as $key => $value) {
            $latitude = json_decode($value->from_address)->lat;
            $longitude =  json_decode($value->from_address)->long;
            if ($value) {
                $ongoingStatuses = [1, 2, 3, 4];
                $driversWithOngoingBookings = Booking::whereIn('status', $ongoingStatuses)
                ->pluck('driver_id')
                ->filter(function ($driverId) {
                    return $driverId !== 0 && $driverId !== null;
                })
                ->unique()
                ->values();
                // Fetch nearby drivers within the radius and with approved documents
                $nearbyDrivers = User::where('id', auth()->user()->id)
                    ->where('is_online', 1) // Only fetch drivers who are online
                    ->whereNotIn('id', $driversWithOngoingBookings)
                    ->whereHas('documents', function ($query) {
                        // Check for specific documents and ensure they are approved
                        $query->whereIn('document_type', [
                            'vehicle_documents',
                            'noc_document',
                            'rc_document_front',
                            'rc_document_back',
                            'aadhar_document_front',
                            'aadhar_document_back',
                            'licence_document_front',
                            'licence_document_back',
                            'pan_card'
                        ])->where('status', 1);
                    })
                    ->selectRaw("id, latitude, longitude, ( 6371 * acos( cos( radians(?) ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians(?) ) + sin( radians(?) ) * sin( radians( latitude ) ) ) ) AS distance", [$latitude, $longitude, $latitude])
                    ->having('distance', '<=', $radius)
                    ->whereHas('vehicle', function ($q) use ($filtered) {
                        $q->where('category_id', $filtered->category_id);
                    })
                    // Check within the given radius
                    ->orderBy("distance")
                    ->latest()->get();
                if ($nearbyDrivers->isNotEmpty()) {
                    return $this->responseJson(true, 200, __('Booking and Nearby Drivers Fetched Successfully'), BookingResource::collection($filtered));
                }
            }
        }
        return $this->responseJson(false, 200, __('No Bookings Found !!'), []);
    }





















public function getFareByLocation(Request $request)
{
    try {
        // Fetch online drivers
        $driversOnlineList = $this->userService->findUserByRole([
            'is_online' => true,
            'is_blocked' => false
        ], 'driver');

        // Extract driver IDs
        $driverIds = $driversOnlineList->pluck('id')->toArray();
        if (empty($driverIds)) {
            return $this->responseJson(false, 200, __('No Online Drivers Available'), []);
        }

        // Fetch drivers with ongoing bookings (status 1,2,3,4 and is_accept = 2)
        $busyDriverIds = Booking::whereIn('status', [1, 2, 3, 4])
            ->where('is_accept', 2)
            ->pluck('driver_id')
            ->toArray();

        // Exclude busy drivers
        $availableDriverIds = array_diff($driverIds, $busyDriverIds);

        if (empty($availableDriverIds)) {
            return $this->responseJson(false, 200, __('No Available Drivers'), []);
        }

        // Fetch vehicles with active categories and fares
        $vehicles = Vehicle::with([
            'category.fares' => function ($query) {
                $query->where('is_active', 1);
            },
            'user:id,latitude,longitude'
        ])
        ->whereIn('user_id', $availableDriverIds)
        ->where('is_primary', 1)
        ->whereHas('category', function ($query) {
            $query->where('is_active', 1)->whereHas('fares', function ($fareQuery) {
                $fareQuery->where('is_active', 1);
            });
        })
        ->select(['id', 'user_id', 'category_id'])
        ->orderByDesc('id')
        ->get();

        if ($vehicles->isEmpty()) {
            return $this->responseJson(false, 200, __('No Vehicles Available'), []);
        }

        // Calculate trip distance and duration
        $distances = calculateDistances($request->pickup, $request->drop);
        $totalDistanceKm = $distances['distance'] ?? 0;
        $totalDurationMin = $distances['duration'] ?? 0;

        // Get current location if provided
        $currentLat = $request->input('lat');
        $currentLng = $request->input('lng');

        // Calculate distance from current location to each vehicle
        if ($currentLat && $currentLng) {
            foreach ($vehicles as $vehicle) {
                if ($vehicle->user) {
                    $vehicle->distance = getFareLocCulateDistance($currentLat, $currentLng, $vehicle->user->latitude, $vehicle->user->longitude);
                }
            }
        }

        // Group vehicles by category
        $groupedVehicles = $vehicles->groupBy('category_id');

        // Find nearest vehicle per category and calculate fare
        $nearestVehicles = $groupedVehicles->map(function ($vehicles) use ($totalDistanceKm, $totalDurationMin, $distances) {
            $nearestVehicle = $vehicles->sortBy('distance')->first();

            if ($nearestVehicle) {
                $fareDetails = $nearestVehicle->category->fares->first();
                if ($fareDetails) {
                    $totalFare = (double)($fareDetails->base_fare ?? 0) +
                                 ((double)($fareDetails->rate_per_km ?? 0) * $totalDistanceKm) +
                                 ((double)($fareDetails->rate_per_minute ?? 0) * $totalDurationMin);

                    $nearestVehicle->total_fare = round($totalFare, 2);
                    $nearestVehicle->distance = $distances;
                }
            }

            return $nearestVehicle;
        })->filter(); // Remove null values

        return $this->responseJson(true, 200, __('Vehicle Found Successfully'), VehicleNewResource::collection($nearestVehicles));

    } catch (\Exception $e) {
        logger()->error("Error: {$e->getMessage()} | File: {$e->getFile()} | Line: {$e->getLine()}");
        return $this->responseJson(false, 500, __('Something Went Wrong'));
    }
}











public function getFareByLocation(Request $request)
    {
        try {
            // Fetch online drivers
            $driversOnlineList = $this->userService->findUserByRole([
                'is_online' => true,
                'is_blocked' => false
            ], 'driver');
    
            // Extract driver IDs
            $driverIds = $driversOnlineList->pluck('id')->toArray();
            if (empty($driverIds)) {
                return $this->responseJson(false, 200, __('No Online Drivers Available'), []);
            }
    
            // Fetch vehicles with active categories and fares
            $vehicles = Vehicle::with([
                'category.fares' => function ($query) {
                    $query->where('is_active', 1);
                },
                'user:id,latitude,longitude' // Fetching only required user fields
            ])
            ->whereIn('user_id', $driverIds)
            ->where('is_primary', 1)
            ->whereHas('category', function ($query) {
                $query->where('is_active', 1)->whereHas('fares', function ($fareQuery) {
                    $fareQuery->where('is_active', 1);
                });
            })
            ->select(['id', 'user_id', 'category_id']) // Fetching only necessary fields
            ->orderByDesc('id')
            ->get();
    
            if ($vehicles->isEmpty()) {
                return $this->responseJson(false, 200, __('No Vehicles Available'), []);
            }
        // Calculate trip distance and duration
            $distances = calculateDistances($request->pickup, $request->drop);
            $totalDistanceKm = $distances['distance'] ?? 0;
            $totalDurationMin = $distances['duration'] ?? 0;
    
            // Get current location if provided
            $currentLat = $request->input('lat');
            $currentLng = $request->input('lng');
    
            // Calculate distance from current location to each vehicle
            if ($currentLat && $currentLng) {
                foreach ($vehicles as $vehicle) {
                    if ($vehicle->user) {
                        $vehicle->distance = getFareLocCulateDistance($currentLat, $currentLng, $vehicle->user->latitude, $vehicle->user->longitude);
                    }
                }
            }
    
            // Group vehicles by category
            $groupedVehicles = $vehicles->groupBy('category_id');
    
            // Find nearest vehicle per category and calculate fare
            $nearestVehicles = $groupedVehicles->map(function ($vehicles) use ($totalDistanceKm, $totalDurationMin, $distances) {
                $nearestVehicle = $vehicles->sortBy('distance')->first(); // Get the nearest vehicle
    
                if ($nearestVehicle) {
                    $fareDetails = $nearestVehicle->category->fares->first();
                    if ($fareDetails) {
                        $totalFare = (double)($fareDetails->base_fare ?? 0) +
                                     ((double)($fareDetails->rate_per_km ?? 0) * $totalDistanceKm) +
                                     ((double)($fareDetails->rate_per_minute ?? 0) * $totalDurationMin);
    
                        $nearestVehicle->total_fare = round($totalFare, 2);
                        $nearestVehicle->distance = $distances;
                    }
                }
    
                return $nearestVehicle;
            })->filter(); // Remove null values
    
            return $this->responseJson(true, 200, __('Vehicle Found Successfully'), VehicleNewResource::collection($nearestVehicles));
    
        } catch (\Exception $e) {
            logger()->error("Error: {$e->getMessage()} | File: {$e->getFile()} | Line: {$e->getLine()}");
            return $this->responseJson(false, 500, __('Something Went Wrong'));
        }
    }
