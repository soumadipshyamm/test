
use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Illuminate\Log\Logger as IlluminateLogger;
use Illuminate\Support\Facades\Log;

if (!function_exists('dynamic_channel_log')) {
    function dynamic_channel_log(string $feature, string $message, string $functionName = '', string $level = 'info', array $context = [])
    {
        // Sanitize feature name
        $feature = strtolower(trim($feature));

        // Create dynamic log file name with date
        $date = date('Y-m-d');
        $fileName = storage_path("logs/{$feature}-{$date}.log");

        // Create a new Monolog logger
        $monolog = new Logger($feature);
        $monolog->pushHandler(new StreamHandler($fileName, Logger::toMonologLevel($level)));

        // Wrap Monolog inside Laravel Logger
        $logger = new IlluminateLogger($monolog);

        // Final message format
        $fullMessage = $functionName ? "[{$functionName}] {$message}" : $message;

        // Call appropriate log level method
        $logger->{$level}($fullMessage, $context);
    }
}




<?php

use Illuminate\Support\Facades\File;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;

if (!function_exists('log_daily')) {
    function log_daily(string $message, string $level = 'info', array $context = null): void
    {
        static $loggers = [];

        $date = now()->format('Y-m-d');
        $logDirectory = storage_path('logs/custom');
        $logFilePath = "{$logDirectory}/{$date}.log";

        if (!File::exists($logDirectory)) {
            File::makeDirectory($logDirectory, 0755, true);
        }

        if (!isset($loggers[$date])) {
            $logger = new Logger("daily_{$date}");
            $logger->pushHandler(new StreamHandler($logFilePath, Logger::DEBUG));
            $loggers[$date] = $logger;
        }

        $logger = $loggers[$date];

        $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 2);
        $callerFunction = $backtrace[1]['function'] ?? 'global_scope';

        $timestamp = now()->toDateTimeString();
        $fullMessage = "[{$timestamp}] Function: {$callerFunction} | {$message}";

        if ($context) {
            $fullMessage .= ' | Context: ' . json_encode($context, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
        }

        if (method_exists($logger, $level)) {
            $logger->$level($fullMessage);
        } else {
            $logger->info($fullMessage);
        }
    }
}




log_daily('User login request received', 'info', [
            'user_id' => auth()->id(),
            'ip' => $request->ip(),
        ]);






<?php

use Illuminate\Support\Facades\Log;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;

if (!function_exists('log_event')) {
    function log_event($eventType, $data = null, $userId = null, $companyId = null)
    {
        $timestamp = now()->toDateTimeString();
        $message = "[$timestamp] Event: $eventType";

        // Append user ID if provided
        if ($userId) {
            $message .= " | User ID: $userId";
        }

        // Append company ID if provided
        if ($companyId) {
            $message .= " | Company ID: $companyId";
        }

        // Append additional data if provided
        if ($data) {
            $message .= " | Data: " . json_encode($data);
        }

        // Define the log path based on the event type and current date
        $date = now()->format('Y-m-d');
        $logFilePath = storage_path("logs/{$eventType}_{$date}.log");

        // Create a new instance of Monolog
        $logger = new Logger($eventType);
        $logger->pushHandler(new StreamHandler($logFilePath, Logger::INFO));

        // Log the message
        $logger->info($message);
    }
}
