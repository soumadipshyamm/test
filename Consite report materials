

        $data = Materials::updateOrCreate(



SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry 'c5771a6f-1d79-49a8-a9fe-8a5956f6eaa6' for key 'materials_uuid_unique'

class MaterialsImport implements ToModel, WithHeadingRow
{
    public function model(array $row)
    {
        $authCompany = Auth::guard('company')->user();
        $companyId = searchCompanyId($authCompany->id);
// dd($row);

        // Prepare the unique attributes and update data
        $attributes = [
            'name' => $row['name'],
            'class' => $row['class'],
            'unit_id' => nametoid($row['unit'], 'units') ?: createunit($row['unit'], $companyId),
            'specification' => $row['specification'],
            'company_id' => $companyId,
        ];

        $data = Materials::updateOrCreate(
            $attributes, // Attributes to search for
            [           // Data to update or insert
                'uuid'=>$row['uuid'],
            ]
        );

        return $data;
    }
}





use Illuminate\Support\Str;

class MaterialsImport implements ToModel, WithHeadingRow
{
    public function model(array $row)
    {
        $authCompany = Auth::guard('company')->user();
        $companyId = searchCompanyId($authCompany->id);

        // Prepare the unique attributes and update data
        $attributes = [
            'name' => $row['name'],
            'class' => $row['class'],
            'unit_id' => nametoid($row['unit'], 'units') ?: createunit($row['unit'], $companyId),
            'company_id' => $companyId,
        ];

        $data = Materials::updateOrCreate(
            $attributes, // Attributes to search for
            [           // Data to update or insert
                'specification' => $row['specification'],
                'code' => Str::uuid(), // Use UUID for the code
            ]
        );

        return $data;
    }
}






class MaterialsImport implements ToModel, WithHeadingRow
{
    public function model(array $row)
    {
        $authCompany = Auth::guard('company')->user();
        $companyId = searchCompanyId($authCompany->id);

        // Create new materials
        $data = new Materials([
            'name' => $row['name'],
            'class' => $row['class'],
            'code' =>  uniqid(),
            'specification' => $row['specification'],
            'unit_id' => nametoid($row['unit'], 'units') ?: createunit($row['unit'], $companyId),
            'company_id' => $companyId,
        ]);
        $data->save();
        return  $data;
    }
}
