**************************************************
**************************************************
**************************************************
**************************************************
**************************************************


$(document).on('submit', "#chatForm", function(e) {
    e.preventDefault();
    let message = $("#message-input").val().trim();
    if (message !== '') {
        sendChatMessage(roomName, message);
        $("#message-input").val('');
    }
});

function sendChatMessage(roomName, message) {
    socket.emit('chat message', {
        roomName: roomName,
        message: message,
        user: 'Admin' // Identify the sender
    });
}


let socket = io('https://socket.caborbit.com/', {
    query: {
        userType: 'super-admin',
        superAdminId: superAdminId
    }
});

socket.on('connect', () => {
    console.log(`Connected as Super Admin ${superAdminId}`);
});

socket.on('chat message', function(data) {
    displayMessage(data);
});

// Submit form to send a message
$(document).on('submit', "#chatForm", function(e) {
    e.preventDefault();
    let message = $("#message-input").val();
    if (message.trim() !== "") {
        sendChatMessage(roomName, message);
        $("#message-input").val('');  // Clear the input field
    }
});

// Function to send chat message
function sendChatMessage(roomName, message) {
    socket.emit('chat message', {
        roomName: roomName,
        message: message
    });
}

// Displaying the message in real time
function displayMessage(data) {
    let html = `<li class="clearfix">
                    <div class="message ${(data.user === 'Admin') ? 'float-right my-message' : 'other-message'}">${data.message}</div>
                </li>`;
    $("#messages").append(html);
    
    // Auto-scroll to the bottom when new messages arrive
    const chatHistoryDiv = $('.chat-history');
    chatHistoryDiv.scrollTop(chatHistoryDiv[0].scrollHeight);
}

**************************************************



@extends('layouts.app', ['isSidebar' => true, 'isNavbar' => true, 'isFooter' => false])
<script src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>
@push('styles')
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
    <style>
        .input-group .input-group-text {
            padding: .75rem;
        }

        .card {
            background: #232d45;
            transition: .5s;
            border-bottom: 1px solid #303c57;
            border-radius: 0;
            margin-bottom: 30px;
            /* border-radius: .55rem; */
            position: relative;
            width: 100%;
            /* box-shadow: 0 1px 2px 0 rgb(0 0 0 / 10%); */
        }

        .chat-app .people-list {
            width: 280px;
            position: absolute;
            left: 0;
            top: 0;
            padding: 20px;
            z-index: 7
        }

        .chat-app .chat {
            margin-left: 280px;
            border-left: 1px solid #303c57
        }

        .people-list {
            -moz-transition: .5s;
            -o-transition: .5s;
            -webkit-transition: .5s;
            transition: .5s
        }

        .people-list .chat-list li {
            padding: 10px 15px;
            list-style: none;
            border-radius: 3px
        }

        .people-list .chat-list li:hover {
            background: #efefef;
            cursor: pointer
        }

        .people-list .chat-list li.active {
            background: #3e4860
        }

        .people-list .chat-list li .name {
            font-size: 15px
        }

        .people-list .chat-list img {
            width: 45px;
            border-radius: 50%
        }

        .people-list img {
            float: left;
            border-radius: 50%
        }

        .people-list .about {
            float: left;
            padding-left: 8px
        }

        .people-list .status {
            color: #999;
            font-size: 13px
        }

        .chat .chat-header {
            padding: 15px 20px;
            border-bottom: 1px solid #303c57
        }

        .chat .chat-header img {
            float: left;
            border-radius: 40px;
            width: 40px
        }

        .chat .chat-header .chat-about {
            float: left;
            padding-left: 10px
        }

        .chat .chat-history {
            padding: 20px;
            border-bottom: 1px solid #303c57
        }

        .chat .chat-history ul {
            padding: 0
        }

        .chat .chat-history ul li {
            list-style: none;
            margin-bottom: 15px
        }

        .chat .chat-history ul li:last-child {
            margin-bottom: 0px
        }

        .chat .chat-history .message-data {
            margin-bottom: 15px
        }

        .chat .chat-history .message-data img {
            border-radius: 40px;
            width: 40px
        }

        .chat .chat-history .message-data-time {
            color: #868da7;
            padding-left: 6px
        }

        .chat .chat-history .message {
            color: #444;
            padding: 5px 10px;
            line-height: 26px;
            font-size: 16px;
            border-radius: 7px;
            display: inline-block;
            position: relative;
            overflow-wrap: anywhere;
        }

        /* .chat .chat-history .message:after {
                                bottom: 100%;
                                left: 7%;
                                border: solid transparent;
                                content: " ";
                                height: 0;
                                width: 0;
                                position: absolute;
                                pointer-events: none;
                                border-bottom-color: #fff;
                                border-width: 10px;
                                margin-left: -10px
                            } */

        .chat .chat-history .other-message {
            background: #c9d9ff
        }

        /* .chat .chat-history .other-message:after {
                                bottom: 100%;
                                left: 20px;
                                border: solid transparent;
                                content: " ";
                                height: 0;
                                width: 0;
                                position: absolute;
                                pointer-events: none;
                                border-bottom-color: #efefef;
                                border-width: 10px;
                                margin-left: -10px
                            } */

        .chat .chat-history .my-message {
            background: #e8f1f3;
            text-align: right
        }

        .chat .chat-history .my-message:after {
            border-bottom-color: #e8f1f3;
            right: 6px;
            left: auto;
        }

        .chat .chat-message {
            padding: 20px
        }

        .online,
        .offline,
        .me {
            margin-right: 2px;
            font-size: 8px;
            vertical-align: middle
        }

        .online {
            color: #86c541
        }

        .offline {
            color: #e47297
        }

        .me {
            color: #1d8ecd
        }

        .float-right {
            float: right
        }

        .clearfix:after {
            visibility: hidden;
            display: block;
            font-size: 0;
            content: " ";
            clear: both;
            height: 0
        }

        .chat-app .chat-history {
            height: 62vh;
            width: 100%;
            overflow-y: auto;
            overflow-x: auto
        }

        @media only screen and (max-width: 767px) {
            .chat-app .people-list {
                height: 465px;
                width: 100%;
                overflow-x: auto;
                background: #fff;
                left: -400px;
                display: none
            }

            .chat-app .people-list.open {
                left: 0
            }

            .chat-app .chat {
                margin: 0
            }

            .chat-app .chat .chat-header {
                border-radius: 0.55rem 0.55rem 0 0
            }

            .chat-app .chat-history {
                height: 300px;
                overflow-x: auto
            }
        }

        @media only screen and (min-width: 768px) and (max-width: 992px) {
            .chat-app .chat-list {
                height: 650px;
                overflow-x: auto
            }

            .chat-app .chat-history {
                height: 600px;
                overflow-x: auto
            }
        }

        @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1) {
            .chat-app .chat-list {
                height: 480px;
                overflow-x: auto
            }

            .chat-app .chat-history {
                height: calc(100vh - 350px);
                overflow-x: auto
            }
        }

        .chat-list {
            color: #e1dcdc;
        }

        .chat-about,
        .chat-about h6 {
            color: #e1dcdc;
        }
    </style>
@endpush

@section('content')
    <div class="container">
        <div class="row clearfix">
            <div class="col-lg-12">
                <div class="card chat-app">
                    <div id="plist" class="people-list">
                        <ul class="list-unstyled chat-list mt-2 mb-0">
                            @foreach ($chats as $chat)
                                <li class="clearfix" data-id="{{ $chat->user_id }}" data-room="{{ $chat->roomName }}">
                                    <div class="col-lg-4 userImg">
                                        <img src="{{ $chat?->user?->profile_picture ?? 'https://bootdey.com/img/Content/avatar/avatar2.png' }}"
                                            alt="avatar">
                                    </div>
                                    <div class="about">
                                        <div class="name">{{ $chat->user?->first_name . ' ' . $chat->user?->last_name }}
                                        </div>
                                    </div>
                                    <div class="status"><i class="fa fa-circle online"></i>
                                        {{ $chat?->user?->mobile_number ?? '' }}</div>
                                </li>
                            @endforeach
                        </ul>
                    </div>
                    <div class="chat">
                        <div class="chat-header clearfix">
                            <div class="row">
                                <div class="col-lg-6 userDet">
                                    <a href="javascript:void(0);">
                                        <img src="https://bootdey.com/img/Content/avatar/avatar2.png" alt="avatar">
                                    </a>
                                    <div class="chat-about">
                                        <h6 class="m-b-0 name"></h6>
                                        <small class="phone"></small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="chat-history">
                            <ul class="m-b-0" id="messages"></ul>
                        </div>
                        <div class="chat-message clearfix">
                            <form id="chatForm">
                                <div class="input-group mb-0">
                                    <div class="input-group-prepend">
                                        <button class="input-group-text" type="submit"><i class="fa fa-send"></i></button>
                                    </div>
                                    <input type="text" class="form-control" placeholder="Enter text here..."
                                        id="message-input">
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
@endsection

@push('scripts')
    <script>
        let superAdminId = 1; // Example: Retrieve authenticated super admin ID
        let roomName = '';
        let socket = io('https://socket.caborbit.com/', {
            //let socket = io('https://socket.shyamfuture.in', {
            // let socket = io('http://13.127.84.232:3001/', {
            query: {
                userType: 'super-admin',
                superAdminId: superAdminId
            }
        });
        socket.on('connect', () => {
            console.log(`Connected as Super Admin ${superAdminId}`);
        });
        socket.on('disconnect', () => {
            console.log('Disconnected from Socket.io server');
        });
        socket.on('previous messages', (messages) => {
            console.log(messages);
            messages.forEach(message => {
                displayMessage(message);
            });
        });

        function createChatRoom(customerId) {
            socket.emit('create room', customerId);
        }

        function displayMessage(data) {
            let currentTime = data.time ? data.time : '';
            let html = `<li class="clearfix">
                    <div class="message ${(data.user === 'Admin') ? 'float-right my-message' : 'other-message'}">${data.message}</div>
                </li>`;
            $("#messages").append(html);
            const chatMessageDiv = $('.chat-history');
            // Additional code skipped for brevity
        }

        $(document).on('submit', "#chatForm", function(e) {
            e.preventDefault()
            sendChatMessage(roomName, $("#message-input").val())
            $("#message-input").val('')
        })

        function sendChatMessage(roomName, message) {
            socket.emit('chat message', {
                roomName: roomName,
                message: message
            });
        }
        // Event listener to receive chat messages from customers
        socket.on('chat message', function(data) {
            displayMessage(data);
            // Handle displaying the message in your UI
        });

        $(document).on("click", ".chat-list li", function() {
            $("#messages").html('');
            $(".chat-list li").removeClass("active");
            $(this).addClass("active");
            let id = $(this).attr("data-id");
            let room = $(this).attr("data-room");
            $.ajax({
                url: "{{ route('admin.chat.user.details') }}",
                method: "POST",
                data: {
                    'id': id
                },
                success: function(response) {
                    $(".userDet .name").text(response.first_name);
                    $(".userDet .phone").text(response.mobile_number);
                    roomName = room; // Replace with actual room ID
                    socket.emit('join room', room);
                },
                error: function(xhr, status, error) {
                    console.error('Error fetching data:', error);
                    // Handle error scenario
                }
            });
        });

        $(document).ready(function() {
            $(".chat-list li:first-child").trigger('click');
        });



    </script>
@endpush

**************************************************

public function getPayoutWeeklyList(array $filterConditions, $start = null, $limit = null, $order = 'week_no', $dir = 'asc')
{
    $query = DB::table('bookings')
        ->join('users', 'bookings.driver_id', '=', 'users.id')
        ->leftJoin('reward_logs', 'bookings.driver_id', '=', 'reward_logs.user_id')
        ->leftJoin('booking_transactions', 'bookings.id', '=', 'booking_transactions.booking_id')
        ->leftJoin('payouts', 'bookings.driver_id', '=', 'payouts.driver_id')
        ->select(
            DB::raw("YEARWEEK(bookings.created_at, 1) as year_week"),
            DB::raw("DATE(DATE_SUB(bookings.created_at, INTERVAL WEEKDAY(bookings.created_at) DAY)) as week_start"),
            DB::raw("DATE(DATE_ADD(bookings.created_at, INTERVAL (6 - WEEKDAY(bookings.created_at)) DAY)) as week_end"),
            'bookings.driver_id',
            'users.mobile_number',
            DB::raw('users.first_name as driver_name'),
            DB::raw('COUNT(bookings.id) as total_trips'),
            DB::raw('SUM(bookings.fare) as total_fare'),
            DB::raw('SUM(reward_logs.reward_amount) as total_incentives'),
            DB::raw('(SUM(bookings.fare) + SUM(reward_logs.reward_amount)) as total_earnings'),
            DB::raw('SUM(booking_transactions.comission) as total_deductions'),
            DB::raw('(SUM(bookings.fare) + SUM(reward_logs.reward_amount) - SUM(booking_transactions.comission)) as net_earnings'),
            DB::raw('SUM(payouts.driver_amount) as total_payout'),
            DB::raw('MAX(payouts.trantion_date) as last_payout_date'),
            DB::raw('MAX(payouts.status) as payout_status'),
            DB::raw('GROUP_CONCAT(DISTINCT payouts.details) as payout_remarks')
        );

    // Apply filters
    if (!empty($filterConditions['weekrang'])) {
        [$startDate, $endDate] = explode(' - ', $filterConditions['weekrang']);
        $query->whereBetween('bookings.created_at', [trim($startDate), trim($endDate)]);
    }

    if (!empty($filterConditions['driver_list'])) {
        $query->whereIn('bookings.driver_id', (array)$filterConditions['driver_list']);
    }

    // Grouping and sorting
    $query->groupBy(
        DB::raw("YEARWEEK(bookings.created_at, 1)"),
        'bookings.driver_id',
        'users.mobile_number',
        'users.first_name'
    )
    ->orderBy($order, $dir);

    // Pagination
    if (!is_null($start) && !is_null($limit)) {
        $query->offset($start)->limit($limit);
    }

    return $query->get();
}

*****************************
   public function getpayoutWeelyList(array $filterConditions, $start, $limit, $order, $dir, $search = null)
    {
        $startDate = '';
        $endDate = '';
        if (isset($filterConditions['weekrang']) && !empty($filterConditions['weekrang'])) {
            list($startDate, $endDate) = explode(' - ', $filterConditions['weekrang']);
            $startDate = $startDate;
            $endDate = $endDate;
        }
        $query =  DB::table('bookings')
            ->join('users', 'bookings.driver_id', '=', 'users.id')
            ->leftJoin('reward_logs', 'bookings.driver_id', '=', 'reward_logs.user_id')
            ->leftJoin('booking_transactions', 'bookings.id', '=', 'booking_transactions.booking_id')
            ->leftJoin('transactions', 'bookings.id', '=', 'transactions.booking_id')
            ->leftJoin('payouts', 'bookings.driver_id', '=', 'payouts.driver_id')
            ->select(
                DB::raw("WEEK(bookings.created_at, 1) as week_no"),
                DB::raw("DATE(DATE_SUB(bookings.created_at, INTERVAL WEEKDAY(bookings.created_at) DAY)) as from_date"),
                DB::raw("DATE(DATE_ADD(bookings.created_at, INTERVAL (6 - WEEKDAY(bookings.created_at)) DAY)) as to_date"),
                'bookings.driver_id',
                'users.mobile_number',
                DB::raw('users.first_name as driver_name'),
                DB::raw('COUNT(bookings.id) as total_trip'),
                DB::raw('SUM(bookings.fare) as total_ride_amount'),
                DB::raw('SUM(reward_logs.reward_amount) as incentives'),
                DB::raw('SUM(reward_logs.reward_amount) as bonuses'),
                DB::raw('(SUM(bookings.fare) + SUM(reward_logs.reward_amount) + SUM(reward_logs.reward_amount)) as total_earning'),
                DB::raw('SUM(booking_transactions.comission) as deductions'),
                DB::raw('(SUM(bookings.fare) + SUM(reward_logs.reward_amount) + SUM(reward_logs.reward_amount) - SUM(booking_transactions.comission)) as net_earning'),
                DB::raw('SUM(CASE WHEN booking_transactions.payment_type = "cash" THEN booking_transactions.comission ELSE 0 END) as cash'),
                DB::raw('SUM(CASE WHEN booking_transactions.payment_type = "bank" THEN booking_transactions.comission ELSE 0 END) as bank'),
                DB::raw('SUM(CASE WHEN booking_transactions.payment_type = "wallet" THEN booking_transactions.comission ELSE 0 END) as wallet'),
                DB::raw('SUM(payouts.driver_amount) as payout_amount'),
                DB::raw('MAX(payouts.trantion_date) as date_paid'),
                DB::raw('MAX(payouts.status) as status'),
                DB::raw('GROUP_CONCAT(DISTINCT payouts.details) as remarks')
            );
        if (isset($filterConditions['weekrang']) && !empty($filterConditions['weekrang'])) {
            $query = $query->whereBetween('bookings.created_at', [$startDate, $endDate]); // Filter by date range
        }
         if (isset($filterConditions['driver_list']) && !empty($filterConditions['driver_list'])) {
            $query = $query->where('bookings.driver_id', $filterConditions['driver_list']);
        }
        $query = $query->groupBy(
            DB::raw("WEEK(bookings.created_at, 1)"),
            'bookings.driver_id',
            'users.mobile_number',
            'users.first_name',
            'bookings.created_at' // Add this line
        )
            ->orderBy(DB::raw("WEEK(bookings.created_at, 1)"), 'asc')
            ->orderBy('bookings.driver_id', 'asc');
        return $query->get();
    }
*********************
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>jQuery Week Picker with Highlight</title>

    <!-- jQuery and jQuery UI -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/smoothness/jquery-ui.css">

    <style>
        #weekPicker {
            width: 250px;
            padding: 10px;
            font-size: 16px;
        }
        /* Highlight style for selected week */
        .ui-datepicker .ui-datepicker-calendar .ui-state-highlight {
            background: #ffeb3b !important; /* Highlight color */
            color: #000 !important;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Select a Week</h1>
        <input type="text" id="weekPicker" placeholder="Select Week">
    </div>

    <script>
        $(function () {
            // Initialize the datepicker
            $("#weekPicker").datepicker({
                showOtherMonths: true,
                selectOtherMonths: true,
                firstDay: 1, // Start the week on Monday
                onSelect: function (dateText, inst) {
                    const selectedDate = new Date(dateText);
                    const day = selectedDate.getDay();

                    // Calculate the start (Monday) and end (Sunday) of the week
                    const startOfWeek = new Date(selectedDate);
                    startOfWeek.setDate(selectedDate.getDate() - (day === 0 ? 6 : day - 1)); // Handle Sunday as day 0
                    const endOfWeek = new Date(startOfWeek);
                    endOfWeek.setDate(startOfWeek.getDate() + 6);

                    // Set the input value to the week range
                    $(this).val(
                        `${$.datepicker.formatDate("yy-mm-dd", startOfWeek)} - ${$.datepicker.formatDate("yy-mm-dd", endOfWeek)}`
                    );

                    // Highlight the selected week
                    highlightWeek(startOfWeek, endOfWeek);
                },
                beforeShowDay: function (date) {
                    // Reset all dates to default styling
                    return [true, ""];
                }
            });

            // Function to highlight the selected week
            function highlightWeek(startOfWeek, endOfWeek) {
                setTimeout(function () {
                    $(".ui-datepicker-calendar td").each(function () {
                        const cellDate = new Date(
                            $(this).data("year"),
                            $(this).data("month"),
                            parseInt($(this).text(), 10)
                        );

                        // Highlight dates within the selected week
                        if (
                            cellDate >= startOfWeek &&
                            cellDate <= endOfWeek &&
                            !isNaN(cellDate)
                        ) {
                            $(this).addClass("ui-state-highlight");
                        } else {
                            $(this).removeClass("ui-state-highlight");
                        }
                    });
                }, 10);
            }
        });
    </script>
</body>
</html>


*************************************
*

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>jQuery Week Picker</title>

    <!-- jQuery and jQuery UI -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/smoothness/jquery-ui.css">

    <style>
        #weekPicker {
            width: 200px;
            padding: 10px;
            font-size: 16px;
        }
        .ui-datepicker .ui-datepicker-calendar .ui-state-highlight {
            background: #ffeb3b; /* Highlight color for the week */
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Select a Week</h1>
        <input type="text" id="weekPicker" placeholder="Select Week">
    </div>

    <script>
        $(function () {
            // Initialize datepicker
            $("#weekPicker").datepicker({
                showOtherMonths: true,
                selectOtherMonths: true,
                firstDay: 1, // Start the week on Monday
                onSelect: function (dateText, inst) {
                    const selectedDate = new Date(dateText);
                    const day = selectedDate.getDay();

                    // Calculate the start and end of the week
                    const startOfWeek = new Date(selectedDate);
                    startOfWeek.setDate(selectedDate.getDate() - (day === 0 ? 6 : day - 1));
                    const endOfWeek = new Date(startOfWeek);
                    endOfWeek.setDate(startOfWeek.getDate() + 6);

                    // Display the week range
                    $(this).val(
                        `${$.datepicker.formatDate("yy-mm-dd", startOfWeek)} - ${$.datepicker.formatDate("yy-mm-dd", endOfWeek)}`
                    );

                    // Highlight the selected week
                    highlightWeek(startOfWeek, endOfWeek);
                },
                beforeShowDay: function (date) {
                    return [true, ""]; // Enable all days for selection
                }
            });

            function highlightWeek(startOfWeek, endOfWeek) {
                // Highlight week in the calendar
                setTimeout(function () {
                    $(".ui-datepicker-calendar td").each(function () {
                        const cellDate = $(this).data("year") + "-" + pad($(this).data("month") + 1) + "-" + pad($(this).text());
                        const cellTime = new Date(cellDate).getTime();

                        if (cellTime >= startOfWeek.getTime() && cellTime <= endOfWeek.getTime()) {
                            $(this).addClass("ui-state-highlight");
                        } else {
                            $(this).removeClass("ui-state-highlight");
                        }
                    });
                }, 10);
            }

            function pad(number) {
                return number < 10 ? "0" + number : number;
            }
        });
    </script>
</body>
</html>



*******************
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Week Picker</title>
    
    <!-- Include jQuery and jQuery UI CSS -->
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/smoothness/jquery-ui.css">
    
    <!-- Include jQuery and jQuery UI JS -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
</head>
<body>

    <div class="container">
        <h1>Pick a Week</h1>
        <!-- Input field for the week picker -->
        <input type="text" id="weekPicker" placeholder="Select Week Range">
    </div>

    <!-- jQuery week picker script -->
    <script>
        $(function () {
            $("#weekPicker").datepicker({
                showOtherMonths: true,
                selectOtherMonths: true,
                onSelect: function (dateText, inst) {
                    const date = new Date(dateText);
                    const day = date.getDay();
                    
                    const startOfWeek = new Date(date);
                    startOfWeek.setDate(date.getDate() - (day === 0 ? 6 : day - 1));
                    const endOfWeek = new Date(startOfWeek);
                    endOfWeek.setDate(startOfWeek.getDate() + 6);

                    $(this).val(
                        `${$.datepicker.formatDate("yy-mm-dd", startOfWeek)} - ${$.datepicker.formatDate("yy-mm-dd", endOfWeek)}`
                    );
                }
            });
        });
    </script>

</body>
</html>


**************************************

use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

public function fetchEarningsData(Request $request)
{
    $startDate = $request->input('start_date', Carbon::now()->startOfYear()->toDateString());
    $endDate = $request->input('end_date', Carbon::now()->endOfYear()->toDateString());

    $earningsData = DB::table('bookings')
        ->join('users', 'bookings.driver_id', '=', 'users.id')
        ->leftJoin('reward_logs', 'bookings.driver_id', '=', 'reward_logs.driver_id')
        ->leftJoin('booking_transactions', 'bookings.id', '=', 'booking_transactions.booking_id')
        ->leftJoin('transactions', 'booking_transactions.transaction_id', '=', 'transactions.id')
        ->leftJoin('payouts', 'bookings.driver_id', '=', 'payouts.driver_id')
        ->select(
            DB::raw("WEEK(bookings.created_at, 1) as week_no"), // ISO week number
            DB::raw("DATE(DATE_SUB(bookings.created_at, INTERVAL WEEKDAY(bookings.created_at) DAY)) as from_date"), // Week start
            DB::raw("DATE(DATE_ADD(bookings.created_at, INTERVAL (6 - WEEKDAY(bookings.created_at)) DAY)) as to_date"), // Week end
            'bookings.driver_id',
            'users.mobile_no',
            DB::raw('users.first_name as driver_name'),
            DB::raw('COUNT(bookings.id) as total_trip'),
            DB::raw('SUM(bookings.fare) as total_ride_amount'),
            DB::raw('SUM(reward_logs.incentive) as incentives'),
            DB::raw('SUM(reward_logs.bonus) as bonuses'),
            DB::raw('(SUM(bookings.fare) + SUM(reward_logs.incentive) + SUM(reward_logs.bonus)) as total_earning'),
            DB::raw('SUM(booking_transactions.deductions) as deductions'),
            DB::raw('(SUM(bookings.fare) + SUM(reward_logs.incentive) + SUM(reward_logs.bonus) - SUM(booking_transactions.deductions)) as net_earning'),
            
            // Conditional SUM for cash, bank, and wallet
            DB::raw('SUM(CASE WHEN booking_transactions.payment_type = "cash" THEN booking_transactions.amount ELSE 0 END) as cash'),
            DB::raw('SUM(CASE WHEN booking_transactions.payment_type = "bank" THEN booking_transactions.amount ELSE 0 END) as bank'),
            DB::raw('SUM(CASE WHEN booking_transactions.payment_type = "wallet" THEN booking_transactions.amount ELSE 0 END) as wallet'),
            
            DB::raw('SUM(payouts.payout_amount) as payout_amount'),
            DB::raw('SUM(payouts.actual_payout) as actual_payout'),
            DB::raw('(SUM(payouts.payout_amount) - SUM(payouts.actual_payout)) as balance_amount'),
            DB::raw('GROUP_CONCAT(DISTINCT transactions.id) as payment_transaction'),
            DB::raw('MAX(payouts.date_paid) as date_paid'),
            DB::raw('MAX(payouts.status) as status'),
            DB::raw('GROUP_CONCAT(DISTINCT payouts.remarks) as remarks')
        )
        ->whereBetween('bookings.created_at', [$startDate, $endDate]) // Filter by date range
        ->groupBy(
            DB::raw("WEEK(bookings.created_at, 1)"), 
            'bookings.driver_id', 
            'users.mobile_no', 
            'users.first_name'
        )
        ->orderBy(DB::raw("WEEK(bookings.created_at, 1)"), 'asc')
        ->orderBy('bookings.driver_id', 'asc')
        ->get();

    return response()->json([
        'success' => true,
        'data' => $earningsData,
    ]);
}



*****************************
 DB::raw('SUM(booking_transactions.cash) as cash'),  //booking_transactions.payment_type=='cash'
                DB::raw('SUM(booking_transactions.bank) as bank'), //booking_transactions.payment_type=='bank'
                DB::raw('SUM(booking_transactions.wallet) as wallet'),  //booking_transactions.payment_type=='wallet'


***********************

use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

public function fetchEarningsData(Request $request)
{
    $startDate = $request->input('start_date', Carbon::now()->startOfYear()->toDateString());
    $endDate = $request->input('end_date', Carbon::now()->endOfYear()->toDateString());

    $earningsData = DB::table('bookings')
        ->join('users', 'bookings.driver_id', '=', 'users.id')
        ->leftJoin('reward_logs', 'bookings.driver_id', '=', 'reward_logs.driver_id')
        ->leftJoin('booking_transactions', 'bookings.id', '=', 'booking_transactions.booking_id')
        ->leftJoin('transactions', 'booking_transactions.transaction_id', '=', 'transactions.id')
        ->leftJoin('payouts', 'bookings.driver_id', '=', 'payouts.driver_id')
        ->select(
            DB::raw("WEEK(bookings.created_at, 1) as week_no"), // ISO week number
            DB::raw("DATE(DATE_SUB(bookings.created_at, INTERVAL WEEKDAY(bookings.created_at) DAY)) as from_date"), // Week start
            DB::raw("DATE(DATE_ADD(bookings.created_at, INTERVAL (6 - WEEKDAY(bookings.created_at)) DAY)) as to_date"), // Week end
            'bookings.driver_id',
            'users.mobile_no',
            DB::raw('users.first_name as driver_name'),
            DB::raw('COUNT(bookings.id) as total_trip'),
            DB::raw('SUM(bookings.fare) as total_ride_amount'),
            DB::raw('SUM(reward_logs.incentive) as incentives'),
            DB::raw('SUM(reward_logs.bonus) as bonuses'),
            DB::raw('(SUM(bookings.fare) + SUM(reward_logs.incentive) + SUM(reward_logs.bonus)) as total_earning'),
            DB::raw('SUM(booking_transactions.deductions) as deductions'),
            DB::raw('(SUM(bookings.fare) + SUM(reward_logs.incentive) + SUM(reward_logs.bonus) - SUM(booking_transactions.deductions)) as net_earning'),
            DB::raw('SUM(booking_transactions.cash) as cash'),
            DB::raw('SUM(booking_transactions.bank) as bank'),
            DB::raw('SUM(booking_transactions.wallet) as wallet'),
            DB::raw('SUM(payouts.payout_amount) as payout_amount'),
            DB::raw('SUM(payouts.actual_payout) as actual_payout'),
            DB::raw('(SUM(payouts.payout_amount) - SUM(payouts.actual_payout)) as balance_amount'),
            DB::raw('GROUP_CONCAT(DISTINCT transactions.id) as payment_transaction'),
            DB::raw('MAX(payouts.date_paid) as date_paid'),
            DB::raw('MAX(payouts.status) as status'),
            DB::raw('GROUP_CONCAT(DISTINCT payouts.remarks) as remarks')
        )
        ->whereBetween('bookings.created_at', [$startDate, $endDate]) // Filter by date range
        ->groupBy(
            DB::raw("WEEK(bookings.created_at, 1)"), 
            'bookings.driver_id', 
            'users.mobile_no', 
            'users.first_name'
        )
        ->orderBy(DB::raw("WEEK(bookings.created_at, 1)"), 'asc')
        ->orderBy('bookings.driver_id', 'asc')
        ->get();

    return response()->json([
        'success' => true,
        'data' => $earningsData,
    ]);
}

******************

week_no
from_date
to_date
driver_id
mobile_no
driver_name
total_trip
total_ride_amount
incentives
bonuses
total_earning
deductions
net_earning
cash
bank
wallet
payout_amount
actual_ayout
balance_amount
payment_transaction
date_paid
status
remarks

add table reward_logs,booking_transactions,transactions,payouts




use App\Models\Booking;
use Carbon\Carbon;

public function fetchBoomingData(Request $request)
{
    $startDate = $request->input('start_date', Carbon::now()->startOfYear()->toDateString());
    $endDate = $request->input('end_date', Carbon::now()->endOfYear()->toDateString());

    $boomingData = Booking::join('users', 'bookings.driver_id', '=', 'users.id')
        ->selectRaw("
            YEARWEEK(bookings.created_at, 1) as week_year,
            WEEK(bookings.created_at, 1) as week_number,
            YEAR(bookings.created_at) as year,
            bookings.driver_id,
            users.first_name as driver_name,
            COUNT(bookings.id) as total_bookings,
            SUM(bookings.fare) as total_fare,
            DATE_ADD(bookings.created_at, INTERVAL(1 - DAYOFWEEK(bookings.created_at)) DAY) as week_start_date,
            DATE_ADD(bookings.created_at, INTERVAL(7 - DAYOFWEEK(bookings.created_at)) DAY) as week_end_date
        ")
        ->whereBetween('bookings.created_at', [$startDate, $endDate]) // Filter by date range
        ->groupByRaw('week_year, bookings.driver_id, users.first_name')
        ->orderBy('year', 'asc')
        ->orderBy('week_number', 'asc')
        ->orderBy('bookings.driver_id', 'asc')
        ->get();

    return response()->json([
        'success' => true,
        'data' => $boomingData,
    ]);
}

****************************
DB::raw('SUM(bookings.fare) as total_fare'),
            DB::raw("DATE_ADD(bookings.created_at, INTERVAL(1 - DAYOFWEEK(bookings.created_at)) DAY) as week_start_date"), // Start of the week
            DB::raw("DATE_ADD(bookings.created_at, INTERVAL(7 - DAYOFWEEK(bookings.created_at)) DAY) as week_end_date")   // End of the week
        )
**************
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

public function fetchBoomingData(Request $request)
{
    $startDate = $request->input('start_date', Carbon::now()->startOfYear()->toDateString());
    $endDate = $request->input('end_date', Carbon::now()->endOfYear()->toDateString());

    $boomingData = DB::table('bookings')
        ->join('users', 'bookings.driver_id', '=', 'users.id')
        ->select(
            DB::raw("YEARWEEK(bookings.created_at, 1) as week_year"), // ISO week-year
            DB::raw("WEEK(bookings.created_at, 1) as week_number"),   // Week number (1 = starts on Monday)
            DB::raw("YEAR(bookings.created_at) as year"),            // Year for clarity
            'bookings.driver_id',
            DB::raw('users.first_name as driver_name'),
            DB::raw('COUNT(bookings.id) as total_bookings'),
            DB::raw('SUM(bookings.fare) as total_fare'),
            DB::raw("MIN(DATE(bookings.created_at)) as week_start_date"),
            DB::raw("MAX(DATE(bookings.created_at)) as week_end_date")
        )
        ->whereBetween('bookings.created_at', [$startDate, $endDate]) // Filter by date range
        ->groupBy('week_year', 'bookings.driver_id', 'users.first_name') // Include all non-aggregated columns
        ->orderBy('year', 'asc') // Order by year first
        ->orderBy('week_number', 'asc') // Order by week number
        ->orderBy('bookings.driver_id', 'asc') // Then by driver
        ->get();

    return response()->json([
        'success' => true,
        'data' => $boomingData,
    ]);
}


*********************************************
  $boomingData = DB::table('bookings')
    ->select(
        DB::raw("YEARWEEK(bookings.created_at, 1) as week_year"),
        'driver_id',
        DB::raw('users.first_name as driver_name'),
        DB::raw('COUNT(bookings.id) as total_bookings'),
        DB::raw('SUM(bookings.fare) as total_fare'),
        DB::raw("DATE_ADD(bookings.created_at, INTERVAL(1 - DAYOFWEEK(bookings.created_at)) DAY) as week_start_date"),
        DB::raw("DATE_ADD(bookings.created_at, INTERVAL(7 - DAYOFWEEK(bookings.created_at)) DAY) as week_end_date")
    )
    ->join('users', 'bookings.driver_id', '=', 'users.id')
    // ->whereBetween('bookings.created_at', [$startDate, $endDate]) // Use qualified column name
    ->groupBy('driver_id')
    ->orderBy('week_year', 'asc')
    ->orderBy('driver_id', 'asc')
    ->get();

[2024-11-21 16:44:15] local.DEBUG: SQLSTATE[42000]: Syntax error or access violation: 1055 
'laravel_orbitcabadmin_server.bookings.created_at' isn't in GROUP BY (Connection: mysql, SQL: select 
YEARWEEK(bookings.created_at, 1) as week_year, `driver_id`, users.first_name as driver_name, COUNT(bookings.id)
as total_bookings, SUM(bookings.fare) as total_fare, DATE_ADD(bookings.created_at, INTERVAL(1 - DAYOFWEEK(bookings.created_at)) DAY) 
as week_start_date, DATE_ADD(bookings.created_at, INTERVAL(7 - DAYOFWEEK(bookings.created_at)) DAY) as week_end_date from `bookings`
inner join `users` on `bookings`.`driver_id` = `users`.`id` group by `driver_id` order by `week_year` asc, `driver_id` asc) on 
C:\xampp\htdocs\php82\orbitcab-admin-api\vendor\laravel\framework\src\Illuminate\Database\Connection.php line number 829  

*******************************************


********************************************
use App\Models\Booking;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

public function getWeeklyBookings()
{
    // Get the start and end of the current week
    $startOfWeek = Carbon::now()->startOfWeek();
    $endOfWeek = Carbon::now()->endOfWeek();

    // Query to get total bookings and fare amount per driver
    $weeklyBookings = Booking::select('driver_id', DB::raw('COUNT(*) as total_bookings'), DB::raw('SUM(fare_amount) as total_fare'))
        ->whereBetween('booking_date', [$startOfWeek, $endOfWeek])
        ->groupBy('driver_id')
        ->orderByDesc('total_bookings')
        ->get();

    return $weeklyBookings;
}

**********************************************

/* General Styling */
td.w-30 {
    width: 30%;
    padding: 10px;
    vertical-align: top;
}

/* User Box Styling */
.user_box {
    display: flex;
    align-items: center;
    gap: 10px;
}

.user_box.mt-1 {
    margin-top: 8px;
}

.user_box .text-danger {
    color: #dc3545;
    font-size: 14px;
    margin-right: 5px;
}

.user_img img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
}

/* User Name Styling */
.user_name p {
    font-size: 16px;
    font-weight: bold;
    margin: 0;
    color: #333;
}

/* Employee ID Styling */
.user_box .fw-bold {
    font-weight: bold;
    color: #555;
    font-size: 14px;
}

/* Rating Link Styling */
a {
    display: flex;
    align-items: center;
    margin-top: 5px;
    color: #007bff;
    text-decoration: none;
}

a:hover {
    color: #0056b3;
}

a .fa-star {
    color: #f0ad4e;
    font-size: 14px;
    margin-right: 5px;
}

a .fw-bold {
    font-size: 14px;
    color: #333;
}

/* Total Rating Styling */
span.fw-bold {
    font-weight: bold;
}

*****************************************
<td class=" w-30"><div class="user_box"><span class="text-danger"><i class="fa-solid fa-circle"></i></span><div class="user_img"><img src="http://127.0.0.1:8088/app-assets/images/avatar-img.jpg" class="img-fluid" alt="user-profile"></div><div class="user_name"><p>soumyajit ball</p></div></div><div class="user_box mt-1 ml-2"><span class="fw-bold">EMP-24510598 </span> </div><a href="http://127.0.0.1:8088/admin/user/review-list/e8a2df93-cdb4-42c5-9ce3-a912ccde0023"><i class="fa fa-star" aria-hidden="true"><span class="fw-bold">Total Rating:- </span>0</i></a></td>
***************************************************************************************
$(document).ready(function() {
    const brandSelect = $('#brand_id'); // Assuming you have a brand select element
    const categorySelect = $('#category_id'); // Assuming you have a category select element

    brandSelect.on('change', function() {
        const brandId = $(this).val();
        // Clear previous options
        categorySelect.empty();

        // Fetch categories based on selected brand
        $.ajax({
            url: baseUrl + 'ajax/getCategoryByBrands/' + brandId,
            method: 'GET',
            dataType: 'json',
            success: function(data) {
                // Filter parent categories first
                const parentCategories = data.filter(function(category) {
                    return category.parent_id === null;
                });

                // Iterate over each parent category and create optgroups
                parentCategories.forEach(function(parentCategory) {
                    const optgroup = $('<optgroup></optgroup>')
                        .attr('label', parentCategory.name);

                    // Optionally, add parent category as an option (can be removed if not needed)
                    optgroup.append($('<option></option>')
                        .val(parentCategory.id)
                        .text(parentCategory.name));

                    // Add child categories to the respective parent optgroup
                    data.forEach(function(childCategory) {
                        if (childCategory.parent_id === parentCategory.id) {
                            optgroup.append($('<option></option>')
                                .val(childCategory.id)
                                .text(childCategory.name));
                        }
                    });

                    // Append the optgroup to the select dropdown
                    categorySelect.append(optgroup);
                });
            },
            error: function(error) {
                console.error('Error fetching categories:', error);
            }
        });
    });
});

**********************************************
$(document).ready(function() {
    const brandSelect = $('#brand_id'); // Assuming you have a brand select element
    const categorySelect = $('#category_id'); // Assuming you have a category select element

    brandSelect.on('change', function() {
        const brandId = $(this).val();
        // Clear previous options
        categorySelect.empty();

        // Fetch categories based on selected brand
        $.ajax({
            url: baseUrl + 'ajax/getCategoryByBrands/' + brandId,
            method: 'GET',
            dataType: 'json',
            success: function(data) {
                // Create a map to store children under each parent
                const categoryMap = {};

                // Separate parent and child categories
                data.forEach(function(category) {
                    if (category.parent_id === null) {
                        // Initialize parent category in the map
                        categoryMap[category.id] = {
                            name: category.name,
                            children: []
                        };
                    } else if (category.parent_id in categoryMap) {
                        // Add child to the respective parent
                        categoryMap[category.parent_id].children.push(category);
                    }
                });

                // Populate the select with optgroups and child options
                Object.keys(categoryMap).forEach(function(parentId) {
                    const parent = categoryMap[parentId];

                    // Create optgroup for the parent category
                    const optgroup = $('<optgroup></optgroup>').attr('label', parent.name);

                    // Add each child category as an option within the optgroup
                    parent.children.forEach(function(childCategory) {
                        const option = $('<option></option>')
                            .val(childCategory.id)
                            .text(childCategory.name);
                        optgroup.append(option);
                    });

                    categorySelect.append(optgroup);
                });
            },
            error: function(error) {
                console.error('Error fetching categories:', error);
            }
        });
    });
});


*****************************************
        {
            "id": 17,
            "uuid": "f9885f46-d203-4ea9-9e2f-6cfe2849f334",
            "name": "Four Wheeler",
            "slug": "four_wheeler",
            "alias": null,
            "parent_id": null,
            "type": null,
            "description": null,
            "is_active": 1,
            "created_at": null,
            "updated_at": null,
            "deleted_at": null,
            "children": [{
                    "id": 19,
                    "uuid": "b92c0a3e-586d-4dc1-8426-6fcf90aadcdb",
                    "name": "Mini",
                    "slug": "mini",
                    "alias": null,
                    "parent_id": 17,
                    "type": null,
                    "description": null,
                    "is_active": 1,
                    "created_at": "2024-10-21T15:53:57.000000Z",
                    "updated_at": "2024-10-21T15:53:57.000000Z",
                    "deleted_at": null
                },
                {
                    "id": 21,
                    "uuid": "b38c588a-442b-4e50-91c7-e3fd1a16ac59",
                    "name": "Sedan",
                    "slug": "sedan",
                    "alias": null,
                    "parent_id": 17,
                    "type": "17",
                    "description": null,
                    "is_active": 1,
                    "created_at": "2024-10-21T19:07:21.000000Z",
                    "updated_at": "2024-10-21T20:22:21.000000Z",
                    "deleted_at": null
                }
            ]
        }




        $(document).ready(function() {
                    const brandSelect = $('#brand_id'); // Assuming you have a brand select element
                    const categorySelect = $('#category_id'); // Assuming you have a category select element

                    // categorySelect.on('change', function() {
                    // const categoryId = $(this).val();

                    brandSelect.on('change', function() {
                            const brandId = $(this).val();
                            // Clear previous options
                            categorySelect.empty();
                            // brandSelect.empty();

                            // Fetch brands based on selected category
                            $.ajax({
                                    url: baseUrl + 'ajax/getCategoryByBrands/' + brandId,
                                    // url: baseUrl + 'ajax/getBrandsByCategory/' + categoryId,
                                    method: 'GET',
                                    dataType: 'json',
                                    success: function(data) {
                                        data.forEach(function(category) {
                                                    console.log(category);
                                                    if (category.parent_id == null) {
                                                        const option = $(' <
                                                            option > < /option>').val(category.id)
                                                            .text(category.name);
                                                        }
                                                        categorySelect.append(option);
                                                    });
                                                // data.forEach(function(brand) {
                                                // const option = $('<option></option>').val(brand.id).text(
                                                // brand.name);
                                                // brandSelect.append(option);
                                                // });
                                            },
                                            error: function(error) {
                                                console.error('Error fetching brands:', error);
                                            }
                                    });
                            });
                    });
**********************************************

<?php

use Google_Client;

class FirestoreService {

    // Function to get access token
    public function getAccessToken()
    {
        // Path to your Firebase credentials JSON file
        $credentialsFilePath = config_path('firebase-adminsdk.json');
        
        // Create a new Google client
        $client = new Google_Client();
        
        // Load the credentials from the Firebase JSON file
        $client->setAuthConfig($credentialsFilePath);
        
        // Add Firestore and Firebase Messaging scopes
        $client->addScope('https://www.googleapis.com/auth/datastore'); // Firestore scope
        $client->addScope('https://www.googleapis.com/auth/firebase.messaging'); // FCM scope
        
        // Fetch the access token
        $token = $client->fetchAccessTokenWithAssertion();
        
        // Return the access token
        return $token['access_token'];
    }

    // Function to get data from Firestore
    public function getData()
    {
        // Firestore URL for the specific collection or document
        $url = 'https://firestore.googleapis.com/v1/projects/orbitcab-e93d8/databases/(default)/documents/liveTracking';
        
        // Get the access token by calling the getAccessToken() method
        $token = $this->getAccessToken(); 

        // Initialize a cURL session
        $ch = curl_init();
        
        // Set the URL for the cURL request
        curl_setopt($ch, CURLOPT_URL, $url);
        
        // Return the transfer as a string instead of outputting it directly
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        
        // Set the HTTP headers, including the access token for authorization
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $token,
        ]);
        
        // Execute the cURL request and get the response
        $response = curl_exec($ch);
        
        // Close the cURL session
        curl_close($ch);

        // Decode the JSON response into an associative array
        $data = json_decode($response, true);

        // Return the data
        return $data;
    }
}

*****************************************
function getAccessToken()
    {
        $credentialsFilePath = config_path('firebase-adminsdk.json');
        $client = new \Google_Client();
        $client->setAuthConfig($credentialsFilePath);
        $client->addScope('https://www.googleapis.com/auth/firebase.messaging');
        $token = $client->fetchAccessTokenWithAssertion();
        $accessToken = $token['access_token'];
        return $accessToken;
    }

    public function getData()
    {
        $url = 'https://firestore.googleapis.com/v1/projects/orbitcab-e93d8/databases/(default)/documents/liveTracking';
        $token = $this->getAccessToken(); // Obtain this from your Firebase Authentication

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $token,
        ]);
        $response = curl_exec($ch);
        dd($response);
        curl_close($ch);

        $data = json_decode($response, true);

        return $data;
    }

this code  
{

  "error": {

    "code": 403,

    "message": "Request had insufficient authentication scopes.",

    "status": "PERMISSION_DENIED",

    "details": [

      {

        "@type": "type.googleapis.com/google.rpc.ErrorInfo",

        "reason": "ACCESS_TOKEN_SCOPE_INSUFFICIENT",

        "domain": "googleapis.com",

        "metadata": {

          "method": "google.firestore.v1.Firestore.GetOrListDocuments",

          "service": "firestore.googleapis.com"

        }

      }

    ]

  }

}
how to solved this issue
***************************************************************************************
