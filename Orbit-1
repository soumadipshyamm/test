***************************************************************************************
***************************************************************************************
 DB::raw('SUM(booking_transactions.cash) as cash'),  //booking_transactions.payment_type=='cash'
                DB::raw('SUM(booking_transactions.bank) as bank'), //booking_transactions.payment_type=='bank'
                DB::raw('SUM(booking_transactions.wallet) as wallet'),  //booking_transactions.payment_type=='wallet'


***********************

use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

public function fetchEarningsData(Request $request)
{
    $startDate = $request->input('start_date', Carbon::now()->startOfYear()->toDateString());
    $endDate = $request->input('end_date', Carbon::now()->endOfYear()->toDateString());

    $earningsData = DB::table('bookings')
        ->join('users', 'bookings.driver_id', '=', 'users.id')
        ->leftJoin('reward_logs', 'bookings.driver_id', '=', 'reward_logs.driver_id')
        ->leftJoin('booking_transactions', 'bookings.id', '=', 'booking_transactions.booking_id')
        ->leftJoin('transactions', 'booking_transactions.transaction_id', '=', 'transactions.id')
        ->leftJoin('payouts', 'bookings.driver_id', '=', 'payouts.driver_id')
        ->select(
            DB::raw("WEEK(bookings.created_at, 1) as week_no"), // ISO week number
            DB::raw("DATE(DATE_SUB(bookings.created_at, INTERVAL WEEKDAY(bookings.created_at) DAY)) as from_date"), // Week start
            DB::raw("DATE(DATE_ADD(bookings.created_at, INTERVAL (6 - WEEKDAY(bookings.created_at)) DAY)) as to_date"), // Week end
            'bookings.driver_id',
            'users.mobile_no',
            DB::raw('users.first_name as driver_name'),
            DB::raw('COUNT(bookings.id) as total_trip'),
            DB::raw('SUM(bookings.fare) as total_ride_amount'),
            DB::raw('SUM(reward_logs.incentive) as incentives'),
            DB::raw('SUM(reward_logs.bonus) as bonuses'),
            DB::raw('(SUM(bookings.fare) + SUM(reward_logs.incentive) + SUM(reward_logs.bonus)) as total_earning'),
            DB::raw('SUM(booking_transactions.deductions) as deductions'),
            DB::raw('(SUM(bookings.fare) + SUM(reward_logs.incentive) + SUM(reward_logs.bonus) - SUM(booking_transactions.deductions)) as net_earning'),
            DB::raw('SUM(booking_transactions.cash) as cash'),
            DB::raw('SUM(booking_transactions.bank) as bank'),
            DB::raw('SUM(booking_transactions.wallet) as wallet'),
            DB::raw('SUM(payouts.payout_amount) as payout_amount'),
            DB::raw('SUM(payouts.actual_payout) as actual_payout'),
            DB::raw('(SUM(payouts.payout_amount) - SUM(payouts.actual_payout)) as balance_amount'),
            DB::raw('GROUP_CONCAT(DISTINCT transactions.id) as payment_transaction'),
            DB::raw('MAX(payouts.date_paid) as date_paid'),
            DB::raw('MAX(payouts.status) as status'),
            DB::raw('GROUP_CONCAT(DISTINCT payouts.remarks) as remarks')
        )
        ->whereBetween('bookings.created_at', [$startDate, $endDate]) // Filter by date range
        ->groupBy(
            DB::raw("WEEK(bookings.created_at, 1)"), 
            'bookings.driver_id', 
            'users.mobile_no', 
            'users.first_name'
        )
        ->orderBy(DB::raw("WEEK(bookings.created_at, 1)"), 'asc')
        ->orderBy('bookings.driver_id', 'asc')
        ->get();

    return response()->json([
        'success' => true,
        'data' => $earningsData,
    ]);
}

******************

week_no
from_date
to_date
driver_id
mobile_no
driver_name
total_trip
total_ride_amount
incentives
bonuses
total_earning
deductions
net_earning
cash
bank
wallet
payout_amount
actual_ayout
balance_amount
payment_transaction
date_paid
status
remarks

add table reward_logs,booking_transactions,transactions,payouts




use App\Models\Booking;
use Carbon\Carbon;

public function fetchBoomingData(Request $request)
{
    $startDate = $request->input('start_date', Carbon::now()->startOfYear()->toDateString());
    $endDate = $request->input('end_date', Carbon::now()->endOfYear()->toDateString());

    $boomingData = Booking::join('users', 'bookings.driver_id', '=', 'users.id')
        ->selectRaw("
            YEARWEEK(bookings.created_at, 1) as week_year,
            WEEK(bookings.created_at, 1) as week_number,
            YEAR(bookings.created_at) as year,
            bookings.driver_id,
            users.first_name as driver_name,
            COUNT(bookings.id) as total_bookings,
            SUM(bookings.fare) as total_fare,
            DATE_ADD(bookings.created_at, INTERVAL(1 - DAYOFWEEK(bookings.created_at)) DAY) as week_start_date,
            DATE_ADD(bookings.created_at, INTERVAL(7 - DAYOFWEEK(bookings.created_at)) DAY) as week_end_date
        ")
        ->whereBetween('bookings.created_at', [$startDate, $endDate]) // Filter by date range
        ->groupByRaw('week_year, bookings.driver_id, users.first_name')
        ->orderBy('year', 'asc')
        ->orderBy('week_number', 'asc')
        ->orderBy('bookings.driver_id', 'asc')
        ->get();

    return response()->json([
        'success' => true,
        'data' => $boomingData,
    ]);
}

****************************
DB::raw('SUM(bookings.fare) as total_fare'),
            DB::raw("DATE_ADD(bookings.created_at, INTERVAL(1 - DAYOFWEEK(bookings.created_at)) DAY) as week_start_date"), // Start of the week
            DB::raw("DATE_ADD(bookings.created_at, INTERVAL(7 - DAYOFWEEK(bookings.created_at)) DAY) as week_end_date")   // End of the week
        )
**************
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

public function fetchBoomingData(Request $request)
{
    $startDate = $request->input('start_date', Carbon::now()->startOfYear()->toDateString());
    $endDate = $request->input('end_date', Carbon::now()->endOfYear()->toDateString());

    $boomingData = DB::table('bookings')
        ->join('users', 'bookings.driver_id', '=', 'users.id')
        ->select(
            DB::raw("YEARWEEK(bookings.created_at, 1) as week_year"), // ISO week-year
            DB::raw("WEEK(bookings.created_at, 1) as week_number"),   // Week number (1 = starts on Monday)
            DB::raw("YEAR(bookings.created_at) as year"),            // Year for clarity
            'bookings.driver_id',
            DB::raw('users.first_name as driver_name'),
            DB::raw('COUNT(bookings.id) as total_bookings'),
            DB::raw('SUM(bookings.fare) as total_fare'),
            DB::raw("MIN(DATE(bookings.created_at)) as week_start_date"),
            DB::raw("MAX(DATE(bookings.created_at)) as week_end_date")
        )
        ->whereBetween('bookings.created_at', [$startDate, $endDate]) // Filter by date range
        ->groupBy('week_year', 'bookings.driver_id', 'users.first_name') // Include all non-aggregated columns
        ->orderBy('year', 'asc') // Order by year first
        ->orderBy('week_number', 'asc') // Order by week number
        ->orderBy('bookings.driver_id', 'asc') // Then by driver
        ->get();

    return response()->json([
        'success' => true,
        'data' => $boomingData,
    ]);
}


*********************************************
  $boomingData = DB::table('bookings')
    ->select(
        DB::raw("YEARWEEK(bookings.created_at, 1) as week_year"),
        'driver_id',
        DB::raw('users.first_name as driver_name'),
        DB::raw('COUNT(bookings.id) as total_bookings'),
        DB::raw('SUM(bookings.fare) as total_fare'),
        DB::raw("DATE_ADD(bookings.created_at, INTERVAL(1 - DAYOFWEEK(bookings.created_at)) DAY) as week_start_date"),
        DB::raw("DATE_ADD(bookings.created_at, INTERVAL(7 - DAYOFWEEK(bookings.created_at)) DAY) as week_end_date")
    )
    ->join('users', 'bookings.driver_id', '=', 'users.id')
    // ->whereBetween('bookings.created_at', [$startDate, $endDate]) // Use qualified column name
    ->groupBy('driver_id')
    ->orderBy('week_year', 'asc')
    ->orderBy('driver_id', 'asc')
    ->get();

[2024-11-21 16:44:15] local.DEBUG: SQLSTATE[42000]: Syntax error or access violation: 1055 
'laravel_orbitcabadmin_server.bookings.created_at' isn't in GROUP BY (Connection: mysql, SQL: select 
YEARWEEK(bookings.created_at, 1) as week_year, `driver_id`, users.first_name as driver_name, COUNT(bookings.id)
as total_bookings, SUM(bookings.fare) as total_fare, DATE_ADD(bookings.created_at, INTERVAL(1 - DAYOFWEEK(bookings.created_at)) DAY) 
as week_start_date, DATE_ADD(bookings.created_at, INTERVAL(7 - DAYOFWEEK(bookings.created_at)) DAY) as week_end_date from `bookings`
inner join `users` on `bookings`.`driver_id` = `users`.`id` group by `driver_id` order by `week_year` asc, `driver_id` asc) on 
C:\xampp\htdocs\php82\orbitcab-admin-api\vendor\laravel\framework\src\Illuminate\Database\Connection.php line number 829  

*******************************************


********************************************
use App\Models\Booking;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

public function getWeeklyBookings()
{
    // Get the start and end of the current week
    $startOfWeek = Carbon::now()->startOfWeek();
    $endOfWeek = Carbon::now()->endOfWeek();

    // Query to get total bookings and fare amount per driver
    $weeklyBookings = Booking::select('driver_id', DB::raw('COUNT(*) as total_bookings'), DB::raw('SUM(fare_amount) as total_fare'))
        ->whereBetween('booking_date', [$startOfWeek, $endOfWeek])
        ->groupBy('driver_id')
        ->orderByDesc('total_bookings')
        ->get();

    return $weeklyBookings;
}

**********************************************

/* General Styling */
td.w-30 {
    width: 30%;
    padding: 10px;
    vertical-align: top;
}

/* User Box Styling */
.user_box {
    display: flex;
    align-items: center;
    gap: 10px;
}

.user_box.mt-1 {
    margin-top: 8px;
}

.user_box .text-danger {
    color: #dc3545;
    font-size: 14px;
    margin-right: 5px;
}

.user_img img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
}

/* User Name Styling */
.user_name p {
    font-size: 16px;
    font-weight: bold;
    margin: 0;
    color: #333;
}

/* Employee ID Styling */
.user_box .fw-bold {
    font-weight: bold;
    color: #555;
    font-size: 14px;
}

/* Rating Link Styling */
a {
    display: flex;
    align-items: center;
    margin-top: 5px;
    color: #007bff;
    text-decoration: none;
}

a:hover {
    color: #0056b3;
}

a .fa-star {
    color: #f0ad4e;
    font-size: 14px;
    margin-right: 5px;
}

a .fw-bold {
    font-size: 14px;
    color: #333;
}

/* Total Rating Styling */
span.fw-bold {
    font-weight: bold;
}

*****************************************
<td class=" w-30"><div class="user_box"><span class="text-danger"><i class="fa-solid fa-circle"></i></span><div class="user_img"><img src="http://127.0.0.1:8088/app-assets/images/avatar-img.jpg" class="img-fluid" alt="user-profile"></div><div class="user_name"><p>soumyajit ball</p></div></div><div class="user_box mt-1 ml-2"><span class="fw-bold">EMP-24510598 </span> </div><a href="http://127.0.0.1:8088/admin/user/review-list/e8a2df93-cdb4-42c5-9ce3-a912ccde0023"><i class="fa fa-star" aria-hidden="true"><span class="fw-bold">Total Rating:- </span>0</i></a></td>
***************************************************************************************
$(document).ready(function() {
    const brandSelect = $('#brand_id'); // Assuming you have a brand select element
    const categorySelect = $('#category_id'); // Assuming you have a category select element

    brandSelect.on('change', function() {
        const brandId = $(this).val();
        // Clear previous options
        categorySelect.empty();

        // Fetch categories based on selected brand
        $.ajax({
            url: baseUrl + 'ajax/getCategoryByBrands/' + brandId,
            method: 'GET',
            dataType: 'json',
            success: function(data) {
                // Filter parent categories first
                const parentCategories = data.filter(function(category) {
                    return category.parent_id === null;
                });

                // Iterate over each parent category and create optgroups
                parentCategories.forEach(function(parentCategory) {
                    const optgroup = $('<optgroup></optgroup>')
                        .attr('label', parentCategory.name);

                    // Optionally, add parent category as an option (can be removed if not needed)
                    optgroup.append($('<option></option>')
                        .val(parentCategory.id)
                        .text(parentCategory.name));

                    // Add child categories to the respective parent optgroup
                    data.forEach(function(childCategory) {
                        if (childCategory.parent_id === parentCategory.id) {
                            optgroup.append($('<option></option>')
                                .val(childCategory.id)
                                .text(childCategory.name));
                        }
                    });

                    // Append the optgroup to the select dropdown
                    categorySelect.append(optgroup);
                });
            },
            error: function(error) {
                console.error('Error fetching categories:', error);
            }
        });
    });
});

**********************************************
$(document).ready(function() {
    const brandSelect = $('#brand_id'); // Assuming you have a brand select element
    const categorySelect = $('#category_id'); // Assuming you have a category select element

    brandSelect.on('change', function() {
        const brandId = $(this).val();
        // Clear previous options
        categorySelect.empty();

        // Fetch categories based on selected brand
        $.ajax({
            url: baseUrl + 'ajax/getCategoryByBrands/' + brandId,
            method: 'GET',
            dataType: 'json',
            success: function(data) {
                // Create a map to store children under each parent
                const categoryMap = {};

                // Separate parent and child categories
                data.forEach(function(category) {
                    if (category.parent_id === null) {
                        // Initialize parent category in the map
                        categoryMap[category.id] = {
                            name: category.name,
                            children: []
                        };
                    } else if (category.parent_id in categoryMap) {
                        // Add child to the respective parent
                        categoryMap[category.parent_id].children.push(category);
                    }
                });

                // Populate the select with optgroups and child options
                Object.keys(categoryMap).forEach(function(parentId) {
                    const parent = categoryMap[parentId];

                    // Create optgroup for the parent category
                    const optgroup = $('<optgroup></optgroup>').attr('label', parent.name);

                    // Add each child category as an option within the optgroup
                    parent.children.forEach(function(childCategory) {
                        const option = $('<option></option>')
                            .val(childCategory.id)
                            .text(childCategory.name);
                        optgroup.append(option);
                    });

                    categorySelect.append(optgroup);
                });
            },
            error: function(error) {
                console.error('Error fetching categories:', error);
            }
        });
    });
});


*****************************************
        {
            "id": 17,
            "uuid": "f9885f46-d203-4ea9-9e2f-6cfe2849f334",
            "name": "Four Wheeler",
            "slug": "four_wheeler",
            "alias": null,
            "parent_id": null,
            "type": null,
            "description": null,
            "is_active": 1,
            "created_at": null,
            "updated_at": null,
            "deleted_at": null,
            "children": [{
                    "id": 19,
                    "uuid": "b92c0a3e-586d-4dc1-8426-6fcf90aadcdb",
                    "name": "Mini",
                    "slug": "mini",
                    "alias": null,
                    "parent_id": 17,
                    "type": null,
                    "description": null,
                    "is_active": 1,
                    "created_at": "2024-10-21T15:53:57.000000Z",
                    "updated_at": "2024-10-21T15:53:57.000000Z",
                    "deleted_at": null
                },
                {
                    "id": 21,
                    "uuid": "b38c588a-442b-4e50-91c7-e3fd1a16ac59",
                    "name": "Sedan",
                    "slug": "sedan",
                    "alias": null,
                    "parent_id": 17,
                    "type": "17",
                    "description": null,
                    "is_active": 1,
                    "created_at": "2024-10-21T19:07:21.000000Z",
                    "updated_at": "2024-10-21T20:22:21.000000Z",
                    "deleted_at": null
                }
            ]
        }




        $(document).ready(function() {
                    const brandSelect = $('#brand_id'); // Assuming you have a brand select element
                    const categorySelect = $('#category_id'); // Assuming you have a category select element

                    // categorySelect.on('change', function() {
                    // const categoryId = $(this).val();

                    brandSelect.on('change', function() {
                            const brandId = $(this).val();
                            // Clear previous options
                            categorySelect.empty();
                            // brandSelect.empty();

                            // Fetch brands based on selected category
                            $.ajax({
                                    url: baseUrl + 'ajax/getCategoryByBrands/' + brandId,
                                    // url: baseUrl + 'ajax/getBrandsByCategory/' + categoryId,
                                    method: 'GET',
                                    dataType: 'json',
                                    success: function(data) {
                                        data.forEach(function(category) {
                                                    console.log(category);
                                                    if (category.parent_id == null) {
                                                        const option = $(' <
                                                            option > < /option>').val(category.id)
                                                            .text(category.name);
                                                        }
                                                        categorySelect.append(option);
                                                    });
                                                // data.forEach(function(brand) {
                                                // const option = $('<option></option>').val(brand.id).text(
                                                // brand.name);
                                                // brandSelect.append(option);
                                                // });
                                            },
                                            error: function(error) {
                                                console.error('Error fetching brands:', error);
                                            }
                                    });
                            });
                    });
**********************************************

<?php

use Google_Client;

class FirestoreService {

    // Function to get access token
    public function getAccessToken()
    {
        // Path to your Firebase credentials JSON file
        $credentialsFilePath = config_path('firebase-adminsdk.json');
        
        // Create a new Google client
        $client = new Google_Client();
        
        // Load the credentials from the Firebase JSON file
        $client->setAuthConfig($credentialsFilePath);
        
        // Add Firestore and Firebase Messaging scopes
        $client->addScope('https://www.googleapis.com/auth/datastore'); // Firestore scope
        $client->addScope('https://www.googleapis.com/auth/firebase.messaging'); // FCM scope
        
        // Fetch the access token
        $token = $client->fetchAccessTokenWithAssertion();
        
        // Return the access token
        return $token['access_token'];
    }

    // Function to get data from Firestore
    public function getData()
    {
        // Firestore URL for the specific collection or document
        $url = 'https://firestore.googleapis.com/v1/projects/orbitcab-e93d8/databases/(default)/documents/liveTracking';
        
        // Get the access token by calling the getAccessToken() method
        $token = $this->getAccessToken(); 

        // Initialize a cURL session
        $ch = curl_init();
        
        // Set the URL for the cURL request
        curl_setopt($ch, CURLOPT_URL, $url);
        
        // Return the transfer as a string instead of outputting it directly
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        
        // Set the HTTP headers, including the access token for authorization
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $token,
        ]);
        
        // Execute the cURL request and get the response
        $response = curl_exec($ch);
        
        // Close the cURL session
        curl_close($ch);

        // Decode the JSON response into an associative array
        $data = json_decode($response, true);

        // Return the data
        return $data;
    }
}

*****************************************
function getAccessToken()
    {
        $credentialsFilePath = config_path('firebase-adminsdk.json');
        $client = new \Google_Client();
        $client->setAuthConfig($credentialsFilePath);
        $client->addScope('https://www.googleapis.com/auth/firebase.messaging');
        $token = $client->fetchAccessTokenWithAssertion();
        $accessToken = $token['access_token'];
        return $accessToken;
    }

    public function getData()
    {
        $url = 'https://firestore.googleapis.com/v1/projects/orbitcab-e93d8/databases/(default)/documents/liveTracking';
        $token = $this->getAccessToken(); // Obtain this from your Firebase Authentication

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $token,
        ]);
        $response = curl_exec($ch);
        dd($response);
        curl_close($ch);

        $data = json_decode($response, true);

        return $data;
    }

this code  
{

  "error": {

    "code": 403,

    "message": "Request had insufficient authentication scopes.",

    "status": "PERMISSION_DENIED",

    "details": [

      {

        "@type": "type.googleapis.com/google.rpc.ErrorInfo",

        "reason": "ACCESS_TOKEN_SCOPE_INSUFFICIENT",

        "domain": "googleapis.com",

        "metadata": {

          "method": "google.firestore.v1.Firestore.GetOrListDocuments",

          "service": "firestore.googleapis.com"

        }

      }

    ]

  }

}
how to solved this issue
***************************************************************************************
