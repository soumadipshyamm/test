

private function notifyDrivers($booking)
{
    $pickup = json_decode($booking->from_address);
    $dropoff = json_decode($booking->to_address);
    $latitude = $pickup->lat;
    $longitude = $pickup->long;
    $dropLatitude = $dropoff->lat;
    $dropLongitude = $dropoff->long;
    $radius = getSiteSetting("search_radius") ?? 5;
    $dropRadius = 0.1; // 100 meters (0.1 km)

    // Get available drivers who have NOT accepted a booking
    $drivers = User::select('users.*')
        ->selectRaw(
            '(6371 * acos(cos(radians(?)) * cos(radians(latitude)) * cos(radians(longitude) - radians(?)) + sin(radians(?)) * sin(radians(latitude)))) AS pickup_distance',
            [$latitude, $longitude, $latitude]
        )
        ->selectRaw(
            '(6371 * acos(cos(radians(?)) * cos(radians(latitude)) * cos(radians(longitude) - radians(?)) + sin(radians(?)) * sin(radians(latitude)))) AS drop_distance',
            [$dropLatitude, $dropLongitude, $dropLatitude]
        )
        ->where('is_online', 1)
        ->having('pickup_distance', '<=', $radius) // Within search radius
        ->having('drop_distance', '<=', $dropRadius) // Near drop location (100 meters)
        ->whereHas('vehicles', function ($q) use ($booking) {
            $q->where('category_id', $booking->category_id);
        })
        ->whereDoesntHave('acceptedBookings', function ($q) {
            $q->where('status', 'accepted'); // Exclude already accepted bookings
        })
        ->with('ongoingBookings')
        ->orderBy('drop_distance') // Prioritize nearest drivers
        ->take(10)
        ->get();

    foreach ($drivers as $driver) {
        if ($driver->ongoingBookings->isEmpty()) {
            BookingRequestDriver::create([
                'booking_id' => $booking->id,
                'driver_id' => $driver->id,
                'status' => 0
            ]);

            $notificationData = (object)[
                'body' => __('New Booking Available'),
                'title' => __('Booking Request'),
                'data' => new BookingResource($booking),
                'image' => asset('path/to/image.jpg'),
            ];

            dispatch(new SendNotificationJob($notificationData, $driver->device_token));
        }
    }
}






use Illuminate\Support\Facades\Http;

function notifyDrivers($booking)
{
    $pickup = json_decode($booking->from_address);
    $latitude = $pickup->lat;
    $longitude = $pickup->long;
    $radius = getSiteSetting("search_radius") ?? 5000; // Convert km to meters for Google API
    $apiKey = env('GOOGLE_MAPS_API_KEY');

    // Fetch drivers with active status and valid location
    $drivers = User::where('is_online', 1)
        ->whereHas('vehicles', function ($q) use ($booking) {
            $q->where('category_id', $booking->category_id);
        })
        ->whereNotNull('latitude')
        ->whereNotNull('longitude')
        ->get();

    if ($drivers->isEmpty()) {
        return;
    }

    // Format drivers' locations for Google Distance Matrix API
    $origins = "{$latitude},{$longitude}";
    $destinations = implode('|', $drivers->map(fn($driver) => "{$driver->latitude},{$driver->longitude}")->toArray());

    // Call Google Distance Matrix API
    $googleResponse = Http::get("https://maps.googleapis.com/maps/api/distancematrix/json", [
        'origins' => $origins,
        'destinations' => $destinations,
        'key' => $apiKey,
        'units' => 'metric'
    ]);

    $responseData = $googleResponse->json();

    if ($responseData['status'] !== 'OK') {
        logger()->error('Google API Error: ' . json_encode($responseData));
        return;
    }

    $elements = $responseData['rows'][0]['elements'];

    foreach ($drivers as $index => $driver) {
        $distance = $elements[$index]['distance']['value'] ?? null; // Distance in meters

        if ($distance !== null && $distance <= $radius * 1000) { // Convert km to meters
            if ($driver->ongoingBookings->count() == 0) {
                BookingRequestDriver::create([
                    'booking_id' => $booking->id,
                    'driver_id' => $driver->id,
                    'status' => 0
                ]);

                $fcmToken = $driver->device_token;
                $notificationData = (object)[
                    'body' => __('New Booking Have Arrived'),
                    'title' => __('Booking Created'),
                    'data' => new BookingResource($booking),
                    'image' => 'https://example.com/path/to/image.jpg',
                ];
                $this->sendNotification($notificationData, $fcmToken);
            }
        }
    }
}

















 private function notifyDrivers($booking)
    {
        $pickup = json_decode($booking->from_address);
        $latitude = $pickup->lat;
        $longitude = $pickup->long;
        $radius = getSiteSetting("search_radius") ?? 5;
        // $bookingInfo = Booking::where(['is_accepted' => 1, 'type' => 'asap'])
        //     ->whereNull('driver_id')
        //     ->orderBy('id', 'desc')->take(1)->get();
        $drivers = User::select('*')
            ->selectRaw(
                '( 6371 * acos( cos( radians(?) ) *
                        cos( radians( latitude ) )
                        * cos( radians( longitude ) - radians(?)
                        ) + sin( radians(?) ) *
                        sin( radians( latitude ) ) )
                        ) AS distance',
                [$latitude, $longitude, $latitude]
            )
            ->where('is_online', 1)
            ->having('distance', '<=', $radius)
            ->whereHas('vehicles', function ($q) use ($booking) {
                $q->where('category_id', $booking->category_id);
            })
            ->latest()->get();
            

        foreach ($drivers as $driver) {
            if ($driver->ongoingBookings->count() == 0) {
                BookingRequestDriver::create([
                    'booking_id' => $booking->id,
                    'driver_id' => $driver->id,
                    'status' => 0
                ]);
                $fcmToken = $driver->device_token;
                $notificationData = (object)[
                    'body' => __('New Booking Have Arrived'),
                    'title' => __('Booking Created'),
                    'data' => new BookingResource($booking),
                    'image' => 'https://example.com/path/to/image.jpg',
                ];
                $this->sendNotification($notificationData, $fcmToken);
            }
        }
    }






z********************************************************************************************************
public function getFareByLocation(Request $request)
{
    try {
        // Fetch online drivers
        $driversOnlineList = $this->userService->findUserByRole([
            'is_online' => true,
            'is_blocked' => false
        ], 'driver');

        // Extract driver IDs
        $driverIds = $driversOnlineList->pluck('id')->toArray();
        if (empty($driverIds)) {
            return $this->responseJson(false, 200, __('No Online Drivers Available'), []);
        }

        // Fetch vehicles with active categories and fares
        $vehicles = Vehicle::with([
            'category.fares' => function ($query) {
                $query->where('is_active', 1);
            },
            'user:id,latitude,longitude' // Fetching only required user fields
        ])
        ->whereIn('user_id', $driverIds)
        ->where('is_primary', 1)
        ->whereHas('category', function ($query) {
            $query->where('is_active', 1)->whereHas('fares', function ($fareQuery) {
                $fareQuery->where('is_active', 1);
            });
        })
        ->select(['id', 'user_id', 'category_id']) // Fetching only necessary fields
        ->orderByDesc('id')
        ->get();

        if ($vehicles->isEmpty()) {
            return $this->responseJson(false, 200, __('No Vehicles Available'), []);
        }

        // Calculate trip distance and duration
        $distances = calculateDistances($request->pickup, $request->drop);
        $totalDistanceKm = $distances['distance'] ?? 0;
        $totalDurationMin = $distances['duration'] ?? 0;

        // Get current location if provided
        $currentLat = $request->input('lat');
        $currentLng = $request->input('lng');

        // Calculate distance from current location to each vehicle
        if ($currentLat && $currentLng) {
            foreach ($vehicles as $vehicle) {
                if ($vehicle->user) {
                    $vehicle->distance = getFareLocCulateDistance($currentLat, $currentLng, $vehicle->user->latitude, $vehicle->user->longitude);
                }
            }
        }

        // Group vehicles by category
        $groupedVehicles = $vehicles->groupBy('category_id');

        // Find nearest vehicle per category and calculate fare
        $nearestVehicles = $groupedVehicles->map(function ($vehicles) use ($totalDistanceKm, $totalDurationMin, $distances) {
            $nearestVehicle = $vehicles->sortBy('distance')->first(); // Get the nearest vehicle

            if ($nearestVehicle) {
                $fareDetails = $nearestVehicle->category->fares->first();
                if ($fareDetails) {
                    $totalFare = (double)($fareDetails->base_fare ?? 0) +
                                 ((double)($fareDetails->rate_per_km ?? 0) * $totalDistanceKm) +
                                 ((double)($fareDetails->rate_per_minute ?? 0) * $totalDurationMin);

                    $nearestVehicle->total_fare = round($totalFare, 2);
                    $nearestVehicle->distance = $distances;
                }
            }

            return $nearestVehicle;
        })->filter(); // Remove null values

        return $this->responseJson(true, 200, __('Vehicle Found Successfully'), VehicleNewResource::collection($nearestVehicles));

    } catch (\Exception $e) {
        logger()->error("Error: {$e->getMessage()} | File: {$e->getFile()} | Line: {$e->getLine()}");
        return $this->responseJson(false, 500, __('Something Went Wrong'));
    }
}








public function getFareByLocation(Request $request)
 {
            try {
                // Fetch online drivers
                $driversOnlineList = $this->userService->findUserByRole([
                    'is_online' => true,
                    'is_blocked' => false
                ], 'driver');

                // Extract user IDs from online drivers
                $driverIds = $driversOnlineList->pluck('id')->toArray();

                // Fetch vehicles belonging to online drivers with active categories and fares
                $vehicles = Vehicle::with(['category.fares' => function ($query) {
                    $query->where('is_active', 1);
                }])
                ->whereIn('user_id', $driverIds)
                ->where('is_primary', 1)
                ->whereHas('category', function ($query) {
                    $query->where('is_active', 1)->whereHas('fares', function ($fareQuery) {
                        $fareQuery->where('is_active', 1);
                    });
                })
                ->orderBy('id', 'desc')
                ->get();

                if ($vehicles->isEmpty()) {
                    return $this->responseJson(false, 200, __('No Vehicles Available'), []);
                }

                // Calculate distances
                $distances = calculateDistances($request->pickup, $request->drop);
                $totalDistanceKm = $distances['distance']; // in km
                $totalDurationMin = $distances['duration']; // in minutes

                // Get current location if provided
                $currentLat = $request->input('lat');
                $currentLng = $request->input('lng');

                // Calculate distance from current location to each vehicle if coordinates are provided
                if ($currentLat && $currentLng) {
                    $vehicles->each(function ($vehicle) use ($currentLat, $currentLng) {
                        $vehicle->distance = getFareLocCulateDistance($currentLat, $currentLng, $vehicle->user->latitude, $vehicle->user->longitude);
                    });
                }

                // Group vehicles by category
                $groupedVehicles = $vehicles->groupBy('category_id');

                // Find the nearest vehicle per category and calculate fares
                $nearestVehicles = $groupedVehicles->map(function ($vehicles) use ($totalDistanceKm, $totalDurationMin, $distances) {
                    $nearestVehicle = $vehicles->sortBy('distance')->first();

                    if ($nearestVehicle) {
                        $fareDetails = $nearestVehicle->category->fares->first();
                        $fareRate = (double)($fareDetails->rate_per_km ?? 0);
                        $baseFare = (double)($fareDetails->base_fare ?? 0);
                        $timeFare = (double)($fareDetails->rate_per_minute ?? 0);

                        // Calculate total fare
                        $totalFare = $baseFare + ($fareRate * $totalDistanceKm) + ($totalDurationMin * $timeFare);
                        $nearestVehicle->total_fare = round($totalFare, 2);
                        $nearestVehicle->distance = $distances; // Reuse the calculated distances
                    }

                    return $nearestVehicle;
                })->filter(); // Remove any null values

                return $this->responseJson(true, 200, __('Vehicle Found Successfully'), VehicleNewResource::collection($nearestVehicles));

            } catch (\Exception $e) {
                logger()->error($e->getMessage() . ' on ' . $e->getFile() . ' in ' . $e->getLine());
                return $this->responseJson(false, 500, __('Something Went Wrong'));
            }
        }
