***************************************************************************************
***************************************************************************************
***************************************************************************************
***************************************************************************************
***************************************************************************************
**********************************************

/* General Styling */
td.w-30 {
    width: 30%;
    padding: 10px;
    vertical-align: top;
}

/* User Box Styling */
.user_box {
    display: flex;
    align-items: center;
    gap: 10px;
}

.user_box.mt-1 {
    margin-top: 8px;
}

.user_box .text-danger {
    color: #dc3545;
    font-size: 14px;
    margin-right: 5px;
}

.user_img img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
}

/* User Name Styling */
.user_name p {
    font-size: 16px;
    font-weight: bold;
    margin: 0;
    color: #333;
}

/* Employee ID Styling */
.user_box .fw-bold {
    font-weight: bold;
    color: #555;
    font-size: 14px;
}

/* Rating Link Styling */
a {
    display: flex;
    align-items: center;
    margin-top: 5px;
    color: #007bff;
    text-decoration: none;
}

a:hover {
    color: #0056b3;
}

a .fa-star {
    color: #f0ad4e;
    font-size: 14px;
    margin-right: 5px;
}

a .fw-bold {
    font-size: 14px;
    color: #333;
}

/* Total Rating Styling */
span.fw-bold {
    font-weight: bold;
}

*****************************************
<td class=" w-30"><div class="user_box"><span class="text-danger"><i class="fa-solid fa-circle"></i></span><div class="user_img"><img src="http://127.0.0.1:8088/app-assets/images/avatar-img.jpg" class="img-fluid" alt="user-profile"></div><div class="user_name"><p>soumyajit ball</p></div></div><div class="user_box mt-1 ml-2"><span class="fw-bold">EMP-24510598 </span> </div><a href="http://127.0.0.1:8088/admin/user/review-list/e8a2df93-cdb4-42c5-9ce3-a912ccde0023"><i class="fa fa-star" aria-hidden="true"><span class="fw-bold">Total Rating:- </span>0</i></a></td>
***************************************************************************************
$(document).ready(function() {
    const brandSelect = $('#brand_id'); // Assuming you have a brand select element
    const categorySelect = $('#category_id'); // Assuming you have a category select element

    brandSelect.on('change', function() {
        const brandId = $(this).val();
        // Clear previous options
        categorySelect.empty();

        // Fetch categories based on selected brand
        $.ajax({
            url: baseUrl + 'ajax/getCategoryByBrands/' + brandId,
            method: 'GET',
            dataType: 'json',
            success: function(data) {
                // Filter parent categories first
                const parentCategories = data.filter(function(category) {
                    return category.parent_id === null;
                });

                // Iterate over each parent category and create optgroups
                parentCategories.forEach(function(parentCategory) {
                    const optgroup = $('<optgroup></optgroup>')
                        .attr('label', parentCategory.name);

                    // Optionally, add parent category as an option (can be removed if not needed)
                    optgroup.append($('<option></option>')
                        .val(parentCategory.id)
                        .text(parentCategory.name));

                    // Add child categories to the respective parent optgroup
                    data.forEach(function(childCategory) {
                        if (childCategory.parent_id === parentCategory.id) {
                            optgroup.append($('<option></option>')
                                .val(childCategory.id)
                                .text(childCategory.name));
                        }
                    });

                    // Append the optgroup to the select dropdown
                    categorySelect.append(optgroup);
                });
            },
            error: function(error) {
                console.error('Error fetching categories:', error);
            }
        });
    });
});

**********************************************
$(document).ready(function() {
    const brandSelect = $('#brand_id'); // Assuming you have a brand select element
    const categorySelect = $('#category_id'); // Assuming you have a category select element

    brandSelect.on('change', function() {
        const brandId = $(this).val();
        // Clear previous options
        categorySelect.empty();

        // Fetch categories based on selected brand
        $.ajax({
            url: baseUrl + 'ajax/getCategoryByBrands/' + brandId,
            method: 'GET',
            dataType: 'json',
            success: function(data) {
                // Create a map to store children under each parent
                const categoryMap = {};

                // Separate parent and child categories
                data.forEach(function(category) {
                    if (category.parent_id === null) {
                        // Initialize parent category in the map
                        categoryMap[category.id] = {
                            name: category.name,
                            children: []
                        };
                    } else if (category.parent_id in categoryMap) {
                        // Add child to the respective parent
                        categoryMap[category.parent_id].children.push(category);
                    }
                });

                // Populate the select with optgroups and child options
                Object.keys(categoryMap).forEach(function(parentId) {
                    const parent = categoryMap[parentId];

                    // Create optgroup for the parent category
                    const optgroup = $('<optgroup></optgroup>').attr('label', parent.name);

                    // Add each child category as an option within the optgroup
                    parent.children.forEach(function(childCategory) {
                        const option = $('<option></option>')
                            .val(childCategory.id)
                            .text(childCategory.name);
                        optgroup.append(option);
                    });

                    categorySelect.append(optgroup);
                });
            },
            error: function(error) {
                console.error('Error fetching categories:', error);
            }
        });
    });
});


*****************************************
        {
            "id": 17,
            "uuid": "f9885f46-d203-4ea9-9e2f-6cfe2849f334",
            "name": "Four Wheeler",
            "slug": "four_wheeler",
            "alias": null,
            "parent_id": null,
            "type": null,
            "description": null,
            "is_active": 1,
            "created_at": null,
            "updated_at": null,
            "deleted_at": null,
            "children": [{
                    "id": 19,
                    "uuid": "b92c0a3e-586d-4dc1-8426-6fcf90aadcdb",
                    "name": "Mini",
                    "slug": "mini",
                    "alias": null,
                    "parent_id": 17,
                    "type": null,
                    "description": null,
                    "is_active": 1,
                    "created_at": "2024-10-21T15:53:57.000000Z",
                    "updated_at": "2024-10-21T15:53:57.000000Z",
                    "deleted_at": null
                },
                {
                    "id": 21,
                    "uuid": "b38c588a-442b-4e50-91c7-e3fd1a16ac59",
                    "name": "Sedan",
                    "slug": "sedan",
                    "alias": null,
                    "parent_id": 17,
                    "type": "17",
                    "description": null,
                    "is_active": 1,
                    "created_at": "2024-10-21T19:07:21.000000Z",
                    "updated_at": "2024-10-21T20:22:21.000000Z",
                    "deleted_at": null
                }
            ]
        }




        $(document).ready(function() {
                    const brandSelect = $('#brand_id'); // Assuming you have a brand select element
                    const categorySelect = $('#category_id'); // Assuming you have a category select element

                    // categorySelect.on('change', function() {
                    // const categoryId = $(this).val();

                    brandSelect.on('change', function() {
                            const brandId = $(this).val();
                            // Clear previous options
                            categorySelect.empty();
                            // brandSelect.empty();

                            // Fetch brands based on selected category
                            $.ajax({
                                    url: baseUrl + 'ajax/getCategoryByBrands/' + brandId,
                                    // url: baseUrl + 'ajax/getBrandsByCategory/' + categoryId,
                                    method: 'GET',
                                    dataType: 'json',
                                    success: function(data) {
                                        data.forEach(function(category) {
                                                    console.log(category);
                                                    if (category.parent_id == null) {
                                                        const option = $(' <
                                                            option > < /option>').val(category.id)
                                                            .text(category.name);
                                                        }
                                                        categorySelect.append(option);
                                                    });
                                                // data.forEach(function(brand) {
                                                // const option = $('<option></option>').val(brand.id).text(
                                                // brand.name);
                                                // brandSelect.append(option);
                                                // });
                                            },
                                            error: function(error) {
                                                console.error('Error fetching brands:', error);
                                            }
                                    });
                            });
                    });
**********************************************

<?php

use Google_Client;

class FirestoreService {

    // Function to get access token
    public function getAccessToken()
    {
        // Path to your Firebase credentials JSON file
        $credentialsFilePath = config_path('firebase-adminsdk.json');
        
        // Create a new Google client
        $client = new Google_Client();
        
        // Load the credentials from the Firebase JSON file
        $client->setAuthConfig($credentialsFilePath);
        
        // Add Firestore and Firebase Messaging scopes
        $client->addScope('https://www.googleapis.com/auth/datastore'); // Firestore scope
        $client->addScope('https://www.googleapis.com/auth/firebase.messaging'); // FCM scope
        
        // Fetch the access token
        $token = $client->fetchAccessTokenWithAssertion();
        
        // Return the access token
        return $token['access_token'];
    }

    // Function to get data from Firestore
    public function getData()
    {
        // Firestore URL for the specific collection or document
        $url = 'https://firestore.googleapis.com/v1/projects/orbitcab-e93d8/databases/(default)/documents/liveTracking';
        
        // Get the access token by calling the getAccessToken() method
        $token = $this->getAccessToken(); 

        // Initialize a cURL session
        $ch = curl_init();
        
        // Set the URL for the cURL request
        curl_setopt($ch, CURLOPT_URL, $url);
        
        // Return the transfer as a string instead of outputting it directly
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        
        // Set the HTTP headers, including the access token for authorization
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $token,
        ]);
        
        // Execute the cURL request and get the response
        $response = curl_exec($ch);
        
        // Close the cURL session
        curl_close($ch);

        // Decode the JSON response into an associative array
        $data = json_decode($response, true);

        // Return the data
        return $data;
    }
}

*****************************************
function getAccessToken()
    {
        $credentialsFilePath = config_path('firebase-adminsdk.json');
        $client = new \Google_Client();
        $client->setAuthConfig($credentialsFilePath);
        $client->addScope('https://www.googleapis.com/auth/firebase.messaging');
        $token = $client->fetchAccessTokenWithAssertion();
        $accessToken = $token['access_token'];
        return $accessToken;
    }

    public function getData()
    {
        $url = 'https://firestore.googleapis.com/v1/projects/orbitcab-e93d8/databases/(default)/documents/liveTracking';
        $token = $this->getAccessToken(); // Obtain this from your Firebase Authentication

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $token,
        ]);
        $response = curl_exec($ch);
        dd($response);
        curl_close($ch);

        $data = json_decode($response, true);

        return $data;
    }

this code  
{

  "error": {

    "code": 403,

    "message": "Request had insufficient authentication scopes.",

    "status": "PERMISSION_DENIED",

    "details": [

      {

        "@type": "type.googleapis.com/google.rpc.ErrorInfo",

        "reason": "ACCESS_TOKEN_SCOPE_INSUFFICIENT",

        "domain": "googleapis.com",

        "metadata": {

          "method": "google.firestore.v1.Firestore.GetOrListDocuments",

          "service": "firestore.googleapis.com"

        }

      }

    ]

  }

}
how to solved this issue
***************************************************************************************
