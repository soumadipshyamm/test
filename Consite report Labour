

   public function index(Request $request)
    {
        $authCompany = Auth::guard('company-api')->user()->company_id;

        $fetchDpr = Dpr::where(['date' => Carbon::now()->format('Y-m-d'), 'projects_id' => $request->project_id, 'sub_projects_id' => $request->subproject_id, 'company_id' => $authCompany])->orderBy('id', 'desc')->first();


        $result = '';
        if ($fetchDpr) {
            // dd($fetchDpr);
            $dprId = $fetchDpr->id;
            $authCompany = Auth::guard('company-api')->user()->company_id;
            $activitesData = Activities::with([
                'units',
                'project',
                'subproject',
                'parent',
                'children',
                'activitiesHistory'
                 => function ($q) use ($dprId) {
                    $q->where('dpr_id', $dprId);
                }
            ])
            // ->whereHas('activitiesHistory', function ($q) use ($dprId) {
            //     $q->where('dpr_id', $dprId);
            // })
                ->where('company_id', $authCompany)
                ->get();

                $result = DprActivitesResources::collection($activitesData);
                // dd($result);

        } else {

            $datas = Activities::with('units', 'project', 'subproject', 'parent', 'children', 'activitiesHistory')->orderBy('id', 'asc')->where('company_id', $authCompany)->where(['project_id' => $request->project_id, 'subproject_id' => $request->subproject_id])->get();
            $result = ActiviteiesResources::collection($datas);
        }






namespace App\Imports;

use App\Models\Labour;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\WithHeadingRow;

class MyDataImport implements ToModel, WithHeadingRow
{
    /**
     * Import model from the given row.
     *
     * @param  array  $row
     * @return \Illuminate\Database\Eloquent\Model|null
     */
    public function model(array $row)
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        // Get the unit ID from the unit name, or create a new unit if it doesn't exist
        $unitId = nametoid($row['unit'], 'units');
        if (!$unitId) {
            // If the unit doesn't exist, create a new one
            $unitId = createunit($row['unit'], $companyId);
        }

        // Find existing labour by name, category, and unit (unique constraint)
        $existingLabour = Labour::where('name', $row['name'])
            ->where('category', $row['category'])
            ->where('unit_id', $unitId)
            ->where('company_id', $companyId)
            ->first();

        // Log variables for debugging
        Log::info("Processing row for labour: " . $row['name'], $row);

        // If a labour exists, update it; otherwise, create a new record
        if ($existingLabour) {
            // Log the update
            Log::info("Updating existing labour: " . $existingLabour->name . " (ID: " . $existingLabour->id . ")");

            // Update existing labour
            $existingLabour->category = $row['category'];
            $existingLabour->unit_id = $unitId;
            $existingLabour->save();

            // Log successful update
            Log::info("Labour updated successfully: " . $existingLabour->name);

            return $existingLabour; // Return the updated record
        } else {
            // Log the creation of a new record
            Log::info("Creating new labour: " . $row['name']);

            // Create new labour record
            return new Labour([
                'uuid' => Str::uuid(),  // Generate a new UUID
                'name' => $row['name'],
                'category' => $row['category'],
                'unit_id' => $unitId,
                'company_id' => $companyId,
            ]);
        }
    }

    /**
     * After import completes, log the results.
     */
    public function afterImport()
    {
        // Optionally, log the total number of imported records
        Log::info('Import completed at: ' . now());
    }
}









class MyDataImport implements ToModel, WithHeadingRow
{
    /**
     * Import model from the given row.
     *
     * @param  array  $row
     * @return \Illuminate\Database\Eloquent\Model|null
     */
    public function model(array $row)
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        // dd($row);
        // Get the unit ID from the unit name, or create a new unit if it doesn't exist
        $unitId = nametoid($row['unit'], 'units');
        if (!$unitId) {
            // If the unit doesn't exist, create a new one
            $unitId = createunit($row['unit'], $companyId);
        }
        // dd($unitId);
        // Find existing labour by name, category, and unit (unique constraint)
        $existingLabour = Labour::where('name', $row['name'])
            ->where('category', $row['category'])
            ->where('unit_id', $unitId)
            ->where('company_id', $companyId)
            ->first();
            // dd($existingLabour);
        // If a labour exists, update it; otherwise, create a new record
        if ($existingLabour) {
            // dd( $existingLabour);
            // Update existing labour
            // $existingLabour->uuid = $existingLabour->uuid ; // Assign uuid if not exists
            $existingLabour->category = $row['category'];
            $existingLabour->unit_id = $unitId;
            $existingLabour->save();
            // dd( $existingLabour);
            return $existingLabour; // Return the updated record
        } else {
            // dd($row);

            // Create new labour record
            return new Labour([
                // 'uuid' => Str::uuid(),  // Assign a new UUID
                'name' => $row['name'],
                'category' => $row['category'],
                'unit_id' => $unitId,
                'company_id' => $companyId,
            ]);
        }
    }
}



use Maatwebsite\Excel\Facades\Excel;
use App\Imports\MyDataImport;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Redirect;

class LabourController extends Controller
{
    /**
     * Import data from the uploaded file.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function import(Request $request)
    {
        // Validate the incoming request to ensure a file is uploaded and is of the correct type
        $request->validate([
            'file' => 'required|mimes:xlsx,csv,xls|max:10240', // 10MB max file size
        ]);

        // Check if a file is uploaded
        if ($request->hasFile('file')) {
            try {
                // Get the uploaded file from the request
                $file = $request->file('file');
                
                // Import the file data using the MyDataImport class
                Excel::import(new MyDataImport, $file);

                // Return success message upon successful import
                return redirect()->route('company.labour.list')->with('success', 'Data Imported Successfully!');
            } catch (\Exception $e) {
                // In case of any error during the import, return with an error message
                return redirect()->route('company.labour.list')->with('error', 'Error during import: ' . $e->getMessage());
            }
        }

        // If no file is selected or there's an issue with the file
        return back()->with('error', 'No file selected for import or invalid file type.');
    }
}







$file = $request->file('file');
            Excel::import(new MyDataImport, $file);
            return redirect()
                ->route('company.labour.list')
                ->with('success', 'Import Data Uploaded Successfully');




namespace App\Imports;

use App\Models\Labour;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\WithHeadingRow;

class MyDataImport implements ToModel, WithHeadingRow
{
    /**
     * Import model from the given row.
     *
     * @param  array  $row
     * @return \Illuminate\Database\Eloquent\Model|null
     */
    public function model(array $row)
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        // Get the unit ID from the unit name, or create a new unit if it doesn't exist
        $unitId = nametoid($row['unit'], 'units');
        if (!$unitId) {
            // If the unit doesn't exist, create a new one
            $unitId = createunit($row['unit'], $companyId);
        }

        // Find existing labour by name, category, and unit (unique constraint)
        $existingLabour = Labour::where('name', $row['name'])
            ->where('category', $row['category'])
            ->where('unit_id', $unitId)
            ->where('company_id', $companyId)
            ->first();

        // If a labour exists, update it; otherwise, create a new record
        if ($existingLabour) {
            // Update existing labour
            $existingLabour->uuid = $existingLabour->uuid ?: (string) \Str::uuid(); // Assign uuid if not exists
            $existingLabour->category = $row['category'];
            $existingLabour->unit_id = $unitId;
            $existingLabour->save();
            
            return $existingLabour; // Return the updated record
        } else {
            // Create new labour record
            return new Labour([
                'uuid' => (string) \Str::uuid(),  // Assign a new UUID
                'name' => $row['name'],
                'category' => $row['category'],
                'unit_id' => $unitId,
                'company_id' => $companyId,
            ]);
        }
    }
}



class MyDataImport implements ToModel, WithHeadingRow
{
    public function model(array $row)
    {
        // dd($row);
        $authConpany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authConpany);

        $data = new Labour([
            'name' => $row['name'],
            'category' => $row['category'],
            'unit_id' => nametoid($row['unit'], 'units') == false ? createunit($row['unit'], $companyId) : nametoid($row['unit'], 'units'),
            'company_id' => $companyId,
        ]);
        return $data;






namespace App\Exports;

use App\Models\Labour;
use App\Http\Resources\LabourExportResources;
use App\Models\Unit;  // Assuming Unit is the model for unit data
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;

class MyDataExport implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    protected $units;          // Dropdown options for units
    protected $rowCount;       // Number of rows to apply formatting rules

    /**
     * Constructor: Fetch necessary data and set row count.
     */
    public function __construct()
    {
        $this->units = $this->getUnitOptions();  // Fetch unit options dynamically
        $this->rowCount = 100;                   // Maximum rows to format
    }

    /**
     * Collection of data to export.
     *
     * @return \Illuminate\Support\Collection
     */
    public function collection()
    {
        // Fetch authenticated company ID
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        // Fetch labours for the company with the associated unit
        $labours = Labour::with('unit')  // Eager load the 'unit' relationship
            ->where('company_id', $companyId)
            ->limit($this->rowCount)
            ->get();

        // Transform the data using the LabourExportResources
        return LabourExportResources::collection($labours)->map(function ($labour, $index) {
            return [
                '#'        => $index + 1,
                'Uuid'     => $labour->uuid,
                'Code'     => $labour->code,  // Assuming 'code' exists in the resource
                'Name'     => $labour->name,
                'Category' => '',              // Placeholder for dropdown
                'Unit'     => $labour->unit ? $labour->unit->name : '',  // Get the unit name using the relationship
            ];
        });
    }

    /**
     * Headings for the Excel export.
     *
     * @return array
     */
    public function headings(): array
    {
        return [
            '#',
            'Uuid',
            'Code',
            'Name',
            'Category',
            'Unit',
        ];
    }

    /**
     * Register sheet events for advanced formatting (dropdowns, hiding columns, etc).
     *
     * @return array
     */
    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();

                // Hide Column B (Uuid) for cleaner display
                $sheet->getColumnDimension('B')->setVisible(false);

                // Apply dropdown for Category (Column D)
                $this->applyDropdownValidation($event, 'D', ['unskilled', 'semiskilled', 'skilled']);

                // Apply dynamic dropdown for Unit (Column E)
                $this->applyDropdownValidation($event, 'E', $this->units);

                // Auto-size columns from 1 to 13 (or desired range)
                $this->autoSizeColumns($event, 13);  // Assumed 13 columns are present
            },
        ];
    }

    /**
     * Apply dropdown validation to a column (Category, Unit, etc.).
     *
     * @param  \Maatwebsite\Excel\Events\AfterSheet $event
     * @param  string $column
     * @param  array $options
     * @return void
     */
    private function applyDropdownValidation($event, $column, $options)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $validation = $event->sheet->getCell("{$column}{$row}")->getDataValidation();
            $validation->setType(DataValidation::TYPE_LIST);
            $validation->setErrorStyle(DataValidation::STYLE_STOP);
            $validation->setAllowBlank(false);
            $validation->setShowDropDown(true);
            $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
        }
    }

    /**
     * Auto-size columns dynamically.
     *
     * @param  \Maatwebsite\Excel\Events\AfterSheet $event
     * @param  int $columnCount
     * @return void
     */
    private function autoSizeColumns($event, $columnCount)
    {
        for ($i = 1; $i <= $columnCount; $i++) {
            $column = Coordinate::stringFromColumnIndex($i);
            $event->sheet->getColumnDimension($column)->setAutoSize(true);
        }
    }

    /**
     * Fetch dynamic unit options (can be customized as per your needs).
     *
     * @return array
     */
    private function getUnitOptions()
    {
        // Fetch distinct units (assuming 'unit' exists as a field)
        return Unit::pluck('name')->toArray();  // Adjust the column name as needed
    }
}





class MyDataExport implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{


    protected $units;          // Dropdown options for units
    protected $rowCount;       // Number of rows to apply formatting rules

    public function __construct()
    {
        $this->units = getUnit();              // Fetch unit options dynamically
        $this->rowCount = 100;                 // Set maximum rows for the sheet
    }

    public function collection()
    {

        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        // Fetch the labours and pass them through LabourCollection
        $labours = Labour::with('units')
            ->where('company_id', $companyId)
            ->limit(100)
            ->get();

        // Apply the LabourCollection transformation
        $collection =  LabourExportResources::collection($labours);

        // Map the transformed collection into the structure for export
        // return $collection->map(function ($labour, $index) {
        //     return [
        //         '#'       => $index + 1,
        //         'Uuid'    => $labour->uuid,
        //         'Name'    => $labour->name,
        //         'Category' => '', // Placeholder for dropdown
        //         'Unit'    => '', // Placeholder for dropdown
        //     ];
        // });
    }

    public function headings(): array
    {
        return [
            '#',
            'Uuid',
            'Code',
            'Name',
            'Category',
            'Unit',
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();

                // Hide Column B (UUID)
                $sheet->getColumnDimension('B')->setVisible(false);

                $this->applyDropdownValidation($event, 'D', ['unskilled', 'semiskilled', 'skilled']);
                $this->applyDropdownValidation($event, 'E', $this->units);

                $this->autoSizeColumns($event, 13); // Total 13 columns

            },
        ];
    }

    /**
     * Apply a dropdown to a given range of cells.
     */
    private function applyDropdownValidation($event, $column, $options)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $validation = $event->sheet->getCell("{$column}{$row}")->getDataValidation();
            $validation->setType(DataValidation::TYPE_LIST);
            $validation->setErrorStyle(DataValidation::STYLE_STOP);
            $validation->setAllowBlank(false);
            $validation->setShowDropDown(true);
            $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
        }
    }

    private function autoSizeColumns($event, $columnCount)
    {
        for ($i = 1; $i <= $columnCount; $i++) {
            $column = Coordinate::stringFromColumnIndex($i);
            $event->sheet->getColumnDimension($column)->setAutoSize(true);
        }
    }
}








namespace App\Exports;

use App\Models\Labour;
use App\Http\Resources\LabourCollection;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use Maatwebsite\Excel\Events\AfterSheet;

class MyDataExport implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    public function collection()
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        // Fetch the labours and pass them through LabourCollection
        $labours = Labour::with('units')
            ->where('company_id', $companyId)
            ->limit(100)
            ->get();

        // Apply the LabourCollection transformation
        $collection = new LabourCollection($labours);

        // Map the transformed collection into the structure for export
        return $collection->map(function ($labour, $index) {
            return [
                '#'       => $index + 1,
                'Uuid'    => $labour->uuid,
                'Name'    => $labour->name,
                'Category' => '', // Placeholder for dropdown
                'Unit'    => '', // Placeholder for dropdown
            ];
        });
    }

    public function headings(): array
    {
        return [
            '#',
            'Uuid',
            'Name',
            'Category',
            'Unit',
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();

                // Hide Column B (UUID)
                $sheet->getColumnDimension('B')->setVisible(false);

                // Set dropdown for Column D (Category)
                $categories = ['unskilled', 'semiskilled', 'skilled'];
                $categoryList = '"' . implode(',', $categories) . '"';

                $this->applyDropdown($sheet, 'D2:D101', $categoryList);

                // Set dropdown for Column E (Unit)
                $units = Labour::select('unit')->distinct()->pluck('unit')->toArray();
                $unitList = '"' . implode(',', $units) . '"';

                $this->applyDropdown($sheet, 'E2:E101', $unitList);

                // Freeze the header row
                $sheet->freezePane('A2');

                // Set bold font for the header
                $sheet->getStyle('A1:E1')->getFont()->setBold(true);
            },
        ];
    }

    /**
     * Apply a dropdown to a given range of cells.
     */
    private function applyDropdown($sheet, $cellRange, $options)
    {
        $validation = $sheet->getDataValidation($cellRange);
        $validation->setType(DataValidation::TYPE_LIST);
        $validation->setErrorStyle(DataValidation::STYLE_STOP);
        $validation->setAllowBlank(false);
        $validation->setShowInputMessage(true);
        $validation->setShowErrorMessage(true);
        $validation->setFormula1($options);
    }
}












class MyDataExport implements FromCollection, WithHeadings, ShouldAutoSize
{
    public function collection()
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        $labours = Labour::with('units')->where('company_id',$companyId)->get();
        $collection = LaboursResource::collection($labours);
        return collect($collection);
    }

    public function headings(): array
    {
        return [
            '#',
            'Uuid',
            'Name',
            'Category',
            'Unit',
        ];
    }


    public function styles(Worksheet $sheet)
    {
        return [
            1 => ['font' => ['bold' => true], 'freeze' => true],
        ];
    }

}
