	const userDetails = await getDetailsByEmail(req.user.email);
		if (!userDetails) {
			return res.status(StatusCodes.UNAUTHORIZED).json({ message: 'User not authenticated.' });
		}
		const participants = await ParticipantModel.find({
			participant_object_id: userDetails._id,
			status: { $in: ['PARTICIPATING', 'PARTICIPATED'] }
		}).lean();

		// Group participants by competition_object_id
		const groupedParticipants = participants.reduce((acc: any, participant: any) => {
			const competitionId = participant.competition_object_id.toString();
			if (!acc[competitionId]) {
				acc[competitionId] = [];
			}
			acc[competitionId].push(participant);
			return acc;
		}, {});

		// Convert the grouped object to an array format
		const result = Object.keys(groupedParticipants).map(competitionId => ({
			competition_id: competitionId,
			participants: groupedParticipants[competitionId]
		}));
		// Populate competition details efficiently using Promise.all
		await Promise.all(result.map(async (competition: any) => {
			const competitionDetails = await CompetitionModel.findById(competition.competition_id);

			competition = {
				...competition,
				competition_type: competitionDetails?.competition_type?.toString() || '',
				competition_name: competitionDetails?.name || ''
			};
		}));

		return res.status(StatusCodes.OK).json({
			message: 'Participant round status fetched successfully',
			result: result,
		});
