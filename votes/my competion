

export const competitionRoundDetails = async (req: Request, res: Response): Promise<any> => {
  try {
    const userDetails = await getDetailsByEmail(req.user.email);
    if (!userDetails) {
      return res
        .status(StatusCodes.UNAUTHORIZED)
        .json({ message: "User not authenticated." });
    }

    const now = new Date();

    const participants = await ParticipantModel.aggregate([
      {
        $match: {
          participant_object_id: userDetails._id,
          status: { $in: ["PARTICIPATING", "PARTICIPATED"] }
        }
      },
      {
        $lookup: {
          from: "competitions",
          localField: "competition_object_id",
          foreignField: "_id",
          as: "competition"
        }
      },
      { $unwind: "$competition" },
      {
        $lookup: {
          from: "rounds",
          localField: "round_object_id",
          foreignField: "_id",
          as: "round"
        }
      },
      { $unwind: "$round" },

      // Add computed round status based on start/end datetime
      {
        $addFields: {
          "round.round_status": {
            $switch: {
              branches: [
                {
                  case: { $gt: ["$round.start_date", now] },
                  then: "UPCOMING"
                },
                {
                  case: {
                    $and: [
                      { $lte: ["$round.start_date", now] },
                      { $gte: ["$round.end_date", now] }
                    ]
                  },
                  then: "ONGOING"
                },
                {
                  case: { $lt: ["$round.end_date", now] },
                  then: "COMPLETED"
                }
              ],
              default: "UNKNOWN"
            }
          }
        }
      },

      // Group by round
      {
        $group: {
          _id: "$round._id",
          round_details: { $first: "$round" },
          competition_details: { $first: "$competition" },
          participants: {
            $push: {
              _id: "$_id",
              participant_name: "$participant_name",
              participant_payment_status: "$participant_payment_status",
              participant_payment_type: "$participant_payment_type",
              participant_payment_intant_id: "$participant_payment_intant_id",
              transaction_object_id: "$transaction_object_id"
            }
          }
        }
      },

      {
        $project: {
          _id: 0,
          round_object_id: "$_id",
          round_details: {
            _id: "$round_details._id",
            round_no: "$round_details.round_no",
            start_date: "$round_details.start_date",
            end_date: "$round_details.end_date",
            round_status: "$round_details.round_status"
          },
          competition_details: {
            _id: "$competition_details._id",
            name: "$competition_details.name",
            competition_type: "$competition_details.competition_type",
            challenge_start_date: "$competition_details.challenge_start_date",
            challenge_end_date: "$competition_details.challenge_end_date"
          },
          participants: 1
        }
      }
    ]);

    return res.status(StatusCodes.OK).json({
      message: "Competition round details fetched successfully",
      result: participants
    });
  } catch (error) {
    console.error("Error fetching competition round details:", error);
    return res
      .status(StatusCodes.INTERNAL_SERVER_ERROR)
      .json({ message: "Server error", error });
  }
};









const userDetails = await getDetailsByEmail(req.user.email);
		if (!userDetails) {
			return res.status(StatusCodes.UNAUTHORIZED).json({ message: 'User not authenticated.' });
		}
		const participants = await ParticipantModel.find({
			participant_object_id: userDetails._id,
			status: { $in: ['PARTICIPATING', 'PARTICIPATED'] }
		}).lean();

		// Group participants by competition_object_id
		const groupedParticipants = participants.reduce((acc: any, participant: any) => {
			const competitionId = participant.competition_object_id.toString();
			if (!acc[competitionId]) {
				acc[competitionId] = [];
			}
			acc[competitionId].push(participant);
			return acc;
		}, {});

		// Convert the grouped object to an array format
		const result = Object.keys(groupedParticipants).map(competitionId => ({
			competition_id: competitionId,
			participants: groupedParticipants[competitionId]
		}));
		// Populate competition details efficiently using Promise.all
		await Promise.all(result.map(async (competition: any) => {
			const competitionDetails = await CompetitionModel.findById(competition.competition_id);

			competition = {
				...competition,
				competition_type: competitionDetails?.competition_type?.toString() || '',
				competition_name: competitionDetails?.name || ''
			};
		}));

		return res.status(StatusCodes.OK).json({
			message: 'Participant round status fetched successfully',
			result: result,
		});



"result": [
        {
            "_id": "68a5b35db430caaf17e90b0e",
            "competition_object_id": "689c2b975367f0ed84307c22",
            "participant_object_id": "68765419c6ff9e5cb7072a94",
            "round_object_id": "689c2b975367f0ed84307c24",
            "competition_name": "Test Competition",
            "round_no": 1,
            "participant_name": "Ben Lashley",
            "participant_payment_type": null,
            "participant_payment_status": "PENDING",
            "participant_payment_intant_id": "pi_3RyCIsBuHqQNZg722C9MJQAC",
            "transaction_object_id": "68a5d116a8c4f8d0b0430134",
           
        },
        {
            "_id": "68a5d162a8c4f8d0b0430153",
            "competition_object_id": "689c2b975367f0ed84307c22",
            "participant_object_id": "68765419c6ff9e5cb7072a94",
            "round_object_id": "689c2b975367f0ed84307c25",
            "competition_name": "Test Competition",
            "round_no": 1,
            "participant_name": "Ben Lashley",
            "participant_payment_type": null,
            "participant_payment_status": "PENDING",
            "participant_payment_intant_id": "pi_3RyCK5BuHqQNZg722fm4X0VJ",
            "transaction_object_id": "68a5d162a8c4f8d0b043014f",
           
        },
        {
            "_id": "68b001c5c5716fb3826324e1",
            "competition_object_id": "68adbb4c9f11f65a957a635a",
            "participant_object_id": "68765419c6ff9e5cb7072a94",
            "round_object_id": "68adbb4c9f11f65a957a635c",
            "competition_name": "Coding Contests",
            "round_no": 1,
            "participant_name": "Ben Lashley",
            "participant_payment_type": null,
            "participant_payment_status": "SUCCESS",
            "participant_payment_intant_id": "pi_3S102CBuHqQNZg720mHx0n06",
            "transaction_object_id": "68b001c5c5716fb3826324dd",
           
        }
    ]
