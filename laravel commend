php artisan make:command BackupAndMigrate
php artisan make:command DatabaseBackup
composer require spatie/laravel-backup

******************************************************************
\app\Console\Commands\BackupAndMigrate.php

class BackupAndMigrate extends Command
{
    protected $signature = 'migrate:fresh
                            {--path= : The file path where the backup will be saved}
                            {--log= : Log file path for the backup process}';

    // Command description
    protected $description = 'Backup the database to a file and log the process';

    public function __construct()
    {
        parent::__construct();
    }
    public function handle()
    {
        $dbName = env('DB_DATABASE');
        $filePath = $this->option('path') ?? storage_path('backups/' . $dbName . '_' . date('Y-m-d_H-i-s') . '.sql');

        // Ensure backup directory exists
        File::ensureDirectoryExists(dirname($filePath));

        // Use Laravel's database export
        DB::unprepared('SET foreign_key_checks = 0');
        $tables = DB::select('SHOW TABLES');
        $sqlStatements = [];

        foreach ($tables as $table) {
            $tableName = get_object_vars($table)['Tables_in_' . $dbName];
            $createTable = DB::select("SHOW CREATE TABLE `{$tableName}`")[0]->{'Create Table'};
            $tableData = DB::table($tableName)->get();

            $sqlStatements[] = "DROP TABLE IF EXISTS `{$tableName}`;";
            $sqlStatements[] = $createTable . ";";

            foreach ($tableData as $row) {
                $insertValues = [];
                foreach ($row as $value) {
                    $insertValues[] = is_null($value) ? 'NULL' : "'" . addslashes($value) . "'";
                }
                $sqlStatements[] = "INSERT INTO `{$tableName}` VALUES (" . implode(',', $insertValues) . ");";
            }
        }

        DB::unprepared('SET foreign_key_checks = 1');

        // Write to file
        file_put_contents($filePath, implode("\n", $sqlStatements));
        // $this->call('migrate:fresh');
        $this->info("Backup created at: {$filePath}");
        $this->info('Migrations Fresh executed successfully.');
    }
}


******************************************************************


\app\Console\Commands\DatabaseBackup.php

class DatabaseBackup extends Command
{
// Command signature
protected $signature = 'db:backup
{--path= : The file path where the backup will be saved}
{--log= : Log file path for the backup process}';
// protected $signature = 'migrate:fresh';
// Command description
protected $description = 'Backup the database to a file and log the process';

public function __construct()
{
parent::__construct();
}
public function handle()
{
$dbName = env('DB_DATABASE');
$filePath = $this->option('path') ?? storage_path('backups/' . $dbName . '_' . date('Y-m-d_H-i-s') . '.sql');

// Ensure backup directory exists
File::ensureDirectoryExists(dirname($filePath));

// Use Laravel's database export
DB::unprepared('SET foreign_key_checks = 0');
$tables = DB::select('SHOW TABLES');
$sqlStatements = [];

foreach ($tables as $table) {
$tableName = get_object_vars($table)['Tables_in_' . $dbName];
$createTable = DB::select("SHOW CREATE TABLE `{$tableName}`")[0]->{'Create Table'};
$tableData = DB::table($tableName)->get();

$sqlStatements[] = "DROP TABLE IF EXISTS `{$tableName}`;";
$sqlStatements[] = $createTable . ";";

foreach ($tableData as $row) {
$insertValues = [];
foreach ($row as $value) {
$insertValues[] = is_null($value) ? 'NULL' : "'" . addslashes($value) . "'";
}
$sqlStatements[] = "INSERT INTO `{$tableName}` VALUES (" . implode(',', $insertValues) . ");";
}
}

DB::unprepared('SET foreign_key_checks = 1');

// Write to file
file_put_contents($filePath, implode("\n", $sqlStatements));
$this->info("Backup created at: {$filePath}");
}
}

******************************************************************

\app\Console\Kernel.php

protected $commands = [\App\Console\Commands\BackupAndMigrate::class,
\App\Console\Commands\DatabaseBackup::class];

******************************************************************

run command
php artisan db:backup --path=storage/backups/my_backup.sql --log=storage/logs/backup.log
php artisan migrate:fresh

******************************************************************
******************************************************************


<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;

class FreshWithBackup extends Command
{
    // Command signature
    protected $signature = 'migrate:fresh-with-backup 
                            {--path= : The file path for the backup} 
                            {--repeat : Re-run migrate:fresh after the first run}';

    // Command description
    protected $description = 'Back up the database, run migrate:fresh, and optionally re-run migrate:fresh';

    public function __construct()
    {
        parent::__construct();
    }

    public function handle()
    {
        $this->info('Starting the database backup...');

        // Get database configuration
        $dbHost = env('DB_HOST');
        $dbPort = env('DB_PORT', 3306);
        $dbName = env('DB_DATABASE');
        $dbUser = env('DB_USERNAME');
        $dbPass = env('DB_PASSWORD');

        // Determine the backup file path
        $filePath = $this->option('path') ?? storage_path('backups/' . $dbName . '_' . date('Y-m-d_H-i-s') . '.sql');

        // Ensure the backup directory exists
        $backupDirectory = dirname($filePath);
        if (!is_dir($backupDirectory)) {
            mkdir($backupDirectory, 0755, true);
        }

        // Construct the mysqldump command
        $dumpCommand = sprintf(
            'mysqldump --host=%s --port=%d --user=%s --password=%s %s > %s',
            escapeshellarg($dbHost),
            escapeshellarg($dbPort),
            escapeshellarg($dbUser),
            escapeshellarg($dbPass),
            escapeshellarg($dbName),
            escapeshellarg($filePath)
        );

        // Execute the command
        $output = null;
        $resultCode = null;
        exec($dumpCommand, $output, $resultCode);

        // Check if the backup was successful
        if ($resultCode === 0) {
            $this->info("Database backup successful! File saved to: {$filePath}");
            Log::info("Database backup created at: {$filePath}");

            // Proceed with migrate:fresh
            $this->runMigrateFresh();

            // Check if repeat option is set
            if ($this->option('repeat')) {
                $this->info('Re-running migrate:fresh as requested...');
                $this->runMigrateFresh();
            }
        } else {
            $this->error("Database backup failed with error code {$resultCode}. Cannot proceed with migrate:fresh.");
            Log::error("Database backup failed. Error code: {$resultCode}");
        }
    }

    private function runMigrateFresh()
    {
        $this->call('migrate:fresh');
        $this->info('migrate:fresh completed successfully.');
    }
}












<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;

class FreshWithBackup extends Command
{
    // Command signature
    protected $signature = 'migrate:fresh-with-backup 
                            {--path= : The file path for the backup}';

    // Command description
    protected $description = 'Back up the database and then run migrate:fresh';

    public function __construct()
    {
        parent::__construct();
    }

    public function handle()
    {
        $this->info('Starting the database backup...');

        // Get database configuration
        $dbHost = env('DB_HOST');
        $dbPort = env('DB_PORT', 3306); // Your custom port might be 3307
        $dbName = env('DB_DATABASE');
        $dbUser = env('DB_USERNAME');
        $dbPass = env('DB_PASSWORD');

        // Determine the backup file path
        $filePath = $this->option('path') ?? storage_path('backups/' . $dbName . '_' . date('Y-m-d_H-i-s') . '.sql');

        // Ensure the backup directory exists
        $backupDirectory = dirname($filePath);
        if (!is_dir($backupDirectory)) {
            mkdir($backupDirectory, 0755, true);
        }

        // Construct the mysqldump command
        $dumpCommand = sprintf(
            'mysqldump --host=%s --port=%d --user=%s --password=%s %s > %s',
            escapeshellarg($dbHost),
            escapeshellarg($dbPort),
            escapeshellarg($dbUser),
            escapeshellarg($dbPass),
            escapeshellarg($dbName),
            escapeshellarg($filePath)
        );

        // Execute the command
        $output = null;
        $resultCode = null;
        exec($dumpCommand, $output, $resultCode);

        // Check if the backup was successful
        if ($resultCode === 0) {
            $this->info("Database backup successful! File saved to: {$filePath}");

            // Log the backup
            Log::info("Database backup created at: {$filePath}");

            // Proceed with migrate:fresh
            $this->info('Running migrate:fresh...');
            $this->call('migrate:fresh');
            $this->info('migrate:fresh completed successfully.');
        } else {
            $this->error("Database backup failed with error code {$resultCode}. Cannot proceed with migrate:fresh.");
            Log::error("Database backup failed. Error code: {$resultCode}");
        }
    }
}
