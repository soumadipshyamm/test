class BackupAndMigrate extends Command
{
    protected $signature = 'migrate';
    protected $description = 'Backup SQLite database, create a new one, and run migrations';

    public function handle()
    {
        // Step 1: Create a SQLite database
        $databasePath = database_path('database.sqlite');
        if (file_exists($databasePath)) {
            touch($databasePath);
            $this->info('SQLite database created.');
        }

        // Step 2: Backup existing data
        $backupPath = storage_path('backups');
        if (!is_dir($backupPath)) {
            mkdir($backupPath, 0755, true);
        }

        $backupFile = $backupPath . '/backup_' . date('Y_m_d_H_i_s') . '.sql';
        $tables = DB::select('SHOW TABLES');

        foreach ($tables as $table) {
            $tableName = $table->{"Tables_in_" . env('DB_DATABASE')}; // Adjust as per your DB setup
            $data = DB::table($tableName)->get();
            $sql = "INSERT INTO $tableName VALUES ";
            foreach ($data as $row) {
                $sql .= "(" . implode(',', array_map(fn($value) => "'" . addslashes($value) . "'", (array)$row)) . "),";
            }
            $sql = rtrim($sql, ',') . ";";
            file_put_contents($backupFile, $sql, FILE_APPEND);
        }
        $this->info('Backup created at: ' . $backupFile);
        // Step 3: Run migrations
        $this->call('migrate');
        $this->info('Migrations executed successfully.');
    }
}


hbhhhhhhhhhhhhhhhhhhhhhhjnnnnjnjnnnnnnnnnbbnnnnnnnjj
<?php

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;

class BackupAndMigrate extends Command
{
    protected $signature = 'backup-and-migrate';
    protected $description = 'Backup SQLite database, create a new one, and run migrations';

    public function handle()
    {
        // Step 1: Create a SQLite database if it doesn't exist
        $databasePath = database_path('database.sqlite');
        if (!file_exists($databasePath)) {
            File::put($databasePath, '');
            $this->info('SQLite database created.');
        }

        // Step 2: Backup existing data
        $backupPath = storage_path('backups');
        if (!is_dir($backupPath)) {
            mkdir($backupPath, 0755, true);
        }

        $backupFile = $backupPath . '/backup_' . date('Y_m_d_H_i_s') . '.sql';

        // Get list of all tables in the SQLite database
        $tables = DB::select('SELECT name FROM sqlite_master WHERE type="table"');

        foreach ($tables as $table) {
            $tableName = $table->name;

            // Skip internal SQLite tables
            if ($tableName == 'sqlite_sequence' || $tableName == 'migrations') {
                continue;
            }

            $data = DB::table($tableName)->get();
            $sql = "INSERT INTO $tableName VALUES ";

            foreach ($data as $row) {
                $sql .= "(" . implode(',', array_map(fn($value) => $this->formatValue($value), (array)$row)) . "),";
            }

            $sql = rtrim($sql, ',') . ";";
            file_put_contents($backupFile, $sql, FILE_APPEND);
        }

        $this->info('Backup created at: ' . $backupFile);

        // Step 3: Run migrations
        $this->call('migrate');
        $this->info('Migrations executed successfully.');
    }

    // Helper function to handle SQL formatting
    private function formatValue($value)
    {
        if (is_null($value)) {
            return 'NULL';
        }
        if (is_numeric($value)) {
            return $value;
        }
        return "'" . addslashes($value) . "'";
    }
}
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;

class BackupAndMigrate extends Command
{
    protected $signature = 'backup-and-migrate';
    protected $description = 'Backup SQLite database, create a new one, and run migrations';

    public function handle()
    {
        // Step 1: Create SQLite database
        $databasePath = database_path('database.sqlite');
        if (!file_exists($databasePath)) {
            touch($databasePath);
            $this->info('SQLite database created.');
        } else {
            $this->info('SQLite database already exists.');
        }

        // Step 2: Backup existing data
        $backupPath = storage_path('backups');
        if (!is_dir($backupPath)) {
            mkdir($backupPath, 0755, true);
        }

        $backupFile = $backupPath . '/backup_' . date('Y_m_d_H_i_s') . '.sql';

        try {
            // Fetch all tables in the database
            $tables = DB::select('SELECT name FROM sqlite_master WHERE type = "table" AND name NOT LIKE "sqlite_%"');
            
            foreach ($tables as $table) {
                $tableName = $table->name;

                // Skip migrations table to avoid unnecessary data restoration
                if ($tableName === 'migrations') {
                    continue;
                }

                $data = DB::table($tableName)->get();
                $sql = "INSERT INTO $tableName VALUES ";

                foreach ($data as $row) {
                    $sql .= "(" . implode(',', array_map(fn($value) => $this->quoteValue($value), (array)$row)) . "),";
                }

                $sql = rtrim($sql, ',') . ";\n";
                file_put_contents($backupFile, $sql, FILE_APPEND);
            }

            $this->info('Backup created at: ' . $backupFile);

        } catch (\Exception $e) {
            $this->error('Error creating backup: ' . $e->getMessage());
            return;
        }

        // Step 3: Run migrations
        $this->call('migrate');
        $this->info('Migrations executed successfully.');
    }

    /**
     * Helper function to quote values for SQL insertion.
     *
     * @param mixed $value
     * @return string
     */
    private function quoteValue($value)
    {
        if (is_null($value)) {
            return 'NULL';
        }
        return "'" . addslashes($value) . "'";
    }
}


