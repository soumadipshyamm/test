php artisan make:command BackupAndMigrate
php artisan make:command DatabaseBackup
composer require spatie/laravel-backup

******************************************************************
\app\Console\Commands\BackupAndMigrate.php

class BackupAndMigrate extends Command
{
    protected $signature = 'migrate:fresh
                            {--path= : The file path where the backup will be saved}
                            {--log= : Log file path for the backup process}';

    // Command description
    protected $description = 'Backup the database to a file and log the process';

    public function __construct()
    {
        parent::__construct();
    }
    public function handle()
    {
        $dbName = env('DB_DATABASE');
        $filePath = $this->option('path') ?? storage_path('backups/' . $dbName . '_' . date('Y-m-d_H-i-s') . '.sql');

        // Ensure backup directory exists
        File::ensureDirectoryExists(dirname($filePath));

        // Use Laravel's database export
        DB::unprepared('SET foreign_key_checks = 0');
        $tables = DB::select('SHOW TABLES');
        $sqlStatements = [];

        foreach ($tables as $table) {
            $tableName = get_object_vars($table)['Tables_in_' . $dbName];
            $createTable = DB::select("SHOW CREATE TABLE `{$tableName}`")[0]->{'Create Table'};
            $tableData = DB::table($tableName)->get();

            $sqlStatements[] = "DROP TABLE IF EXISTS `{$tableName}`;";
            $sqlStatements[] = $createTable . ";";

            foreach ($tableData as $row) {
                $insertValues = [];
                foreach ($row as $value) {
                    $insertValues[] = is_null($value) ? 'NULL' : "'" . addslashes($value) . "'";
                }
                $sqlStatements[] = "INSERT INTO `{$tableName}` VALUES (" . implode(',', $insertValues) . ");";
            }
        }

        DB::unprepared('SET foreign_key_checks = 1');

        // Write to file
        file_put_contents($filePath, implode("\n", $sqlStatements));
        // $this->call('migrate:fresh');
        $this->info("Backup created at: {$filePath}");
        $this->info('Migrations Fresh executed successfully.');
    }
}


******************************************************************


\app\Console\Commands\DatabaseBackup.php

class DatabaseBackup extends Command
{
// Command signature
protected $signature = 'db:backup
{--path= : The file path where the backup will be saved}
{--log= : Log file path for the backup process}';
// protected $signature = 'migrate:fresh';
// Command description
protected $description = 'Backup the database to a file and log the process';

public function __construct()
{
parent::__construct();
}
public function handle()
{
$dbName = env('DB_DATABASE');
$filePath = $this->option('path') ?? storage_path('backups/' . $dbName . '_' . date('Y-m-d_H-i-s') . '.sql');

// Ensure backup directory exists
File::ensureDirectoryExists(dirname($filePath));

// Use Laravel's database export
DB::unprepared('SET foreign_key_checks = 0');
$tables = DB::select('SHOW TABLES');
$sqlStatements = [];

foreach ($tables as $table) {
$tableName = get_object_vars($table)['Tables_in_' . $dbName];
$createTable = DB::select("SHOW CREATE TABLE `{$tableName}`")[0]->{'Create Table'};
$tableData = DB::table($tableName)->get();

$sqlStatements[] = "DROP TABLE IF EXISTS `{$tableName}`;";
$sqlStatements[] = $createTable . ";";

foreach ($tableData as $row) {
$insertValues = [];
foreach ($row as $value) {
$insertValues[] = is_null($value) ? 'NULL' : "'" . addslashes($value) . "'";
}
$sqlStatements[] = "INSERT INTO `{$tableName}` VALUES (" . implode(',', $insertValues) . ");";
}
}

DB::unprepared('SET foreign_key_checks = 1');

// Write to file
file_put_contents($filePath, implode("\n", $sqlStatements));
$this->info("Backup created at: {$filePath}");
}
}

******************************************************************

\app\Console\Kernel.php

protected $commands = [\App\Console\Commands\BackupAndMigrate::class,
\App\Console\Commands\DatabaseBackup::class];

******************************************************************

run command
php artisan db:backup --path=storage/backups/my_backup.sql --log=storage/logs/backup.log
php artisan migrate:fresh
