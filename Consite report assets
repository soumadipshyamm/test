



use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use Maatwebsite\Excel\Events\AfterSheet;

class ExportAssets implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    protected $units;
    protected $rowCount;

    public function __construct()
    {
        $this->units = $this->fetchUnits(); // Fetch available units dynamically
        $this->rowCount = 100;   // Apply dropdown for 100 rows or dynamically based on collection size
    }

    /**
     * Fetch the data collection to be exported.
     */
    public function collection()
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        // Fetch data and pass it through the resource
        $assets = Assets::with('units', 'project', 'store_warehouses')
            ->where('company_id', $companyId)
            ->get();

        return AssetesExportResources::collection($assets); // Use resource to transform data
    }

    /**
     * Return the headings for the exported file.
     */
    public function headings(): array
    {
        return [
            '#',                    // A - Serial Number
            'UUID',                 // B - Hidden column
            'ID',                   // C - Hidden column
            'Code',                 // D
            'Asset/Equipments/Machinery', // E
            'Unit',                 // F - Dropdown
            'Specification',        // G
        ];
    }

    /**
     * Register the events to manipulate the spreadsheet after it's created.
     */
    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();

                // Apply dropdown validation to column F for 'Unit'
                $this->applyDropdownValidation($event, 'F', $this->units, $this->rowCount);

                // Hide the UUID column (B)
                $sheet->getColumnDimension('B')->setVisible(false);

                // Hide the ID column (C)
                $sheet->getColumnDimension('C')->setVisible(false);
            },
        ];
    }

    /**
     * Apply dropdown validation to a specific column and range.
     */
    private function applyDropdownValidation($event, $column, $options, $rowCount)
    {
        $sheet = $event->sheet->getDelegate();
        for ($row = 2; $row <= $rowCount + 1; $row++) {
            $cell = "{$column}{$row}"; // Target column for dropdown
            $validation = $sheet->getCell($cell)->getDataValidation();

            // Configure validation for the dropdown
            $validation->setType(DataValidation::TYPE_LIST);
            $validation->setErrorStyle(DataValidation::STYLE_STOP);
            $validation->setAllowBlank(false);
            $validation->setShowDropDown(true);
            $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
        }
    }

    /**
     * Fetch available units dynamically.
     */
    private function fetchUnits(): array
    {
        // Assuming getUnit() returns an array of units for the dropdown.
        return getUnit(); // Example: ['kg', 'lb', 'ton']
    }
}









class ExportAssets implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents
{
    protected $units;
    protected $rowCount;

    public function __construct()
    {
        $this->units = getUnit(); // Fetch available units dynamically
        $this->rowCount = 100;   // Apply dropdown for 100 rows
    }

    public function collection()
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        // Fetch data and pass it through the resource
        $assets = Assets::with('units', 'project', 'store_warehouses')
            ->where('company_id', $companyId)
            ->get();

            return AssetesExportResources::collection($assets); // Use resource to transform data
        // collect($data->map(function ($item, $index) {
        //     $item['#'] = $index + 1; // Add serial number starting from 1
        //     return $item;
        // }));
    }

    public function headings(): array
    {
        return [
            '#',                    // A
            'UUID',                      // B (Hidden)
            'ID',                        // C (Hidden)
            'Code',                      // D
            'Asset/Equipments/Machinery',// E
            'Unit',                      // F (Dropdown)
            'Specification',             // G
        ];
    }

    // public function map($row): array
    // {
    //     static $serialNumber = 0; // Initialize serial number
    //     $serialNumber++;          // Increment for each row

    //     return [
    //         $serialNumber,               // Column A: Serial Number
    //         $row['uuid'],                // Column B: UUID
    //         $row['id'],                  // Column C: ID (Hidden)
    //         $row['code'],                // Column D: Code
    //         $row['name'],                // Column E: Asset/Equipments Name
    //         $row['unit'] ?? '',       // Column F: Unit Name or 'N/A'
    //         $row['specification'],       // Column G: Specification
    //     ];
    // }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();
                // $row_count = $this->row_count;

                // Generate dropdown for units in Column F
                // foreach (range(2, $row_count + 1) as $row) {
                //     $cell = "F{$row}"; // Column F for dropdown
                //     $validation = $sheet->getCell($cell)->getDataValidation();

                //     // $this->configureDataValidation($validation, $this->units);
                // }

                $this->applyDropdownValidation($event, 'F', $this->units);

                // Hide the UUID column (B)
                $sheet->getColumnDimension('B')->setVisible(false);

                // Hide the ID column (C)
                $sheet->getColumnDimension('C')->setVisible(false);
            },
        ];
    }


    private function applyDropdownValidation($event, $column, $options)
    {
        for ($row = 2; $row <= $this->rowCount; $row++) {
            $validation = $event->sheet->getCell("{$column}{$row}")->getDataValidation();
            $validation->setType(DataValidation::TYPE_LIST);
            $validation->setErrorStyle(DataValidation::STYLE_STOP);
            $validation->setAllowBlank(false);
            $validation->setShowDropDown(true);
            $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
        }
    }
    // private function configureDataValidation(DataValidation $validation, array $options)
    // {
    //     $validation->setType(DataValidation::TYPE_LIST);
    //     $validation->setErrorStyle(DataValidation::STYLE_INFORMATION);
    //     $validation->setAllowBlank(false);
    //     $validation->setShowInputMessage(true);
    //     $validation->setShowErrorMessage(true);
    //     $validation->setShowDropDown(true);
    //     $validation->setErrorTitle('Input Error');
    //     $validation->setError('The value is not in the list.');
    //     $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
    // }
}

***************************************************************************************************************************
**********************************Assets*******************************************************************************
***************************************************************************************************************************





use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;

class ExportAssets implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents, WithMapping
{
    protected $units;
    protected $row_count;

    public function __construct()
    {
        $this->units = getUnit(); // Fetch available units dynamically
        $this->row_count = 100;   // Apply dropdown for 100 rows
    }

    public function collection()
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        // Fetch data and pass it through the resource
        $assets = Assets::with('units', 'project', 'store_warehouses')
            ->where('company_id', $companyId)
            ->get();

        return AssetsResource::collection($assets); // Use resource to transform data
    }

    public function headings(): array
    {
        return [
            'Serial Number',             // A
            'UUID',                      // B (Hidden)
            'ID',                        // C (Hidden)
            'Code',                      // D
            'Asset/Equipments/Machinery',// E
            'Unit',                      // F (Dropdown)
            'Specification',             // G
        ];
    }

    public function map($row): array
    {
        static $serialNumber = 0; // Initialize serial number
        $serialNumber++;          // Increment for each row

        return [
            $serialNumber,               // Column A: Serial Number
            $row['uuid'],                // Column B: UUID
            $row['id'],                  // Column C: ID (Hidden)
            $row['code'],                // Column D: Code
            $row['name'],                // Column E: Asset/Equipments Name
            $row['unit'] ?? 'N/A',       // Column F: Unit Name or 'N/A'
            $row['specification'],       // Column G: Specification
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();
                $row_count = $this->row_count;

                // Generate dropdown for units in Column F
                foreach (range(2, $row_count + 1) as $row) {
                    $cell = "F{$row}"; // Column F for dropdown
                    $validation = $sheet->getCell($cell)->getDataValidation();
                    $this->configureDataValidation($validation, $this->units);
                }

                // Hide the UUID column (B)
                $sheet->getColumnDimension('B')->setVisible(false);

                // Hide the ID column (C)
                $sheet->getColumnDimension('C')->setVisible(false);
            },
        ];
    }

    private function configureDataValidation(DataValidation $validation, array $options)
    {
        $validation->setType(DataValidation::TYPE_LIST);
        $validation->setErrorStyle(DataValidation::STYLE_INFORMATION);
        $validation->setAllowBlank(false);
        $validation->setShowInputMessage(true);
        $validation->setShowErrorMessage(true);
        $validation->setShowDropDown(true);
        $validation->setErrorTitle('Input Error');
        $validation->setError('The value is not in the list.');
        $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
    }
}







use PhpOffice\PhpSpreadsheet\Cell\DataValidation;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;

class ExportAssets implements FromCollection, WithHeadings, ShouldAutoSize, WithEvents, WithMapping
{
    protected $units;
    protected $row_count;

    public function __construct()
    {
        $this->units = getUnit(); // Fetch all available units dynamically
        $this->row_count = 100; // Apply dropdown for 100 rows
    }

    public function collection()
    {
        $authCompany = Auth::guard('company')->user()->id;
        $companyId = searchCompanyId($authCompany);

        $assets = Assets::with('units', 'project', 'store_warehouses')
            ->where('company_id', $companyId)
            ->get();

        return $assets;
    }

    public function headings(): array
    {
        return [
            'Serial Number',             // A
            'UUID',                      // B (Hidden)
            'ID',                        // C (Hidden)
            'Code',                      // D
            'Asset/Equipments/Machinery',// E
            'Unit',                      // F (Dropdown)
            'Specification',             // G
        ];
    }

    public function map($row): array
    {
        static $serialNumber = 0; // Initialize serial number
        $serialNumber++;          // Increment for each row

        return [
            $serialNumber,              // Column A: Serial Number
            $row->uuid,                 // Column B: UUID
            $row->id,                   // Column C: ID (Hidden)
            $row->code,                 // Column D: Code
            $row->name,                 // Column E: Asset/Equipments Name
            $row->units->name ?? 'N/A', // Column F: Unit Name or 'N/A'
            $row->specification,        // Column G: Specification
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();
                $row_count = $this->row_count;

                // Generate dropdown for units in Column F
                foreach (range(2, $row_count + 1) as $row) {
                    $cell = "F{$row}"; // Column F for dropdown
                    $validation = $sheet->getCell($cell)->getDataValidation();
                    $this->configureDataValidation($validation, $this->units);
                }

                // Hide the UUID column (B)
                $sheet->getColumnDimension('B')->setVisible(false);

                // Hide the ID column (C)
                $sheet->getColumnDimension('C')->setVisible(false);
            },
        ];
    }

    private function configureDataValidation(DataValidation $validation, array $options)
    {
        $validation->setType(DataValidation::TYPE_LIST);
        $validation->setErrorStyle(DataValidation::STYLE_INFORMATION);
        $validation->setAllowBlank(false);
        $validation->setShowInputMessage(true);
        $validation->setShowErrorMessage(true);
        $validation->setShowDropDown(true);
        $validation->setErrorTitle('Input Error');
        $validation->setError('The value is not in the list.');
        $validation->setFormula1(sprintf('"%s"', implode(',', $options)));
    }
}




